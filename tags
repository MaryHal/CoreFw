!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALCcontext	src/Audio/Listener.h	/^typedef struct ALCcontext_struct ALCcontext;$/;"	t	typeref:struct:ALCcontext_struct
ALCdevice	src/Audio/Listener.h	/^typedef struct ALCdevice_struct ALCdevice;$/;"	t	typeref:struct:ALCdevice_struct
Add	src/Graphics/Drawable.h	/^    const int Add = 2;$/;"	m	namespace:Blend
Alpha	src/Graphics/Drawable.h	/^    const int Alpha = 1;$/;"	m	namespace:Blend
ArcCos	src/Math/Trig.h	/^        static float ArcCos(float value)                { return RadToDeg(std::acos(value));        }$/;"	f	class:Trig	access:public	signature:(float value)
ArcSin	src/Math/Trig.h	/^        static float ArcSin(float value)                { return RadToDeg(std::asin(value));        }$/;"	f	class:Trig	access:public	signature:(float value)
ArcTan2	src/Math/Trig.h	/^        static float ArcTan2(float valY, float valX)    { return RadToDeg(std::atan2(valY, valX));  }$/;"	f	class:Trig	access:public	signature:(float valY, float valX)
BLACK	src/Graphics/Color.cpp	/^Color Color::BLACK = Color(0.0f, 0.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
BLACK	src/Graphics/Color.h	/^        static Color BLACK;$/;"	m	class:Color	access:public
BLUE	src/Graphics/Color.cpp	/^Color Color::BLUE  = Color(0.0f, 0.0f, 1.0f, 1.0f);$/;"	m	class:Color	file:
BLUE	src/Graphics/Color.h	/^        static Color BLUE;$/;"	m	class:Color	access:public
BUFFER_COUNT	src/Audio/Music.h	/^        static const unsigned int BUFFER_COUNT = 5;$/;"	m	class:Music	access:private
BUFFER_OFFSET	src/Graphics/VertexBuffer.cpp	13;"	d	file:
BinaryHeap	src/Utils/BinaryHeap.h	/^        BinaryHeap(int (*compare)(const T& a, const T& b), size_t cap)$/;"	f	class:BinaryHeap	access:public	signature:(int (*compare)(const T& a, const T& b), size_t cap)
BinaryHeap	src/Utils/BinaryHeap.h	/^class BinaryHeap$/;"	c
BinaryHeap::BinaryHeap	src/Utils/BinaryHeap.h	/^        BinaryHeap(int (*compare)(const T& a, const T& b), size_t cap)$/;"	f	class:BinaryHeap	access:public	signature:(int (*compare)(const T& a, const T& b), size_t cap)
BinaryHeap::add	src/Utils/BinaryHeap.h	/^        void add(const T* element)$/;"	f	class:BinaryHeap	access:public	signature:(const T* element)
BinaryHeap::capacity	src/Utils/BinaryHeap.h	/^        size_t capacity;$/;"	m	class:BinaryHeap	access:private
BinaryHeap::cmp	src/Utils/BinaryHeap.h	/^        int (*cmp)(const T& a, const T& b);$/;"	m	class:BinaryHeap	access:private
BinaryHeap::data	src/Utils/BinaryHeap.h	/^        T* data;$/;"	m	class:BinaryHeap	access:private
BinaryHeap::findIndex	src/Utils/BinaryHeap.h	/^        int findIndex(const T* data) const$/;"	f	class:BinaryHeap	access:public	signature:(const T* data) const
BinaryHeap::getCapacity	src/Utils/BinaryHeap.h	/^        size_t getCapacity() const$/;"	f	class:BinaryHeap	access:public	signature:() const
BinaryHeap::getSize	src/Utils/BinaryHeap.h	/^        size_t getSize() const$/;"	f	class:BinaryHeap	access:public	signature:() const
BinaryHeap::percolateDown	src/Utils/BinaryHeap.h	/^        void percolateDown(int hole)$/;"	f	class:BinaryHeap	access:public	signature:(int hole)
BinaryHeap::percolateUp	src/Utils/BinaryHeap.h	/^        void percolateUp(int hole, const T* element)$/;"	f	class:BinaryHeap	access:public	signature:(int hole, const T* element)
BinaryHeap::remove	src/Utils/BinaryHeap.h	/^        T* remove()$/;"	f	class:BinaryHeap	access:public	signature:()
BinaryHeap::size	src/Utils/BinaryHeap.h	/^        size_t size;$/;"	m	class:BinaryHeap	access:private
BinaryHeap::swap	src/Utils/BinaryHeap.h	/^        void swap(int first, int second)$/;"	f	class:BinaryHeap	access:public	signature:(int first, int second)
BinaryHeap::~BinaryHeap	src/Utils/BinaryHeap.h	/^        ~BinaryHeap()$/;"	f	class:BinaryHeap	access:public	signature:()
Blend	src/Graphics/Drawable.h	/^namespace Blend$/;"	n
Blend::Add	src/Graphics/Drawable.h	/^    const int Add = 2;$/;"	m	namespace:Blend
Blend::Alpha	src/Graphics/Drawable.h	/^    const int Alpha = 1;$/;"	m	namespace:Blend
Blend::Multiply	src/Graphics/Drawable.h	/^    const int Multiply = 3;$/;"	m	namespace:Blend
Blend::None	src/Graphics/Drawable.h	/^    const int None = 0;$/;"	m	namespace:Blend
Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer()$/;"	f	class:Buffer	signature:()
Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer(char* buf, int bufferLength)$/;"	f	class:Buffer	signature:(char* buf, int bufferLength)
Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer(size_t maxSize)$/;"	f	class:Buffer	signature:(size_t maxSize)
Buffer	src/Memory/Buffer.h	/^        Buffer();$/;"	p	class:Buffer	access:public	signature:()
Buffer	src/Memory/Buffer.h	/^        Buffer(char* buf, int bufferLength);$/;"	p	class:Buffer	access:public	signature:(char* buf, int bufferLength)
Buffer	src/Memory/Buffer.h	/^        Buffer(size_t maxSize);$/;"	p	class:Buffer	access:public	signature:(size_t maxSize)
Buffer	src/Memory/Buffer.h	/^class Buffer$/;"	c
Buffer::Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer()$/;"	f	class:Buffer	signature:()
Buffer::Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer(char* buf, int bufferLength)$/;"	f	class:Buffer	signature:(char* buf, int bufferLength)
Buffer::Buffer	src/Memory/Buffer.cpp	/^Buffer::Buffer(size_t maxSize)$/;"	f	class:Buffer	signature:(size_t maxSize)
Buffer::Buffer	src/Memory/Buffer.h	/^        Buffer();$/;"	p	class:Buffer	access:public	signature:()
Buffer::Buffer	src/Memory/Buffer.h	/^        Buffer(char* buf, int bufferLength);$/;"	p	class:Buffer	access:public	signature:(char* buf, int bufferLength)
Buffer::Buffer	src/Memory/Buffer.h	/^        Buffer(size_t maxSize);$/;"	p	class:Buffer	access:public	signature:(size_t maxSize)
Buffer::allocateData	src/Memory/Buffer.cpp	/^void Buffer::allocateData(size_t maxSize)$/;"	f	class:Buffer	signature:(size_t maxSize)
Buffer::allocateData	src/Memory/Buffer.h	/^        void allocateData(size_t maxSize);$/;"	p	class:Buffer	access:public	signature:(size_t maxSize)
Buffer::append	src/Memory/Buffer.cpp	/^void Buffer::append(Buffer* b)$/;"	f	class:Buffer	signature:(Buffer* b)
Buffer::append	src/Memory/Buffer.h	/^        void append(Buffer* b);$/;"	p	class:Buffer	access:public	signature:(Buffer* b)
Buffer::atEnd	src/Memory/Buffer.cpp	/^bool Buffer::atEnd()$/;"	f	class:Buffer	signature:()
Buffer::atEnd	src/Memory/Buffer.h	/^        bool atEnd();$/;"	p	class:Buffer	access:public	signature:()
Buffer::bufferEnd	src/Memory/Buffer.h	/^        char* bufferEnd;$/;"	m	class:Buffer	access:protected
Buffer::clear	src/Memory/Buffer.cpp	/^void Buffer::clear()$/;"	f	class:Buffer	signature:()
Buffer::clear	src/Memory/Buffer.h	/^        void clear();$/;"	p	class:Buffer	access:public	signature:()
Buffer::data	src/Memory/Buffer.h	/^        char* data;$/;"	m	class:Buffer	access:protected
Buffer::dumpBuffer	src/Memory/Buffer.cpp	/^void Buffer::dumpBuffer()$/;"	f	class:Buffer	signature:()
Buffer::dumpBuffer	src/Memory/Buffer.h	/^        void dumpBuffer();$/;"	p	class:Buffer	access:public	signature:()
Buffer::external	src/Memory/Buffer.h	/^        bool external;$/;"	m	class:Buffer	access:protected
Buffer::getData	src/Memory/Buffer.cpp	/^char* Buffer::getData()$/;"	f	class:Buffer	signature:()
Buffer::getData	src/Memory/Buffer.h	/^        char* getData();$/;"	p	class:Buffer	access:public	signature:()
Buffer::length	src/Memory/Buffer.h	/^        size_t length;$/;"	m	class:Buffer	access:protected
Buffer::move	src/Memory/Buffer.h	/^        void move(int offset);$/;"	p	class:Buffer	access:public	signature:(int offset)
Buffer::readColor	src/Memory/Buffer.cpp	/^void Buffer::readColor(Color* c)$/;"	f	class:Buffer	signature:(Color* c)
Buffer::readColor	src/Memory/Buffer.h	/^        void readColor(Color* c);$/;"	p	class:Buffer	access:public	signature:(Color* c)
Buffer::readFloat	src/Memory/Buffer.cpp	/^float Buffer::readFloat()$/;"	f	class:Buffer	signature:()
Buffer::readFloat	src/Memory/Buffer.h	/^        float readFloat();$/;"	p	class:Buffer	access:public	signature:()
Buffer::readLoc	src/Memory/Buffer.h	/^        char* readLoc;$/;"	m	class:Buffer	access:protected
Buffer::readVector	src/Memory/Buffer.cpp	/^void Buffer::readVector(Vector2f* v)$/;"	f	class:Buffer	signature:(Vector2f* v)
Buffer::readVector	src/Memory/Buffer.h	/^        void readVector(Vector2f* v);$/;"	p	class:Buffer	access:public	signature:(Vector2f* v)
Buffer::rewind	src/Memory/Buffer.cpp	/^void Buffer::rewind()$/;"	f	class:Buffer	signature:()
Buffer::rewind	src/Memory/Buffer.h	/^        void rewind();$/;"	p	class:Buffer	access:public	signature:()
Buffer::setBuffer	src/Memory/Buffer.cpp	/^void Buffer::setBuffer(char* buf, int bufferLength)$/;"	f	class:Buffer	signature:(char* buf, int bufferLength)
Buffer::setBuffer	src/Memory/Buffer.h	/^        void setBuffer(char* buf, int bufferLength);$/;"	p	class:Buffer	access:public	signature:(char* buf, int bufferLength)
Buffer::setReadLoc	src/Memory/Buffer.h	/^        template<class T> void setReadLoc(int count)$/;"	f	class:Buffer	access:public	signature:(int count)
Buffer::setReadLoc	src/Memory/Buffer.h	/^        void setReadLoc(int count, size_t bytesPerCount);$/;"	p	class:Buffer	access:public	signature:(int count, size_t bytesPerCount)
Buffer::setWriteLoc	src/Memory/Buffer.h	/^        template<class T> void setWriteLoc(int count)$/;"	f	class:Buffer	access:public	signature:(int count)
Buffer::setWriteLoc	src/Memory/Buffer.h	/^        void setWriteLoc(int count, size_t bytesPerCount);$/;"	p	class:Buffer	access:public	signature:(int count, size_t bytesPerCount)
Buffer::size	src/Memory/Buffer.cpp	/^size_t Buffer::size()$/;"	f	class:Buffer	signature:()
Buffer::size	src/Memory/Buffer.h	/^        size_t size();$/;"	p	class:Buffer	access:public	signature:()
Buffer::writeColor	src/Memory/Buffer.cpp	/^void Buffer::writeColor(const Color& c)$/;"	f	class:Buffer	signature:(const Color& c)
Buffer::writeColor	src/Memory/Buffer.cpp	/^void Buffer::writeColor(float r, float g, float b, float a)$/;"	f	class:Buffer	signature:(float r, float g, float b, float a)
Buffer::writeColor	src/Memory/Buffer.h	/^        void writeColor(const Color& c);$/;"	p	class:Buffer	access:public	signature:(const Color& c)
Buffer::writeColor	src/Memory/Buffer.h	/^        void writeColor(float r, float g, float b, float a);$/;"	p	class:Buffer	access:public	signature:(float r, float g, float b, float a)
Buffer::writeFloat	src/Memory/Buffer.cpp	/^void Buffer::writeFloat(float f)$/;"	f	class:Buffer	signature:(float f)
Buffer::writeFloat	src/Memory/Buffer.h	/^        void writeFloat(float value);$/;"	p	class:Buffer	access:public	signature:(float value)
Buffer::writeLoc	src/Memory/Buffer.h	/^        char* writeLoc;$/;"	m	class:Buffer	access:protected
Buffer::writeVector	src/Memory/Buffer.cpp	/^void Buffer::writeVector(const Vector2f& v)$/;"	f	class:Buffer	signature:(const Vector2f& v)
Buffer::writeVector	src/Memory/Buffer.cpp	/^void Buffer::writeVector(float x, float y)$/;"	f	class:Buffer	signature:(float x, float y)
Buffer::writeVector	src/Memory/Buffer.h	/^        void writeVector(const Vector2f& v);$/;"	p	class:Buffer	access:public	signature:(const Vector2f& v)
Buffer::writeVector	src/Memory/Buffer.h	/^        void writeVector(float x, float y);$/;"	p	class:Buffer	access:public	signature:(float x, float y)
Buffer::~Buffer	src/Memory/Buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer	signature:()
Buffer::~Buffer	src/Memory/Buffer.h	/^        virtual ~Buffer();$/;"	p	class:Buffer	access:public	signature:()
BufferLayout	src/Graphics/VertexBuffer.h	/^namespace BufferLayout$/;"	n
BufferLayout::Color	src/Graphics/VertexBuffer.h	/^        Color,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::MAX_LAYOUT	src/Graphics/VertexBuffer.h	/^        MAX_LAYOUT$/;"	e	enum:BufferLayout::__anon3
BufferLayout::None	src/Graphics/VertexBuffer.h	/^        None,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::TV	src/Graphics/VertexBuffer.h	/^        TV,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::TVC	src/Graphics/VertexBuffer.h	/^        TVC,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::TexCoord	src/Graphics/VertexBuffer.h	/^        TexCoord,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::VC	src/Graphics/VertexBuffer.h	/^        VC,$/;"	e	enum:BufferLayout::__anon3
BufferLayout::Vertex	src/Graphics/VertexBuffer.h	/^        Vertex,$/;"	e	enum:BufferLayout::__anon3
BufferType	src/Graphics/VertexBuffer.h	/^namespace BufferType$/;"	n
BufferType::DynamicBuffer	src/Graphics/VertexBuffer.h	/^        DynamicBuffer, \/\/ Change data from time to time$/;"	e	enum:BufferType::__anon1
BufferType::MAX_BUFFER	src/Graphics/VertexBuffer.h	/^        MAX_BUFFER$/;"	e	enum:BufferType::__anon1
BufferType::StaticBuffer	src/Graphics/VertexBuffer.h	/^        StaticBuffer,  \/\/ Set data once, render that data lots$/;"	e	enum:BufferType::__anon1
BufferType::StreamBuffer	src/Graphics/VertexBuffer.h	/^        StreamBuffer,  \/\/ Write data a lot (like once per frame)$/;"	e	enum:BufferType::__anon1
Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet()$/;"	f	class:Bullet	signature:()
Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet(const ParticleProperties& p)$/;"	f	class:Bullet	signature:(const ParticleProperties& p)
Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet(const Vector2f& positive, $/;"	f	class:Bullet	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
Bullet	test/Bullet/Bullet.h	/^        Bullet();$/;"	p	class:Bullet	access:public	signature:()
Bullet	test/Bullet/Bullet.h	/^        Bullet(const ParticleProperties& p);$/;"	p	class:Bullet	access:public	signature:(const ParticleProperties& p)
Bullet	test/Bullet/Bullet.h	/^        Bullet(const Vector2f& positive, $/;"	p	class:Bullet	access:public	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
Bullet	test/Bullet/Bullet.h	/^class Bullet : public Particle$/;"	c	inherits:Particle
Bullet::Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet()$/;"	f	class:Bullet	signature:()
Bullet::Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet(const ParticleProperties& p)$/;"	f	class:Bullet	signature:(const ParticleProperties& p)
Bullet::Bullet	test/Bullet/Bullet.cpp	/^Bullet::Bullet(const Vector2f& positive, $/;"	f	class:Bullet	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
Bullet::Bullet	test/Bullet/Bullet.h	/^        Bullet();$/;"	p	class:Bullet	access:public	signature:()
Bullet::Bullet	test/Bullet/Bullet.h	/^        Bullet(const ParticleProperties& p);$/;"	p	class:Bullet	access:public	signature:(const ParticleProperties& p)
Bullet::Bullet	test/Bullet/Bullet.h	/^        Bullet(const Vector2f& positive, $/;"	p	class:Bullet	access:public	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
Bullet::changeDirection	test/Bullet/Bullet.h	/^        void changeDirection(float value, float wait);$/;"	p	class:Bullet	access:public	signature:(float value, float wait)
Bullet::changeDirectionRel	test/Bullet/Bullet.h	/^        void changeDirectionRel(float value, float wait);$/;"	p	class:Bullet	access:public	signature:(float value, float wait)
Bullet::~Bullet	test/Bullet/Bullet.cpp	/^Bullet::~Bullet()$/;"	f	class:Bullet	signature:()
Bullet::~Bullet	test/Bullet/Bullet.h	/^        ~Bullet();$/;"	p	class:Bullet	access:public	signature:()
BulletEmitter	test/Bullet/BulletEmitter.cpp	/^BulletEmitter::BulletEmitter()$/;"	f	class:BulletEmitter	signature:()
BulletEmitter	test/Bullet/BulletEmitter.h	/^        BulletEmitter();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletEmitter	test/Bullet/BulletEmitter.h	/^class BulletEmitter : public ParticleEmitter $/;"	c	inherits:ParticleEmitter
BulletEmitter::BulletEmitter	test/Bullet/BulletEmitter.cpp	/^BulletEmitter::BulletEmitter()$/;"	f	class:BulletEmitter	signature:()
BulletEmitter::BulletEmitter	test/Bullet/BulletEmitter.h	/^        BulletEmitter();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletEmitter::allocateMem	test/Bullet/BulletEmitter.cpp	/^void BulletEmitter::allocateMem()$/;"	f	class:BulletEmitter	signature:()
BulletEmitter::allocateMem	test/Bullet/BulletEmitter.h	/^        void allocateMem();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletEmitter::fire	test/Bullet/BulletEmitter.h	/^        void fire();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletEmitter::set	test/Bullet/BulletEmitter.cpp	/^void BulletEmitter::set()$/;"	f	class:BulletEmitter	signature:()
BulletEmitter::set	test/Bullet/BulletEmitter.h	/^        void set();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletEmitter::~BulletEmitter	test/Bullet/BulletEmitter.cpp	/^BulletEmitter::~BulletEmitter()$/;"	f	class:BulletEmitter	signature:()
BulletEmitter::~BulletEmitter	test/Bullet/BulletEmitter.h	/^        ~BulletEmitter();$/;"	p	class:BulletEmitter	access:public	signature:()
BulletMem	test/Bullet/ParticleMem.cpp	/^BulletMem::BulletMem(int size)$/;"	f	class:BulletMem	signature:(int size)
BulletMem	test/Bullet/ParticleMem.h	/^        BulletMem(int size);$/;"	p	class:BulletMem	access:public	signature:(int size)
BulletMem	test/Bullet/ParticleMem.h	/^class BulletMem : public VectorMem $/;"	c	inherits:VectorMem
BulletMem::BulletMem	test/Bullet/ParticleMem.cpp	/^BulletMem::BulletMem(int size)$/;"	f	class:BulletMem	signature:(int size)
BulletMem::BulletMem	test/Bullet/ParticleMem.h	/^        BulletMem(int size);$/;"	p	class:BulletMem	access:public	signature:(int size)
BulletMem::allocateParticles	test/Bullet/ParticleMem.cpp	/^void BulletMem::allocateParticles()$/;"	f	class:BulletMem	signature:()
BulletMem::allocateParticles	test/Bullet/ParticleMem.h	/^        void allocateParticles();$/;"	p	class:BulletMem	access:private	signature:()
BulletMem::~BulletMem	test/Bullet/ParticleMem.cpp	/^BulletMem::~BulletMem()$/;"	f	class:BulletMem	signature:()
BulletMem::~BulletMem	test/Bullet/ParticleMem.h	/^        ~BulletMem();$/;"	p	class:BulletMem	access:public	signature:()
Burst	test/Bullet/Burst.cpp	/^Burst::Burst()$/;"	f	class:Burst	signature:()
Burst	test/Bullet/Burst.h	/^        Burst();$/;"	p	class:Burst	access:public	signature:()
Burst	test/Bullet/Burst.h	/^class Burst : public ParticleEmitter$/;"	c	inherits:ParticleEmitter
Burst::Burst	test/Bullet/Burst.cpp	/^Burst::Burst()$/;"	f	class:Burst	signature:()
Burst::Burst	test/Bullet/Burst.h	/^        Burst();$/;"	p	class:Burst	access:public	signature:()
Burst::SINGLE	test/Bullet/Burst.h	/^        static const int SINGLE = 512.0f;$/;"	m	class:Burst	access:private
Burst::getSkittles	test/Bullet/Burst.cpp	/^bool Burst::getSkittles()$/;"	f	class:Burst	signature:()
Burst::getSkittles	test/Bullet/Burst.h	/^        bool getSkittles();$/;"	p	class:Burst	access:public	signature:()
Burst::p	test/Bullet/Burst.cpp	/^ParticleProperties Burst::p = $/;"	m	class:Burst	file:
Burst::p	test/Bullet/Burst.h	/^        static ParticleProperties p;$/;"	m	class:Burst	access:private
Burst::set	test/Bullet/Burst.cpp	/^void Burst::set()$/;"	f	class:Burst	signature:()
Burst::set	test/Bullet/Burst.h	/^        virtual void set();$/;"	p	class:Burst	access:public	signature:()
Burst::setSkittles	test/Bullet/Burst.cpp	/^void Burst::setSkittles(bool value)$/;"	f	class:Burst	signature:(bool value)
Burst::setSkittles	test/Bullet/Burst.h	/^        void setSkittles(bool value);$/;"	p	class:Burst	access:public	signature:(bool value)
Burst::skittles	test/Bullet/Burst.h	/^        bool skittles;$/;"	m	class:Burst	access:private
CASE	src/stblib/stb_image.c	2217;"	d	file:
CASE	src/stblib/stb_image.c	2230;"	d	file:
CASE	src/stblib/stb_image.c	2233;"	d	file:
CASE	src/stblib/stb_image.c	2246;"	d	file:
CASE	src/stblib/stb_image.c	585;"	d	file:
CASE	src/stblib/stb_image.c	603;"	d	file:
COMBO	src/stblib/stb_image.c	584;"	d	file:
Circle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Circle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v, float r, const Color& color)
Circle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Circle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x, float y, float r, const Color& color)
Circle	src/Graphics/VertexBuffer.h	/^        static void Circle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v, float r, const Color& color)
Circle	src/Graphics/VertexBuffer.h	/^        static void Circle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x, float y, float r, const Color& color)
Color	src/Graphics/Color.cpp	/^Color::Color(const Color& c)$/;"	f	class:Color	signature:(const Color& c)
Color	src/Graphics/Color.cpp	/^Color::Color(float r, float g, float b, float a)$/;"	f	class:Color	signature:(float r, float g, float b, float a)
Color	src/Graphics/Color.h	/^        Color(const Color& c);$/;"	p	class:Color	access:public	signature:(const Color& c)
Color	src/Graphics/Color.h	/^        Color(float r=1.0f, float g=1.0f, float b=1.0f, float a=1.0f);$/;"	p	class:Color	access:public	signature:(float r=1.0f, float g=1.0f, float b=1.0f, float a=1.0f)
Color	src/Graphics/Color.h	/^class Color$/;"	c
Color	src/Graphics/VertexBuffer.h	/^        Color,$/;"	e	enum:BufferLayout::__anon3
Color::BLACK	src/Graphics/Color.cpp	/^Color Color::BLACK = Color(0.0f, 0.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
Color::BLACK	src/Graphics/Color.h	/^        static Color BLACK;$/;"	m	class:Color	access:public
Color::BLUE	src/Graphics/Color.cpp	/^Color Color::BLUE  = Color(0.0f, 0.0f, 1.0f, 1.0f);$/;"	m	class:Color	file:
Color::BLUE	src/Graphics/Color.h	/^        static Color BLUE;$/;"	m	class:Color	access:public
Color::Color	src/Graphics/Color.cpp	/^Color::Color(const Color& c)$/;"	f	class:Color	signature:(const Color& c)
Color::Color	src/Graphics/Color.cpp	/^Color::Color(float r, float g, float b, float a)$/;"	f	class:Color	signature:(float r, float g, float b, float a)
Color::Color	src/Graphics/Color.h	/^        Color(const Color& c);$/;"	p	class:Color	access:public	signature:(const Color& c)
Color::Color	src/Graphics/Color.h	/^        Color(float r=1.0f, float g=1.0f, float b=1.0f, float a=1.0f);$/;"	p	class:Color	access:public	signature:(float r=1.0f, float g=1.0f, float b=1.0f, float a=1.0f)
Color::GREEN	src/Graphics/Color.cpp	/^Color Color::GREEN = Color(0.0f, 1.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
Color::GREEN	src/Graphics/Color.h	/^        static Color GREEN;$/;"	m	class:Color	access:public
Color::RED	src/Graphics/Color.cpp	/^Color Color::RED   = Color(1.0f, 0.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
Color::RED	src/Graphics/Color.h	/^        static Color RED;$/;"	m	class:Color	access:public
Color::WHITE	src/Graphics/Color.cpp	/^Color Color::WHITE = Color(1.0f, 1.0f, 1.0f, 1.0f);$/;"	m	class:Color	file:
Color::WHITE	src/Graphics/Color.h	/^        static Color WHITE;$/;"	m	class:Color	access:public
Color::a	src/Graphics/Color.h	/^        float a;$/;"	m	class:Color	access:public
Color::b	src/Graphics/Color.h	/^        float b;$/;"	m	class:Color	access:public
Color::g	src/Graphics/Color.h	/^        float g;$/;"	m	class:Color	access:public
Color::operator !=	src/Graphics/Color.h	/^        bool operator!=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
Color::operator *	src/Graphics/Color.h	/^        Color operator*(float n) const$/;"	f	class:Color	access:public	signature:(float n) const
Color::operator *=	src/Graphics/Color.h	/^        Color operator*=(float n)$/;"	f	class:Color	access:public	signature:(float n)
Color::operator +	src/Graphics/Color.h	/^        Color operator+(const Color& c) const$/;"	f	class:Color	access:public	signature:(const Color& c) const
Color::operator +=	src/Graphics/Color.h	/^        Color operator+=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
Color::operator -	src/Graphics/Color.h	/^        Color operator-(const Color& c) const$/;"	f	class:Color	access:public	signature:(const Color& c) const
Color::operator -=	src/Graphics/Color.h	/^        Color operator-=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
Color::operator /	src/Graphics/Color.h	/^        Color operator\/(float n) const$/;"	f	class:Color	access:public	signature:(float n) const
Color::operator /=	src/Graphics/Color.h	/^        Color operator\/=(float n)$/;"	f	class:Color	access:public	signature:(float n)
Color::operator ==	src/Graphics/Color.h	/^        bool operator==(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
Color::r	src/Graphics/Color.h	/^        float r;$/;"	m	class:Color	access:public
Color::set	src/Graphics/Color.cpp	/^void Color::set(float r, float g, float b, float a)$/;"	f	class:Color	signature:(float r, float g, float b, float a)
Color::set	src/Graphics/Color.h	/^        void set(float r, float g, float b, float a);$/;"	p	class:Color	access:public	signature:(float r, float g, float b, float a)
Core	src/Core/Core.h	/^class Core$/;"	c
Core::deinit	src/Core/Core.cpp	/^void Core::deinit()$/;"	f	class:Core	signature:()
Core::deinit	src/Core/Core.h	/^        static void deinit();$/;"	p	class:Core	access:public	signature:()
Core::exit	src/Core/Core.cpp	/^void Core::exit()$/;"	f	class:Core	signature:()
Core::exit	src/Core/Core.h	/^        static void exit();$/;"	p	class:Core	access:public	signature:()
Core::fps	src/Core/Core.cpp	/^FpsCounter* Core::fps = NULL;$/;"	m	class:Core	file:
Core::fps	src/Core/Core.h	/^        static FpsCounter* fps;$/;"	m	class:Core	access:private
Core::fullscreen	src/Core/Core.cpp	/^bool Core::fullscreen = false;$/;"	m	class:Core	file:
Core::fullscreen	src/Core/Core.h	/^        static bool fullscreen;$/;"	m	class:Core	access:private
Core::getVersion	src/Core/Core.cpp	/^const std::string& Core::getVersion()$/;"	f	class:Core	signature:()
Core::getVersion	src/Core/Core.h	/^        static const std::string& getVersion();$/;"	p	class:Core	access:public	signature:()
Core::height	src/Core/Core.cpp	/^unsigned int Core::height = 0;$/;"	m	class:Core	file:
Core::height	src/Core/Core.h	/^        static unsigned int height;$/;"	m	class:Core	access:private
Core::init	src/Core/Core.cpp	/^void Core::init(std::string title, unsigned int width, unsigned int height, bool fullscreen)$/;"	f	class:Core	signature:(std::string title, unsigned int width, unsigned int height, bool fullscreen)
Core::init	src/Core/Core.h	/^        static void init(std::string title, unsigned int width, unsigned int height, bool fullscreen);$/;"	p	class:Core	access:public	signature:(std::string title, unsigned int width, unsigned int height, bool fullscreen)
Core::initGLFW	src/Core/Core.cpp	/^bool Core::initGLFW()$/;"	f	class:Core	signature:()
Core::initGLFW	src/Core/Core.h	/^        static bool initGLFW();$/;"	p	class:Core	access:private	signature:()
Core::input	src/Core/Core.cpp	/^Input* Core::input = NULL;$/;"	m	class:Core	file:
Core::input	src/Core/Core.h	/^        static Input* input;$/;"	m	class:Core	access:private
Core::keyInput	src/Core/Core.cpp	/^void GLFWCALL Core::keyInput(int key, int action)$/;"	f	class:Core	signature:(int key, int action)
Core::keyInput	src/Core/Core.h	/^        static void keyInput(int key, int action); $/;"	p	class:Core	access:public	signature:(int key, int action)
Core::mouseInput	src/Core/Core.cpp	/^void GLFWCALL Core::mouseInput(int button, int action)$/;"	f	class:Core	signature:(int button, int action)
Core::mouseInput	src/Core/Core.h	/^        static void mouseInput(int button, int action); $/;"	p	class:Core	access:public	signature:(int button, int action)
Core::mouseMoveInput	src/Core/Core.cpp	/^void GLFWCALL Core::mouseMoveInput(int x, int y)$/;"	f	class:Core	signature:(int x, int y)
Core::mouseMoveInput	src/Core/Core.h	/^        static void mouseMoveInput(int x, int y);$/;"	p	class:Core	access:public	signature:(int x, int y)
Core::popAllStates	src/Core/Core.cpp	/^void Core::popAllStates()$/;"	f	class:Core	signature:()
Core::popAllStates	src/Core/Core.h	/^        static void popAllStates();$/;"	p	class:Core	access:public	signature:()
Core::popState	src/Core/Core.cpp	/^void Core::popState()$/;"	f	class:Core	signature:()
Core::popState	src/Core/Core.h	/^        static void popState();$/;"	p	class:Core	access:public	signature:()
Core::printStateStack	src/Core/Core.cpp	/^void Core::printStateStack()$/;"	f	class:Core	signature:()
Core::printStateStack	src/Core/Core.h	/^        static void printStateStack();$/;"	p	class:Core	access:public	signature:()
Core::pushState	src/Core/Core.cpp	/^void Core::pushState(CoreState* s)$/;"	f	class:Core	signature:(CoreState* s)
Core::pushState	src/Core/Core.h	/^        static void pushState(CoreState* s);$/;"	p	class:Core	access:public	signature:(CoreState* s)
Core::renderer	src/Core/Core.cpp	/^Renderer* Core::renderer = NULL;$/;"	m	class:Core	file:
Core::renderer	src/Core/Core.h	/^        static Renderer* renderer;$/;"	m	class:Core	access:private
Core::resourceManager	src/Core/Core.cpp	/^ResourceManager* Core::resourceManager = NULL;$/;"	m	class:Core	file:
Core::resourceManager	src/Core/Core.h	/^        static ResourceManager* resourceManager;$/;"	m	class:Core	access:private
Core::run	src/Core/Core.cpp	/^void Core::run()$/;"	f	class:Core	signature:()
Core::run	src/Core/Core.h	/^        static void run();$/;"	p	class:Core	access:public	signature:()
Core::running	src/Core/Core.cpp	/^bool Core::running = false;$/;"	m	class:Core	file:
Core::running	src/Core/Core.h	/^        static bool running;$/;"	m	class:Core	access:private
Core::states	src/Core/Core.cpp	/^std::stack<CoreState*> Core::states;$/;"	m	class:Core	file:
Core::states	src/Core/Core.h	/^        static std::stack<CoreState*> states;$/;"	m	class:Core	access:private
Core::title	src/Core/Core.cpp	/^std::string Core::title = "";$/;"	m	class:Core	file:
Core::title	src/Core/Core.h	/^        static std::string title;$/;"	m	class:Core	access:private
Core::version	src/Core/Core.cpp	/^const std::string Core::version = "0.02a";$/;"	m	class:Core	file:
Core::version	src/Core/Core.h	/^        static const std::string version;$/;"	m	class:Core	access:private
Core::width	src/Core/Core.cpp	/^unsigned int Core::width = 0;$/;"	m	class:Core	file:
Core::width	src/Core/Core.h	/^        static unsigned int width;$/;"	m	class:Core	access:private
CoreRegistry	src/Core/CoreRegistry.h	/^class CoreRegistry$/;"	c
CoreRegistry::alreadyExists	src/Core/CoreRegistry.cpp	/^bool CoreRegistry::alreadyExists(const std::string& identifier)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier)
CoreRegistry::alreadyExists	src/Core/CoreRegistry.h	/^        static bool alreadyExists(const std::string& identifier);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier)
CoreRegistry::getState	src/Core/CoreRegistry.cpp	/^CoreState* CoreRegistry::getState(const std::string& identifier)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier)
CoreRegistry::getState	src/Core/CoreRegistry.h	/^        static CoreState* getState(const std::string& identifier);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier)
CoreRegistry::getStateCount	src/Core/CoreRegistry.cpp	/^int CoreRegistry::getStateCount()$/;"	f	class:CoreRegistry	signature:()
CoreRegistry::getStateCount	src/Core/CoreRegistry.h	/^        static int getStateCount();$/;"	p	class:CoreRegistry	access:public	signature:()
CoreRegistry::getStateName	src/Core/CoreRegistry.cpp	/^const std::string& CoreRegistry::getStateName(CoreState* s)$/;"	f	class:CoreRegistry	signature:(CoreState* s)
CoreRegistry::getStateName	src/Core/CoreRegistry.h	/^        static const std::string& getStateName(CoreState* s);$/;"	p	class:CoreRegistry	access:public	signature:(CoreState* s)
CoreRegistry::registerState	src/Core/CoreRegistry.cpp	/^void CoreRegistry::registerState(const std::string& identifier, CoreState* entry)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier, CoreState* entry)
CoreRegistry::registerState	src/Core/CoreRegistry.h	/^        static void registerState(const std::string& identifier, CoreState* entry);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier, CoreState* entry)
CoreRegistry::registry	src/Core/CoreRegistry.cpp	/^std::map<std::string, CoreState*>& CoreRegistry::registry()$/;"	f	class:CoreRegistry	signature:()
CoreRegistry::registry	src/Core/CoreRegistry.h	/^        static std::map<std::string, CoreState*>& registry();$/;"	p	class:CoreRegistry	access:private	signature:()
CoreRegistry::unregisterAll	src/Core/CoreRegistry.cpp	/^void CoreRegistry::unregisterAll()$/;"	f	class:CoreRegistry	signature:()
CoreRegistry::unregisterAll	src/Core/CoreRegistry.h	/^        static void unregisterAll();$/;"	p	class:CoreRegistry	access:public	signature:()
CoreState	src/Core/CoreState.cpp	/^CoreState::CoreState()$/;"	f	class:CoreState	signature:()
CoreState	src/Core/CoreState.h	/^        CoreState();$/;"	p	class:CoreState	access:public	signature:()
CoreState	src/Core/CoreState.h	/^class CoreState$/;"	c
CoreState::CoreState	src/Core/CoreState.cpp	/^CoreState::CoreState()$/;"	f	class:CoreState	signature:()
CoreState::CoreState	src/Core/CoreState.h	/^        CoreState();$/;"	p	class:CoreState	access:public	signature:()
CoreState::deinit	src/Core/CoreState.cpp	/^void CoreState::deinit()$/;"	f	class:CoreState	signature:()
CoreState::deinit	src/Core/CoreState.h	/^        virtual void deinit();$/;"	p	class:CoreState	access:public	signature:()
CoreState::draw	src/Core/CoreState.h	/^        virtual void draw() = 0;$/;"	p	class:CoreState	access:public	signature:()
CoreState::fonts	src/Core/CoreState.h	/^        FontCache* fonts;$/;"	m	class:CoreState	access:protected
CoreState::handleInput	src/Core/CoreState.h	/^        virtual void handleInput(Input& i, int value, int action) = 0;$/;"	p	class:CoreState	access:public	signature:(Input& i, int value, int action)
CoreState::init	src/Core/CoreState.cpp	/^void CoreState::init(ResourceManager& resources)$/;"	f	class:CoreState	signature:(ResourceManager& resources)
CoreState::init	src/Core/CoreState.h	/^        virtual void init(ResourceManager& resources);$/;"	p	class:CoreState	access:public	signature:(ResourceManager& resources)
CoreState::initialized	src/Core/CoreState.h	/^        bool initialized;$/;"	m	class:CoreState	access:protected
CoreState::isInitialized	src/Core/CoreState.cpp	/^bool CoreState::isInitialized() const$/;"	f	class:CoreState	signature:() const
CoreState::isInitialized	src/Core/CoreState.h	/^        bool isInitialized() const;$/;"	p	class:CoreState	access:public	signature:() const
CoreState::logic	src/Core/CoreState.h	/^        virtual void logic(float timeStep) = 0;$/;"	p	class:CoreState	access:public	signature:(float timeStep)
CoreState::sounds	src/Core/CoreState.h	/^        SoundCache* sounds;$/;"	m	class:CoreState	access:protected
CoreState::textures	src/Core/CoreState.h	/^        TextureCache* textures;$/;"	m	class:CoreState	access:protected
CoreState::~CoreState	src/Core/CoreState.cpp	/^CoreState::~CoreState()$/;"	f	class:CoreState	signature:()
CoreState::~CoreState	src/Core/CoreState.h	/^        virtual ~CoreState();$/;"	p	class:CoreState	access:public	signature:()
Cos	src/Math/Trig.h	/^        static float Cos(float deg)                 { return std::cos(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
DNL	src/stblib/stb_image.c	1326;"	d	file:
DegToRad	src/Math/Trig.h	/^        static float DegToRad(float deg)                { return 3.14159265f \/ 180 * deg;           }$/;"	f	class:Trig	access:public	signature:(float deg)
Drawable	src/Graphics/Drawable.cpp	/^Drawable::Drawable()$/;"	f	class:Drawable	signature:()
Drawable	src/Graphics/Drawable.h	/^        Drawable();$/;"	p	class:Drawable	access:public	signature:()
Drawable	src/Graphics/Drawable.h	/^class Drawable$/;"	c
Drawable::Drawable	src/Graphics/Drawable.cpp	/^Drawable::Drawable()$/;"	f	class:Drawable	signature:()
Drawable::Drawable	src/Graphics/Drawable.h	/^        Drawable();$/;"	p	class:Drawable	access:public	signature:()
Drawable::draw	src/Graphics/Drawable.cpp	/^void Drawable::draw(Vector2<float> v) const$/;"	f	class:Drawable	signature:(Vector2<float> v) const
Drawable::draw	src/Graphics/Drawable.h	/^        virtual void draw(Vector2<float> v) const;$/;"	p	class:Drawable	access:public	signature:(Vector2<float> v) const
Drawable::draw	src/Graphics/Drawable.h	/^        virtual void draw(float x = 0.0f, float y = 0.0f) const = 0;$/;"	p	class:Drawable	access:public	signature:(float x = 0.0f, float y = 0.0f) const
Drawable::~Drawable	src/Graphics/Drawable.h	/^        virtual ~Drawable() {} $/;"	f	class:Drawable	access:public	signature:()
DynamicBuffer	src/Graphics/VertexBuffer.h	/^        DynamicBuffer, \/\/ Change data from time to time$/;"	e	enum:BufferType::__anon1
EOI	src/stblib/stb_image.c	1328;"	d	file:
FAST_BITS	src/stblib/stb_image.c	683;"	d	file:
FIX	src/stblib/stb_truetype.h	1294;"	d
FIXMASK	src/stblib/stb_truetype.h	1295;"	d
FIXSHIFT	src/stblib/stb_truetype.h	1293;"	d
F_avg	src/stblib/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon16	file:
F_avg_first	src/stblib/stb_image.c	/^   F_avg_first, F_paeth_first$/;"	e	enum:__anon16	file:
F_none	src/stblib/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon16	file:
F_paeth	src/stblib/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon16	file:
F_paeth_first	src/stblib/stb_image.c	/^   F_avg_first, F_paeth_first$/;"	e	enum:__anon16	file:
F_sub	src/stblib/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon16	file:
F_up	src/stblib/stb_image.c	/^   F_none=0, F_sub=1, F_up=2, F_avg=3, F_paeth=4,$/;"	e	enum:__anon16	file:
FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::FileLoader()$/;"	f	class:FileLoader	signature:()
FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::FileLoader(const std::string& filename, Mode m)$/;"	f	class:FileLoader	signature:(const std::string& filename, Mode m)
FileLoader	src/Utils/FileLoader.h	/^        FileLoader();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader	src/Utils/FileLoader.h	/^        FileLoader(const std::string& filename, Mode m = Read);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename, Mode m = Read)
FileLoader	src/Utils/FileLoader.h	/^class FileLoader$/;"	c
FileLoader::FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::FileLoader()$/;"	f	class:FileLoader	signature:()
FileLoader::FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::FileLoader(const std::string& filename, Mode m)$/;"	f	class:FileLoader	signature:(const std::string& filename, Mode m)
FileLoader::FileLoader	src/Utils/FileLoader.h	/^        FileLoader();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader::FileLoader	src/Utils/FileLoader.h	/^        FileLoader(const std::string& filename, Mode m = Read);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename, Mode m = Read)
FileLoader::MAX	src/Utils/FileLoader.h	/^            MAX$/;"	e	enum:FileLoader::Mode
FileLoader::Mode	src/Utils/FileLoader.h	/^        enum Mode$/;"	g	class:FileLoader	access:public
FileLoader::Read	src/Utils/FileLoader.h	/^            Read,$/;"	e	enum:FileLoader::Mode
FileLoader::Write	src/Utils/FileLoader.h	/^            Write,$/;"	e	enum:FileLoader::Mode
FileLoader::atEnd	src/Utils/FileLoader.cpp	/^bool FileLoader::atEnd()$/;"	f	class:FileLoader	signature:()
FileLoader::atEnd	src/Utils/FileLoader.h	/^        bool atEnd();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader::exists	src/Utils/FileLoader.cpp	/^bool FileLoader::exists(const std::string& filename)$/;"	f	class:FileLoader	signature:(const std::string& filename)
FileLoader::exists	src/Utils/FileLoader.h	/^        static bool exists(const std::string& filename);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename)
FileLoader::file	src/Utils/FileLoader.h	/^        FILE* file;$/;"	m	class:FileLoader	access:private
FileLoader::getLength	src/Utils/FileLoader.cpp	/^size_t FileLoader::getLength()$/;"	f	class:FileLoader	signature:()
FileLoader::getLength	src/Utils/FileLoader.h	/^        size_t getLength();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader::gotoBeginning	src/Utils/FileLoader.cpp	/^void FileLoader::gotoBeginning()$/;"	f	class:FileLoader	signature:()
FileLoader::gotoBeginning	src/Utils/FileLoader.h	/^        void gotoBeginning();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader::isOpen	src/Utils/FileLoader.cpp	/^bool FileLoader::isOpen()$/;"	f	class:FileLoader	signature:()
FileLoader::isOpen	src/Utils/FileLoader.h	/^        bool isOpen();$/;"	p	class:FileLoader	access:public	signature:()
FileLoader::length	src/Utils/FileLoader.h	/^        size_t length;$/;"	m	class:FileLoader	access:private
FileLoader::loadFile	src/Utils/FileLoader.cpp	/^void FileLoader::loadFile(const std::string& filename, Mode m)$/;"	f	class:FileLoader	signature:(const std::string& filename, Mode m)
FileLoader::loadFile	src/Utils/FileLoader.h	/^        void loadFile(const std::string& filename, Mode m);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename, Mode m)
FileLoader::mode	src/Utils/FileLoader.h	/^        Mode mode;$/;"	m	class:FileLoader	access:private
FileLoader::readLine	src/Utils/FileLoader.cpp	/^bool FileLoader::readLine(std::string* line)$/;"	f	class:FileLoader	signature:(std::string* line)
FileLoader::readLine	src/Utils/FileLoader.h	/^        bool readLine(std::string* line);$/;"	p	class:FileLoader	access:public	signature:(std::string* line)
FileLoader::~FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::~FileLoader()$/;"	f	class:FileLoader	signature:()
FileLoader::~FileLoader	src/Utils/FileLoader.h	/^        ~FileLoader();$/;"	p	class:FileLoader	access:public	signature:()
Font	src/Graphics/Font.cpp	/^Font::Font()$/;"	f	class:Font	signature:()
Font	src/Graphics/Font.cpp	/^Font::Font(const std::string& filename, unsigned int charSize)$/;"	f	class:Font	signature:(const std::string& filename, unsigned int charSize)
Font	src/Graphics/Font.h	/^        Font();$/;"	p	class:Font	access:public	signature:()
Font	src/Graphics/Font.h	/^        Font(const std::string& filename, unsigned int charSize);$/;"	p	class:Font	access:public	signature:(const std::string& filename, unsigned int charSize)
Font	src/Graphics/Font.h	/^class Font$/;"	c
Font::Font	src/Graphics/Font.cpp	/^Font::Font()$/;"	f	class:Font	signature:()
Font::Font	src/Graphics/Font.cpp	/^Font::Font(const std::string& filename, unsigned int charSize)$/;"	f	class:Font	signature:(const std::string& filename, unsigned int charSize)
Font::Font	src/Graphics/Font.h	/^        Font();$/;"	p	class:Font	access:public	signature:()
Font::Font	src/Graphics/Font.h	/^        Font(const std::string& filename, unsigned int charSize);$/;"	p	class:Font	access:public	signature:(const std::string& filename, unsigned int charSize)
Font::NUM_CHARS	src/Graphics/Font.h	/^        static const unsigned int NUM_CHARS = 96;$/;"	m	class:Font	access:public
Font::SPACE	src/Graphics/Font.h	/^        static const unsigned int SPACE = 32;$/;"	m	class:Font	access:public
Font::buffer	src/Graphics/Font.h	/^        unsigned char buffer[1<<20];$/;"	m	class:Font	access:protected
Font::fontinfo	src/Graphics/Font.h	/^        FontInfo fontinfo;$/;"	m	class:Font	access:protected
Font::getGlyph	src/Graphics/Font.cpp	/^Glyph* Font::getGlyph(int ch)$/;"	f	class:Font	signature:(int ch)
Font::getGlyph	src/Graphics/Font.h	/^        Glyph* getGlyph(int ch);$/;"	p	class:Font	access:public	signature:(int ch)
Font::getHeight	src/Graphics/Font.cpp	/^unsigned int Font::getHeight()$/;"	f	class:Font	signature:()
Font::getHeight	src/Graphics/Font.h	/^        unsigned int getHeight();$/;"	p	class:Font	access:public	signature:()
Font::getInfo	src/Graphics/Font.cpp	/^FontInfo* Font::getInfo()$/;"	f	class:Font	signature:()
Font::getInfo	src/Graphics/Font.h	/^        FontInfo* getInfo();$/;"	p	class:Font	access:public	signature:()
Font::getTexture	src/Graphics/Font.cpp	/^unsigned int Font::getTexture()$/;"	f	class:Font	signature:()
Font::getTexture	src/Graphics/Font.h	/^        unsigned int getTexture();$/;"	p	class:Font	access:public	signature:()
Font::glyphs	src/Graphics/Font.h	/^        Glyph glyphs[NUM_CHARS];$/;"	m	class:Font	access:protected
Font::height	src/Graphics/Font.h	/^        unsigned int height;$/;"	m	class:Font	access:protected
Font::loadFont	src/Graphics/Font.cpp	/^void Font::loadFont(const std::string& filename, unsigned int charSize)$/;"	f	class:Font	signature:(const std::string& filename, unsigned int charSize)
Font::loadFont	src/Graphics/Font.h	/^        void loadFont(const std::string& filename, unsigned int charSize);$/;"	p	class:Font	access:public	signature:(const std::string& filename, unsigned int charSize)
Font::texture	src/Graphics/Font.h	/^        unsigned int texture;$/;"	m	class:Font	access:protected
Font::~Font	src/Graphics/Font.cpp	/^Font::~Font()$/;"	f	class:Font	signature:()
Font::~Font	src/Graphics/Font.h	/^        ~Font();$/;"	p	class:Font	access:public	signature:()
FontCache	src/System/ResourceCache.h	/^class FontCache : public ResourceCache<Font>$/;"	c	inherits:ResourceCache
FontCache::add	src/System/ResourceCache.cpp	/^boost::shared_ptr<Font> FontCache::add(const std::string& identifier, $/;"	f	class:FontCache	signature:(const std::string& identifier, const std::string& filename, unsigned int charSize)
FontCache::add	src/System/ResourceCache.h	/^        boost::shared_ptr<Font> add(const std::string& identifier, const std::string& filename, unsigned int charSize);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier, const std::string& filename, unsigned int charSize)
FontCache::makeText	src/System/ResourceCache.cpp	/^Text FontCache::makeText(const std::string& identifier)$/;"	f	class:FontCache	signature:(const std::string& identifier)
FontCache::makeText	src/System/ResourceCache.cpp	/^Text FontCache::makeText(const std::string& identifier, const std::string& str)$/;"	f	class:FontCache	signature:(const std::string& identifier, const std::string& str)
FontCache::makeText	src/System/ResourceCache.h	/^        Text makeText(const std::string& identifier);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier)
FontCache::makeText	src/System/ResourceCache.h	/^        Text makeText(const std::string& identifier, const std::string& str);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier, const std::string& str)
FontInfo	src/Graphics/FontLoader.h	/^typedef stbtt_fontinfo FontInfo;$/;"	t
FontLoader	src/Graphics/FontLoader.h	/^class FontLoader$/;"	c
FontLoader::deinit	src/Graphics/FontLoader.cpp	/^void FontLoader::deinit()$/;"	f	class:FontLoader	signature:()
FontLoader::deinit	src/Graphics/FontLoader.h	/^        static void deinit();$/;"	p	class:FontLoader	access:public	signature:()
FontLoader::init	src/Graphics/FontLoader.cpp	/^void FontLoader::init()$/;"	f	class:FontLoader	signature:()
FontLoader::init	src/Graphics/FontLoader.h	/^        static void init();$/;"	p	class:FontLoader	access:public	signature:()
FontLoader::loadFont	src/Graphics/FontLoader.cpp	/^bool FontLoader::loadFont(const std::string& Filename, unsigned int& texture,$/;"	f	class:FontLoader	signature:(const std::string& Filename, unsigned int& texture, unsigned int& height, unsigned char* buffer, Glyph* glyphs, FontInfo& fontinfo)
FontLoader::loadFont	src/Graphics/FontLoader.h	/^        static bool loadFont(const std::string& Filename, unsigned int& texture, $/;"	p	class:FontLoader	access:public	signature:(const std::string& Filename, unsigned int& texture, unsigned int& height, unsigned char* buffer, Glyph* glyphs, FontInfo& fontinfo)
FontPtr	src/System/ResourcePtr.h	/^typedef boost::shared_ptr<Font> FontPtr;$/;"	t
FpsCounter	src/Utils/FpsCounter.cpp	/^FpsCounter::FpsCounter()$/;"	f	class:FpsCounter	signature:()
FpsCounter	src/Utils/FpsCounter.h	/^        FpsCounter();$/;"	p	class:FpsCounter	access:public	signature:()
FpsCounter	src/Utils/FpsCounter.h	/^class FpsCounter$/;"	c
FpsCounter::FpsCounter	src/Utils/FpsCounter.cpp	/^FpsCounter::FpsCounter()$/;"	f	class:FpsCounter	signature:()
FpsCounter::FpsCounter	src/Utils/FpsCounter.h	/^        FpsCounter();$/;"	p	class:FpsCounter	access:public	signature:()
FpsCounter::calculate	src/Utils/FpsCounter.cpp	/^void FpsCounter::calculate()$/;"	f	class:FpsCounter	signature:()
FpsCounter::calculate	src/Utils/FpsCounter.h	/^        void calculate();$/;"	p	class:FpsCounter	access:public	signature:()
FpsCounter::currentTime	src/Utils/FpsCounter.h	/^        float currentTime;$/;"	m	class:FpsCounter	access:private
FpsCounter::fps	src/Utils/FpsCounter.h	/^        float fps;$/;"	m	class:FpsCounter	access:private
FpsCounter::frameCount	src/Utils/FpsCounter.h	/^        int frameCount;$/;"	m	class:FpsCounter	access:private
FpsCounter::getFps	src/Utils/FpsCounter.cpp	/^float FpsCounter::getFps() const$/;"	f	class:FpsCounter	signature:() const
FpsCounter::getFps	src/Utils/FpsCounter.h	/^        float getFps() const;$/;"	p	class:FpsCounter	access:public	signature:() const
FpsCounter::getFrameTime	src/Utils/FpsCounter.cpp	/^float FpsCounter::getFrameTime() const$/;"	f	class:FpsCounter	signature:() const
FpsCounter::getFrameTime	src/Utils/FpsCounter.h	/^        float getFrameTime() const;$/;"	p	class:FpsCounter	access:public	signature:() const
FpsCounter::lastTime	src/Utils/FpsCounter.h	/^        float lastTime;$/;"	m	class:FpsCounter	access:private
FpsCounter::startTime	src/Utils/FpsCounter.h	/^        float startTime;$/;"	m	class:FpsCounter	access:private
FpsCounter::~FpsCounter	src/Utils/FpsCounter.cpp	/^FpsCounter::~FpsCounter()$/;"	f	class:FpsCounter	signature:()
FpsCounter::~FpsCounter	src/Utils/FpsCounter.h	/^        ~FpsCounter();$/;"	p	class:FpsCounter	access:public	signature:()
GREEN	src/Graphics/Color.cpp	/^Color Color::GREEN = Color(0.0f, 1.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
GREEN	src/Graphics/Color.h	/^        static Color GREEN;$/;"	m	class:Color	access:public
GameState	test/GameState.cpp	/^GameState::GameState()$/;"	f	class:GameState	signature:()
GameState	test/GameState.h	/^        GameState();$/;"	p	class:GameState	access:public	signature:()
GameState	test/GameState.h	/^class GameState : public CoreState$/;"	c	inherits:CoreState
GameState::GameState	test/GameState.cpp	/^GameState::GameState()$/;"	f	class:GameState	signature:()
GameState::GameState	test/GameState.h	/^        GameState();$/;"	p	class:GameState	access:public	signature:()
GameState::background	test/GameState.h	/^        TexturePtr background;$/;"	m	class:GameState	access:private
GameState::deinit	test/GameState.cpp	/^void GameState::deinit()$/;"	f	class:GameState	signature:()
GameState::deinit	test/GameState.h	/^        void deinit();$/;"	p	class:GameState	access:public	signature:()
GameState::draw	test/GameState.cpp	/^void GameState::draw()$/;"	f	class:GameState	signature:()
GameState::draw	test/GameState.h	/^        void draw();$/;"	p	class:GameState	access:public	signature:()
GameState::emitter	test/GameState.h	/^        ParticleEmitter* emitter;$/;"	m	class:GameState	access:private
GameState::handleInput	test/GameState.cpp	/^void GameState::handleInput(Input& input, int value, int action)$/;"	f	class:GameState	signature:(Input& input, int value, int action)
GameState::handleInput	test/GameState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:GameState	access:public	signature:(Input& input, int value, int action)
GameState::held	test/GameState.h	/^        bool held;$/;"	m	class:GameState	access:private
GameState::init	test/GameState.cpp	/^void GameState::init(ResourceManager& resources)$/;"	f	class:GameState	signature:(ResourceManager& resources)
GameState::init	test/GameState.h	/^        void init(ResourceManager& resources);$/;"	p	class:GameState	access:public	signature:(ResourceManager& resources)
GameState::logic	test/GameState.cpp	/^void GameState::logic(float timeStep)$/;"	f	class:GameState	signature:(float timeStep)
GameState::logic	test/GameState.h	/^        void logic(float timeStep);$/;"	p	class:GameState	access:public	signature:(float timeStep)
GameState::text	test/GameState.h	/^        Text text;$/;"	m	class:GameState	access:private
GameState::~GameState	test/GameState.cpp	/^GameState::~GameState()$/;"	f	class:GameState	signature:()
GameState::~GameState	test/GameState.h	/^        ~GameState();$/;"	p	class:GameState	access:public	signature:()
Glyph	src/Graphics/FontLoader.h	/^typedef stbtt_bakedchar Glyph;$/;"	t
HDR_BUFLEN	src/stblib/stb_image.c	3947;"	d	file:
IDCT_1D	src/stblib/stb_image.c	940;"	d	file:
ImageLoader	src/Graphics/ImageLoader.h	/^class ImageLoader$/;"	c
ImageLoader::loadImage	src/Graphics/ImageLoader.cpp	/^unsigned char* ImageLoader::loadImage(const std::string& Filename, $/;"	f	class:ImageLoader	signature:(const std::string& Filename, int& width, int& height, int& mode)
ImageLoader::loadImage	src/Graphics/ImageLoader.cpp	/^unsigned char* ImageLoader::loadImage(const unsigned char* data, int size, $/;"	f	class:ImageLoader	signature:(const unsigned char* data, int size, int& width, int& height, int& mode)
ImageLoader::loadImage	src/Graphics/ImageLoader.h	/^        static unsigned char* loadImage(const std::string& Filename, $/;"	p	class:ImageLoader	access:public	signature:(const std::string& Filename, int& width, int& height, int& mode)
ImageLoader::loadImage	src/Graphics/ImageLoader.h	/^        static unsigned char* loadImage(const unsigned char* data, int size, $/;"	p	class:ImageLoader	access:public	signature:(const unsigned char* data, int size, int& width, int& height, int& mode)
Ini	src/Utils/Ini.cpp	/^Ini::Ini()$/;"	f	class:Ini	signature:()
Ini	src/Utils/Ini.cpp	/^Ini::Ini(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
Ini	src/Utils/Ini.h	/^        Ini();$/;"	p	class:Ini	access:public	signature:()
Ini	src/Utils/Ini.h	/^        Ini(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
Ini	src/Utils/Ini.h	/^class Ini$/;"	c
Ini::Ini	src/Utils/Ini.cpp	/^Ini::Ini()$/;"	f	class:Ini	signature:()
Ini::Ini	src/Utils/Ini.cpp	/^Ini::Ini(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
Ini::Ini	src/Utils/Ini.h	/^        Ini();$/;"	p	class:Ini	access:public	signature:()
Ini::Ini	src/Utils/Ini.h	/^        Ini(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
Ini::__dump	src/Utils/Ini.h	/^        void __dump(FILE* f);$/;"	p	class:Ini	access:public	signature:(FILE* f)
Ini::alreadyExists	src/Utils/Ini.cpp	/^bool Ini::alreadyExists(const std::string& identifier)$/;"	f	class:Ini	signature:(const std::string& identifier)
Ini::alreadyExists	src/Utils/Ini.h	/^        bool alreadyExists(const std::string& identifier);$/;"	p	class:Ini	access:public	signature:(const std::string& identifier)
Ini::entries	src/Utils/Ini.h	/^        std::map<std::string, std::string> entries;$/;"	m	class:Ini	access:private
Ini::exportFile	src/Utils/Ini.cpp	/^void Ini::exportFile(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
Ini::exportFile	src/Utils/Ini.h	/^        void exportFile(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
Ini::loadFile	src/Utils/Ini.cpp	/^bool Ini::loadFile(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
Ini::loadFile	src/Utils/Ini.h	/^        bool loadFile(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
Ini::operator []	src/Utils/Ini.cpp	/^std::string Ini::operator[](const std::string& identifier)$/;"	f	class:Ini	signature:(const std::string& identifier)
Ini::operator []	src/Utils/Ini.h	/^        std::string operator[](const std::string& identifier);$/;"	p	class:Ini	access:public	signature:(const std::string& identifier)
Input	src/System/Input.cpp	/^Input::Input()$/;"	f	class:Input	signature:()
Input	src/System/Input.h	/^        Input();$/;"	p	class:Input	access:public	signature:()
Input	src/System/Input.h	/^class Input$/;"	c
Input::Input	src/System/Input.cpp	/^Input::Input()$/;"	f	class:Input	signature:()
Input::Input	src/System/Input.h	/^        Input();$/;"	p	class:Input	access:public	signature:()
Input::__setDefaultKeys	src/System/Input.cpp	/^void Input::__setDefaultKeys()$/;"	f	class:Input	signature:()
Input::__setDefaultKeys	src/System/Input.h	/^        void __setDefaultKeys();$/;"	p	class:Input	access:private	signature:()
Input::addKey	src/System/Input.cpp	/^void Input::addKey(std::string key, int k)$/;"	f	class:Input	signature:(std::string key, int k)
Input::addKey	src/System/Input.h	/^        void addKey(std::string key, int k);$/;"	p	class:Input	access:public	signature:(std::string key, int k)
Input::getKey	src/System/Input.cpp	/^int Input::getKey(const std::string& key)$/;"	f	class:Input	signature:(const std::string& key)
Input::getKey	src/System/Input.h	/^        int getKey(const std::string& key);$/;"	p	class:Input	access:public	signature:(const std::string& key)
Input::getMousePos	src/System/Input.cpp	/^Vector2f Input::getMousePos() const$/;"	f	class:Input	signature:() const
Input::getMousePos	src/System/Input.h	/^        Vector2f getMousePos() const;$/;"	p	class:Input	access:public	signature:() const
Input::keys	src/System/Input.h	/^        std::map<std::string, int> keys;$/;"	m	class:Input	access:private
Input::operator []	src/System/Input.cpp	/^int Input::operator[](const std::string& key)$/;"	f	class:Input	signature:(const std::string& key)
Input::operator []	src/System/Input.h	/^        int operator[](const std::string& key);$/;"	p	class:Input	access:public	signature:(const std::string& key)
Input::setMousePos	src/System/Input.cpp	/^void Input::setMousePos(int x, int y)$/;"	f	class:Input	signature:(int x, int y)
Input::setMousePos	src/System/Input.h	/^        void setMousePos(int x, int y);$/;"	p	class:Input	access:public	signature:(int x, int y)
Input::~Input	src/System/Input.cpp	/^Input::~Input()$/;"	f	class:Input	signature:()
Input::~Input	src/System/Input.h	/^        ~Input();$/;"	p	class:Input	access:public	signature:()
KeyAction	src/System/Input.h	/^enum KeyAction$/;"	g
KeyPress	src/System/Input.h	/^    KeyPress$/;"	e	enum:KeyAction
KeyRelease	src/System/Input.h	/^    KeyRelease = 0,$/;"	e	enum:KeyAction
LEFT	src/Utils/BinaryHeap.h	6;"	d
LOWER_MASK	src/Math/Random.h	/^        static const unsigned long LOWER_MASK = 0x7fffffffUL;$/;"	m	class:Random	access:private
Line	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Line(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
Line	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Line(VertexBuffer& b,$/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
Line	src/Graphics/VertexBuffer.h	/^        static void Line(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
Line	src/Graphics/VertexBuffer.h	/^        static void Line(VertexBuffer& b,$/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
LineLoop	src/Graphics/VertexBuffer.h	/^        LineLoop,$/;"	e	enum:PrimitiveType::__anon2
LineStrip	src/Graphics/VertexBuffer.h	/^        LineStrip,$/;"	e	enum:PrimitiveType::__anon2
Lines	src/Graphics/VertexBuffer.h	/^        Lines,$/;"	e	enum:PrimitiveType::__anon2
Listener	src/Audio/Listener.h	/^class Listener$/;"	c
Listener::context	src/Audio/Listener.cpp	/^ALCcontext* Listener::context = NULL;$/;"	m	class:Listener	file:
Listener::context	src/Audio/Listener.h	/^        static ALCcontext* context;$/;"	m	class:Listener	access:private
Listener::deinit	src/Audio/Listener.cpp	/^void Listener::deinit()$/;"	f	class:Listener	signature:()
Listener::deinit	src/Audio/Listener.h	/^        static void deinit();$/;"	p	class:Listener	access:public	signature:()
Listener::device	src/Audio/Listener.cpp	/^ALCdevice* Listener::device = NULL;$/;"	m	class:Listener	file:
Listener::device	src/Audio/Listener.h	/^        static ALCdevice* device;$/;"	m	class:Listener	access:private
Listener::getVolume	src/Audio/Listener.cpp	/^float Listener::getVolume()$/;"	f	class:Listener	signature:()
Listener::getVolume	src/Audio/Listener.h	/^        static float getVolume();$/;"	p	class:Listener	access:public	signature:()
Listener::init	src/Audio/Listener.cpp	/^void Listener::init()$/;"	f	class:Listener	signature:()
Listener::init	src/Audio/Listener.h	/^        static void init();$/;"	p	class:Listener	access:public	signature:()
Listener::setVolume	src/Audio/Listener.cpp	/^void Listener::setVolume(float volume)$/;"	f	class:Listener	signature:(float volume)
Listener::setVolume	src/Audio/Listener.h	/^        static void setVolume(float volume);$/;"	p	class:Listener	access:public	signature:(float volume)
M	src/Math/Random.h	/^        static const unsigned long M = 397;$/;"	m	class:Random	access:private
MARKER_none	src/stblib/stb_image.c	1054;"	d	file:
MATRIX_A	src/Math/Random.h	/^        static const unsigned long MATRIX_A = 0x9908b0dfUL;$/;"	m	class:Random	access:private
MAX	src/Utils/FileLoader.h	/^            MAX$/;"	e	enum:FileLoader::Mode
MAX_BUFFER	src/Graphics/VertexBuffer.h	/^        MAX_BUFFER$/;"	e	enum:BufferType::__anon1
MAX_LAYOUT	src/Graphics/VertexBuffer.h	/^        MAX_LAYOUT$/;"	e	enum:BufferLayout::__anon3
MAX_PARTICLES	test/Bullet/ParticleMem.h	/^        static const int MAX_PARTICLES =  512 * 128;$/;"	m	class:ParticleMem	access:public
MAX_PRIMITIVE	src/Graphics/VertexBuffer.h	/^        MAX_PRIMITIVE$/;"	e	enum:PrimitiveType::__anon2
Math	src/Math/Math.h	/^namespace Math$/;"	n
Math::PI	src/Math/Math.h	/^    const float PI = 3.141593f;$/;"	m	namespace:Math
Math::TWO_PI	src/Math/Math.h	/^    const double TWO_PI = (PI * 2.0);$/;"	m	namespace:Math
Math::checkPow2	src/Math/Math.cpp	/^bool Math::checkPow2(unsigned int n)$/;"	f	class:Math	signature:(unsigned int n)
Math::checkPow2	src/Math/Math.h	/^    bool checkPow2(unsigned int n);$/;"	p	namespace:Math	signature:(unsigned int n)
Math::degToRad	src/Math/Math.cpp	/^float Math::degToRad(float degrees)$/;"	f	class:Math	signature:(float degrees)
Math::degToRad	src/Math/Math.h	/^    float degToRad(float degrees);$/;"	p	namespace:Math	signature:(float degrees)
Math::max	src/Math/Math.cpp	/^int Math::max(int a, int b)$/;"	f	class:Math	signature:(int a, int b)
Math::max	src/Math/Math.h	/^    int max(int a, int b);$/;"	p	namespace:Math	signature:(int a, int b)
Math::min	src/Math/Math.cpp	/^int Math::min(int a, int b)$/;"	f	class:Math	signature:(int a, int b)
Math::min	src/Math/Math.h	/^    int min(int a, int b);$/;"	p	namespace:Math	signature:(int a, int b)
Math::nextPow2	src/Math/Math.cpp	/^unsigned int Math::nextPow2(register unsigned int n)$/;"	f	class:Math	signature:(register unsigned int n)
Math::nextPow2	src/Math/Math.h	/^    unsigned int nextPow2(register unsigned int n);$/;"	p	namespace:Math	signature:(register unsigned int n)
Math::radToDeg	src/Math/Math.cpp	/^float Math::radToDeg(float radians)$/;"	f	class:Math	signature:(float radians)
Math::radToDeg	src/Math/Math.h	/^    float radToDeg(float radians);$/;"	p	namespace:Math	signature:(float radians)
Menu	test/Menu.cpp	/^Menu::Menu()$/;"	f	class:Menu	signature:()
Menu	test/Menu.cpp	/^Menu::Menu(const std::string& title, const FontPtr& f)$/;"	f	class:Menu	signature:(const std::string& title, const FontPtr& f)
Menu	test/Menu.h	/^        Menu();$/;"	p	class:Menu	access:public	signature:()
Menu	test/Menu.h	/^        Menu(const std::string& title, const FontPtr& f);$/;"	p	class:Menu	access:public	signature:(const std::string& title, const FontPtr& f)
Menu	test/Menu.h	/^class Menu : public Drawable$/;"	c	inherits:Drawable
Menu::Menu	test/Menu.cpp	/^Menu::Menu()$/;"	f	class:Menu	signature:()
Menu::Menu	test/Menu.cpp	/^Menu::Menu(const std::string& title, const FontPtr& f)$/;"	f	class:Menu	signature:(const std::string& title, const FontPtr& f)
Menu::Menu	test/Menu.h	/^        Menu();$/;"	p	class:Menu	access:public	signature:()
Menu::Menu	test/Menu.h	/^        Menu(const std::string& title, const FontPtr& f);$/;"	p	class:Menu	access:public	signature:(const std::string& title, const FontPtr& f)
Menu::__setLongest	test/Menu.cpp	/^void Menu::__setLongest(float f)$/;"	f	class:Menu	signature:(float f)
Menu::__setLongest	test/Menu.h	/^        void __setLongest(float f);$/;"	p	class:Menu	access:private	signature:(float f)
Menu::addItem	test/Menu.cpp	/^void Menu::addItem(const std::string& item)$/;"	f	class:Menu	signature:(const std::string& item)
Menu::addItem	test/Menu.h	/^        void addItem(const std::string& item);$/;"	p	class:Menu	access:public	signature:(const std::string& item)
Menu::addItems	test/Menu.cpp	/^void Menu::addItems(const std::string items[], int numItems)$/;"	f	class:Menu	signature:(const std::string items[], int numItems)
Menu::addItems	test/Menu.h	/^        void addItems(const std::string items[], int numItems);$/;"	p	class:Menu	access:public	signature:(const std::string items[], int numItems)
Menu::checkChoice	test/Menu.cpp	/^const bool Menu::checkChoice() const$/;"	f	class:Menu	signature:() const
Menu::checkChoice	test/Menu.h	/^        const bool checkChoice() const;$/;"	p	class:Menu	access:public	signature:() const
Menu::choice	test/Menu.h	/^        std::string choice;$/;"	m	class:Menu	access:private
Menu::currentChoice	test/Menu.h	/^        int currentChoice;$/;"	m	class:Menu	access:private
Menu::draw	test/Menu.cpp	/^void Menu::draw(float x, float y) const$/;"	f	class:Menu	signature:(float x, float y) const
Menu::draw	test/Menu.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Menu	access:public	signature:(float x = 0.0f, float y = 0.0f) const
Menu::font	test/Menu.h	/^        FontPtr font;$/;"	m	class:Menu	access:private
Menu::getChoice	test/Menu.cpp	/^const std::string Menu::getChoice() const$/;"	f	class:Menu	signature:() const
Menu::getChoice	test/Menu.h	/^        const std::string getChoice() const;$/;"	p	class:Menu	access:public	signature:() const
Menu::handleInput	test/Menu.cpp	/^void Menu::handleInput(Input& input, int key, int action)$/;"	f	class:Menu	signature:(Input& input, int key, int action)
Menu::handleInput	test/Menu.h	/^        void handleInput(Input& input, int key, int action);$/;"	p	class:Menu	access:public	signature:(Input& input, int key, int action)
Menu::items	test/Menu.h	/^        std::vector<Text> items;$/;"	m	class:Menu	access:private
Menu::line	test/Menu.h	/^        VertexBuffer line;$/;"	m	class:Menu	access:private
Menu::longest	test/Menu.h	/^        float longest;$/;"	m	class:Menu	access:private
Menu::make	test/Menu.cpp	/^void Menu::make()$/;"	f	class:Menu	signature:()
Menu::make	test/Menu.h	/^        void make();$/;"	p	class:Menu	access:public	signature:()
Menu::metrics	test/Menu.h	/^        MenuMetrics metrics;$/;"	m	class:Menu	access:private
Menu::outline	test/Menu.h	/^        VertexBuffer outline;$/;"	m	class:Menu	access:private
Menu::rect	test/Menu.h	/^        VertexBuffer rect;$/;"	m	class:Menu	access:private
Menu::resetChoice	test/Menu.cpp	/^void Menu::resetChoice()$/;"	f	class:Menu	signature:()
Menu::resetChoice	test/Menu.h	/^        void resetChoice();$/;"	p	class:Menu	access:public	signature:()
Menu::setMetrics	test/Menu.cpp	/^void Menu::setMetrics(const MenuMetrics& m)$/;"	f	class:Menu	signature:(const MenuMetrics& m)
Menu::setMetrics	test/Menu.cpp	/^void Menu::setMetrics(int margin, int newline)$/;"	f	class:Menu	signature:(int margin, int newline)
Menu::setMetrics	test/Menu.h	/^        void setMetrics(const MenuMetrics& m);$/;"	p	class:Menu	access:public	signature:(const MenuMetrics& m)
Menu::setMetrics	test/Menu.h	/^        void setMetrics(int margin, int newline);$/;"	p	class:Menu	access:public	signature:(int margin, int newline)
Menu::setTitle	test/Menu.cpp	/^void Menu::setTitle(const std::string& title)$/;"	f	class:Menu	signature:(const std::string& title)
Menu::setTitle	test/Menu.h	/^        void setTitle(const std::string& title);$/;"	p	class:Menu	access:public	signature:(const std::string& title)
Menu::sortItems	test/Menu.cpp	/^void Menu::sortItems()$/;"	f	class:Menu	signature:()
Menu::sortItems	test/Menu.h	/^        void sortItems();$/;"	p	class:Menu	access:public	signature:()
Menu::stringCmp	test/Menu.cpp	/^const bool Menu::stringCmp(const Text& a, const Text& b)$/;"	f	class:Menu	signature:(const Text& a, const Text& b)
Menu::stringCmp	test/Menu.h	/^        static const bool stringCmp(const Text& a, const Text& b);$/;"	p	class:Menu	access:public	signature:(const Text& a, const Text& b)
Menu::title	test/Menu.h	/^        Text title;$/;"	m	class:Menu	access:private
Menu::~Menu	test/Menu.cpp	/^Menu::~Menu()$/;"	f	class:Menu	signature:()
Menu::~Menu	test/Menu.h	/^        ~Menu();$/;"	p	class:Menu	access:public	signature:()
MenuMetrics	test/Menu.h	/^struct MenuMetrics$/;"	s
MenuMetrics::margin	test/Menu.h	/^    int margin;$/;"	m	struct:MenuMetrics	access:public
MenuMetrics::newline	test/Menu.h	/^    int newline;$/;"	m	struct:MenuMetrics	access:public
Mode	src/Utils/FileLoader.h	/^        enum Mode$/;"	g	class:FileLoader	access:public
Multiply	src/Graphics/Drawable.h	/^    const int Multiply = 3;$/;"	m	namespace:Blend
Music	src/Audio/Music.cpp	/^Music::Music()$/;"	f	class:Music	signature:()
Music	src/Audio/Music.cpp	/^Music::Music(const std::string& filename)$/;"	f	class:Music	signature:(const std::string& filename)
Music	src/Audio/Music.h	/^        Music();$/;"	p	class:Music	access:public	signature:()
Music	src/Audio/Music.h	/^        Music(const std::string& filename);$/;"	p	class:Music	access:public	signature:(const std::string& filename)
Music	src/Audio/Music.h	/^class Music : public Sound$/;"	c	inherits:Sound
Music::BUFFER_COUNT	src/Audio/Music.h	/^        static const unsigned int BUFFER_COUNT = 5;$/;"	m	class:Music	access:private
Music::Music	src/Audio/Music.cpp	/^Music::Music()$/;"	f	class:Music	signature:()
Music::Music	src/Audio/Music.cpp	/^Music::Music(const std::string& filename)$/;"	f	class:Music	signature:(const std::string& filename)
Music::Music	src/Audio/Music.h	/^        Music();$/;"	p	class:Music	access:public	signature:()
Music::Music	src/Audio/Music.h	/^        Music(const std::string& filename);$/;"	p	class:Music	access:public	signature:(const std::string& filename)
Music::SoundChunk	src/Audio/Music.h	/^        struct SoundChunk$/;"	s	class:Music	access:private
Music::SoundChunk::sampleCount	src/Audio/Music.h	/^            std::size_t sampleCount;$/;"	m	struct:Music::SoundChunk	access:public
Music::SoundChunk::samples	src/Audio/Music.h	/^            short* samples;$/;"	m	struct:Music::SoundChunk	access:public
Music::addSamplesProcessed	src/Audio/Music.cpp	/^void Music::addSamplesProcessed(unsigned long i)$/;"	f	class:Music	signature:(unsigned long i)
Music::addSamplesProcessed	src/Audio/Music.h	/^        void addSamplesProcessed(unsigned long i);$/;"	p	class:Music	access:public	signature:(unsigned long i)
Music::buffer	src/Audio/Music.h	/^        std::vector<short> buffer;$/;"	m	class:Music	access:private
Music::buffers	src/Audio/Music.h	/^        unsigned int buffers[BUFFER_COUNT];$/;"	m	class:Music	access:private
Music::buffersProcessed	src/Audio/Music.cpp	/^ALint Music::buffersProcessed()$/;"	f	class:Music	signature:()
Music::buffersProcessed	src/Audio/Music.h	/^        ALint buffersProcessed();$/;"	p	class:Music	access:public	signature:()
Music::channelCount	src/Audio/Music.h	/^        unsigned int channelCount;$/;"	m	class:Music	access:private
Music::clearQueue	src/Audio/Music.cpp	/^void Music::clearQueue()$/;"	f	class:Music	signature:()
Music::clearQueue	src/Audio/Music.h	/^        void clearQueue();$/;"	p	class:Music	access:public	signature:()
Music::duration	src/Audio/Music.h	/^        float duration;$/;"	m	class:Music	access:private
Music::endBuffers	src/Audio/Music.h	/^        bool endBuffers[BUFFER_COUNT];$/;"	m	class:Music	access:private
Music::file	src/Audio/Music.h	/^        SNDFILE* file;$/;"	m	class:Music	access:private
Music::fillAndPushBuffer	src/Audio/Music.cpp	/^bool Music::fillAndPushBuffer(unsigned int bufferNum)$/;"	f	class:Music	signature:(unsigned int bufferNum)
Music::fillAndPushBuffer	src/Audio/Music.h	/^        bool fillAndPushBuffer(unsigned int bufferNum);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum)
Music::fillQueue	src/Audio/Music.cpp	/^bool Music::fillQueue()$/;"	f	class:Music	signature:()
Music::fillQueue	src/Audio/Music.h	/^        bool fillQueue();$/;"	p	class:Music	access:public	signature:()
Music::format	src/Audio/Music.h	/^        ALenum format;$/;"	m	class:Music	access:private
Music::getBufferNum	src/Audio/Music.cpp	/^unsigned int Music::getBufferNum(ALuint buffer)$/;"	f	class:Music	signature:(ALuint buffer)
Music::getBufferNum	src/Audio/Music.h	/^        unsigned int getBufferNum(ALuint buffer);$/;"	p	class:Music	access:public	signature:(ALuint buffer)
Music::getDuration	src/Audio/Music.cpp	/^float Music::getDuration()$/;"	f	class:Music	signature:()
Music::getDuration	src/Audio/Music.h	/^        float getDuration();$/;"	p	class:Music	access:public	signature:()
Music::getEndBuffer	src/Audio/Music.cpp	/^bool Music::getEndBuffer(unsigned int bufferNum)$/;"	f	class:Music	signature:(unsigned int bufferNum)
Music::getEndBuffer	src/Audio/Music.h	/^        bool getEndBuffer(unsigned int bufferNum);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum)
Music::getLoop	src/Audio/Music.cpp	/^bool Music::getLoop()$/;"	f	class:Music	signature:()
Music::getLoop	src/Audio/Music.h	/^        bool getLoop();$/;"	p	class:Music	access:public	signature:()
Music::getSamplesProcessed	src/Audio/Music.cpp	/^unsigned long Music::getSamplesProcessed()$/;"	f	class:Music	signature:()
Music::getSamplesProcessed	src/Audio/Music.h	/^        unsigned long getSamplesProcessed();$/;"	p	class:Music	access:public	signature:()
Music::getTime	src/Audio/Music.cpp	/^float Music::getTime()$/;"	f	class:Music	signature:()
Music::getTime	src/Audio/Music.h	/^        float getTime();$/;"	p	class:Music	access:public	signature:()
Music::isStreaming	src/Audio/Music.cpp	/^bool Music::isStreaming()$/;"	f	class:Music	signature:()
Music::isStreaming	src/Audio/Music.h	/^        bool isStreaming();$/;"	p	class:Music	access:public	signature:()
Music::loadChunk	src/Audio/Music.cpp	/^bool Music::loadChunk(SoundChunk& c)$/;"	f	class:Music	signature:(SoundChunk& c)
Music::loadChunk	src/Audio/Music.h	/^        bool loadChunk(SoundChunk& c);$/;"	p	class:Music	access:public	signature:(SoundChunk& c)
Music::loadSound	src/Audio/Music.cpp	/^void Music::loadSound(const std::string& filename)$/;"	f	class:Music	signature:(const std::string& filename)
Music::loadSound	src/Audio/Music.h	/^        void loadSound(const std::string& filename);$/;"	p	class:Music	access:public	signature:(const std::string& filename)
Music::loop	src/Audio/Music.h	/^        bool loop;$/;"	m	class:Music	access:private
Music::play	src/Audio/Music.cpp	/^void Music::play()$/;"	f	class:Music	signature:()
Music::play	src/Audio/Music.h	/^        void play();$/;"	p	class:Music	access:public	signature:()
Music::popBuffer	src/Audio/Music.cpp	/^unsigned int Music::popBuffer()$/;"	f	class:Music	signature:()
Music::popBuffer	src/Audio/Music.h	/^        unsigned int popBuffer();$/;"	p	class:Music	access:public	signature:()
Music::sampleCount	src/Audio/Music.h	/^        std::size_t  sampleCount;$/;"	m	class:Music	access:private
Music::sampleRate	src/Audio/Music.h	/^        unsigned int sampleRate;$/;"	m	class:Music	access:private
Music::samplesProcessed	src/Audio/Music.h	/^        unsigned long samplesProcessed;$/;"	m	class:Music	access:private
Music::seek	src/Audio/Music.cpp	/^void Music::seek(float time)$/;"	f	class:Music	signature:(float time)
Music::seek	src/Audio/Music.h	/^        void seek(float time);$/;"	p	class:Music	access:public	signature:(float time)
Music::setEndBuffer	src/Audio/Music.cpp	/^void Music::setEndBuffer(unsigned int bufferNum, bool value)$/;"	f	class:Music	signature:(unsigned int bufferNum, bool value)
Music::setEndBuffer	src/Audio/Music.h	/^        void setEndBuffer(unsigned int bufferNum, bool value);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum, bool value)
Music::setLoop	src/Audio/Music.cpp	/^void Music::setLoop(bool value)$/;"	f	class:Music	signature:(bool value)
Music::setLoop	src/Audio/Music.h	/^        void setLoop(bool value);$/;"	p	class:Music	access:public	signature:(bool value)
Music::setSamplesProcessed	src/Audio/Music.cpp	/^void Music::setSamplesProcessed(unsigned long i)$/;"	f	class:Music	signature:(unsigned long i)
Music::setSamplesProcessed	src/Audio/Music.h	/^        void setSamplesProcessed(unsigned long i);$/;"	p	class:Music	access:public	signature:(unsigned long i)
Music::setStream	src/Audio/Music.cpp	/^void Music::setStream(bool value)$/;"	f	class:Music	signature:(bool value)
Music::setStream	src/Audio/Music.h	/^        void setStream(bool value);$/;"	p	class:Music	access:public	signature:(bool value)
Music::stop	src/Audio/Music.cpp	/^void Music::stop()$/;"	f	class:Music	signature:()
Music::stop	src/Audio/Music.h	/^        void stop();$/;"	p	class:Music	access:public	signature:()
Music::streaming	src/Audio/Music.h	/^        bool streaming;$/;"	m	class:Music	access:private
Music::thread	src/Audio/Music.h	/^        GLFWthread thread;$/;"	m	class:Music	access:private
Music::~Music	src/Audio/Music.cpp	/^Music::~Music()$/;"	f	class:Music	signature:()
Music::~Music	src/Audio/Music.h	/^        ~Music();$/;"	p	class:Music	access:public	signature:()
MusicState	test/MusicState.cpp	/^MusicState::MusicState()$/;"	f	class:MusicState	signature:()
MusicState	test/MusicState.h	/^        MusicState();$/;"	p	class:MusicState	access:public	signature:()
MusicState	test/MusicState.h	/^class MusicState : public CoreState$/;"	c	inherits:CoreState
MusicState::MusicState	test/MusicState.cpp	/^MusicState::MusicState()$/;"	f	class:MusicState	signature:()
MusicState::MusicState	test/MusicState.h	/^        MusicState();$/;"	p	class:MusicState	access:public	signature:()
MusicState::background	test/MusicState.h	/^        TexturePtr background;$/;"	m	class:MusicState	access:private
MusicState::deinit	test/MusicState.cpp	/^void MusicState::deinit()$/;"	f	class:MusicState	signature:()
MusicState::deinit	test/MusicState.h	/^        void deinit();$/;"	p	class:MusicState	access:public	signature:()
MusicState::draw	test/MusicState.cpp	/^void MusicState::draw()$/;"	f	class:MusicState	signature:()
MusicState::draw	test/MusicState.h	/^        void draw();$/;"	p	class:MusicState	access:public	signature:()
MusicState::handleInput	test/MusicState.cpp	/^void MusicState::handleInput(Input& input, int value, int action)$/;"	f	class:MusicState	signature:(Input& input, int value, int action)
MusicState::handleInput	test/MusicState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:MusicState	access:public	signature:(Input& input, int value, int action)
MusicState::init	test/MusicState.cpp	/^void MusicState::init(ResourceManager& resources)$/;"	f	class:MusicState	signature:(ResourceManager& resources)
MusicState::init	test/MusicState.h	/^        void init(ResourceManager& resources);$/;"	p	class:MusicState	access:public	signature:(ResourceManager& resources)
MusicState::logic	test/MusicState.cpp	/^void MusicState::logic(float timeStep)$/;"	f	class:MusicState	signature:(float timeStep)
MusicState::logic	test/MusicState.h	/^        void logic(float timeStep);$/;"	p	class:MusicState	access:public	signature:(float timeStep)
MusicState::menu	test/MusicState.h	/^        Menu* menu;$/;"	m	class:MusicState	access:private
MusicState::music	test/MusicState.h	/^        SoundPtr music;$/;"	m	class:MusicState	access:private
MusicState::text	test/MusicState.h	/^        Text text;$/;"	m	class:MusicState	access:private
MusicState::~MusicState	test/MusicState.cpp	/^MusicState::~MusicState()$/;"	f	class:MusicState	signature:()
MusicState::~MusicState	test/MusicState.h	/^        ~MusicState();$/;"	p	class:MusicState	access:public	signature:()
N	src/Math/Random.h	/^        static const unsigned long N  = 624;$/;"	m	class:Random	access:private
NUM_CHARS	src/Graphics/Font.h	/^        static const unsigned int NUM_CHARS = 96;$/;"	m	class:Font	access:public
None	src/Graphics/Drawable.h	/^    const int None = 0;$/;"	m	namespace:Blend
None	src/Graphics/VertexBuffer.h	/^        None,$/;"	e	enum:BufferLayout::__anon3
PARENT	src/Utils/BinaryHeap.h	8;"	d
PI	src/Math/Math.h	/^    const float PI = 3.141593f;$/;"	m	namespace:Math
PNG_TYPE	src/stblib/stb_image.c	2127;"	d	file:
PROJECTS	Makefile	/^PROJECTS := Core_Library test$/;"	m
Particle	test/Bullet/Particle.cpp	/^Particle::Particle()$/;"	f	class:Particle	signature:()
Particle	test/Bullet/Particle.cpp	/^Particle::Particle(const ParticleProperties& p)$/;"	f	class:Particle	signature:(const ParticleProperties& p)
Particle	test/Bullet/Particle.cpp	/^Particle::Particle(const Vector2f& positive, $/;"	f	class:Particle	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
Particle	test/Bullet/Particle.h	/^        Particle();$/;"	p	class:Particle	access:public	signature:()
Particle	test/Bullet/Particle.h	/^        Particle(const ParticleProperties& p);$/;"	p	class:Particle	access:public	signature:(const ParticleProperties& p)
Particle	test/Bullet/Particle.h	/^        Particle(const Vector2f& positive, $/;"	p	class:Particle	access:public	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
Particle	test/Bullet/Particle.h	/^class Particle$/;"	c
Particle::Particle	test/Bullet/Particle.cpp	/^Particle::Particle()$/;"	f	class:Particle	signature:()
Particle::Particle	test/Bullet/Particle.cpp	/^Particle::Particle(const ParticleProperties& p)$/;"	f	class:Particle	signature:(const ParticleProperties& p)
Particle::Particle	test/Bullet/Particle.cpp	/^Particle::Particle(const Vector2f& positive, $/;"	f	class:Particle	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
Particle::Particle	test/Bullet/Particle.h	/^        Particle();$/;"	p	class:Particle	access:public	signature:()
Particle::Particle	test/Bullet/Particle.h	/^        Particle(const ParticleProperties& p);$/;"	p	class:Particle	access:public	signature:(const ParticleProperties& p)
Particle::Particle	test/Bullet/Particle.h	/^        Particle(const Vector2f& positive, $/;"	p	class:Particle	access:public	signature:(const Vector2f& positive, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
Particle::acceleration	test/Bullet/Particle.h	/^        Vector2f acceleration;$/;"	m	class:Particle	access:protected
Particle::alive	test/Bullet/Particle.h	/^        bool alive;$/;"	m	class:Particle	access:protected
Particle::colorDelta	test/Bullet/Particle.h	/^        Color colorDelta;$/;"	m	class:Particle	access:protected
Particle::getAcceleration	test/Bullet/Particle.cpp	/^Vector2f& Particle::getAcceleration()$/;"	f	class:Particle	signature:()
Particle::getAcceleration	test/Bullet/Particle.h	/^        Vector2f& getAcceleration();$/;"	p	class:Particle	access:public	signature:()
Particle::getVelocity	test/Bullet/Particle.cpp	/^Vector2f& Particle::getVelocity()$/;"	f	class:Particle	signature:()
Particle::getVelocity	test/Bullet/Particle.h	/^        Vector2f& getVelocity();$/;"	p	class:Particle	access:public	signature:()
Particle::isAlive	test/Bullet/Particle.cpp	/^bool Particle::isAlive() const$/;"	f	class:Particle	signature:() const
Particle::isAlive	test/Bullet/Particle.h	/^        bool isAlive() const;$/;"	p	class:Particle	access:public	signature:() const
Particle::life	test/Bullet/Particle.h	/^        float life;$/;"	m	class:Particle	access:protected
Particle::logic	test/Bullet/Particle.cpp	/^void Particle::logic(float step, float* vertices, float* colors)$/;"	f	class:Particle	signature:(float step, float* vertices, float* colors)
Particle::logic	test/Bullet/Particle.h	/^        void logic(float step, float* vertices, float* colors);$/;"	p	class:Particle	access:public	signature:(float step, float* vertices, float* colors)
Particle::position	test/Bullet/Particle.h	/^        Vector2f position;$/;"	m	class:Particle	access:protected
Particle::processColor	test/Bullet/Particle.cpp	/^void Particle::processColor(float step, float* colors)$/;"	f	class:Particle	signature:(float step, float* colors)
Particle::processColor	test/Bullet/Particle.h	/^        void processColor(float step, float* colors);$/;"	p	class:Particle	access:public	signature:(float step, float* colors)
Particle::processTranslation	test/Bullet/Particle.cpp	/^void Particle::processTranslation(float step, float* vertices)$/;"	f	class:Particle	signature:(float step, float* vertices)
Particle::processTranslation	test/Bullet/Particle.h	/^        void processTranslation(float step, float* vertices);$/;"	p	class:Particle	access:public	signature:(float step, float* vertices)
Particle::set	test/Bullet/Particle.cpp	/^void Particle::set(const ParticleProperties& p)$/;"	f	class:Particle	signature:(const ParticleProperties& p)
Particle::set	test/Bullet/Particle.cpp	/^void Particle::set(const Vector2f& position, $/;"	f	class:Particle	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
Particle::set	test/Bullet/Particle.h	/^        void set(const ParticleProperties& p);$/;"	p	class:Particle	access:public	signature:(const ParticleProperties& p)
Particle::set	test/Bullet/Particle.h	/^        void set(const Vector2f& position, $/;"	p	class:Particle	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
Particle::velocity	test/Bullet/Particle.h	/^        Vector2f velocity;$/;"	m	class:Particle	access:protected
Particle::~Particle	test/Bullet/Particle.cpp	/^Particle::~Particle()$/;"	f	class:Particle	signature:()
Particle::~Particle	test/Bullet/Particle.h	/^        ~Particle();$/;"	p	class:Particle	access:public	signature:()
ParticleEmitter	test/Bullet/ParticleEmitter.cpp	/^ParticleEmitter::ParticleEmitter()$/;"	f	class:ParticleEmitter	signature:()
ParticleEmitter	test/Bullet/ParticleEmitter.h	/^        ParticleEmitter();$/;"	p	class:ParticleEmitter	access:public	signature:()
ParticleEmitter	test/Bullet/ParticleEmitter.h	/^class ParticleEmitter : public Drawable$/;"	c	inherits:Drawable
ParticleEmitter::ParticleEmitter	test/Bullet/ParticleEmitter.cpp	/^ParticleEmitter::ParticleEmitter()$/;"	f	class:ParticleEmitter	signature:()
ParticleEmitter::ParticleEmitter	test/Bullet/ParticleEmitter.h	/^        ParticleEmitter();$/;"	p	class:ParticleEmitter	access:public	signature:()
ParticleEmitter::allocateMem	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::allocateMem()$/;"	f	class:ParticleEmitter	signature:()
ParticleEmitter::allocateMem	test/Bullet/ParticleEmitter.h	/^        virtual void allocateMem();$/;"	p	class:ParticleEmitter	access:public	signature:()
ParticleEmitter::bufferID	test/Bullet/ParticleEmitter.h	/^        unsigned int bufferID;$/;"	m	class:ParticleEmitter	access:protected
ParticleEmitter::draw	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::draw(float x, float y) const$/;"	f	class:ParticleEmitter	signature:(float x, float y) const
ParticleEmitter::draw	test/Bullet/ParticleEmitter.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:ParticleEmitter	access:public	signature:(float x = 0.0f, float y = 0.0f) const
ParticleEmitter::getParticleCount	test/Bullet/ParticleEmitter.cpp	/^const int ParticleEmitter::getParticleCount() const$/;"	f	class:ParticleEmitter	signature:() const
ParticleEmitter::getParticleCount	test/Bullet/ParticleEmitter.h	/^        const int getParticleCount() const;$/;"	p	class:ParticleEmitter	access:public	signature:() const
ParticleEmitter::logic	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::logic(float step)$/;"	f	class:ParticleEmitter	signature:(float step)
ParticleEmitter::logic	test/Bullet/ParticleEmitter.h	/^        void logic(float step);$/;"	p	class:ParticleEmitter	access:public	signature:(float step)
ParticleEmitter::particles	test/Bullet/ParticleEmitter.h	/^        ParticleMem* particles;$/;"	m	class:ParticleEmitter	access:protected
ParticleEmitter::random	test/Bullet/ParticleEmitter.h	/^        Random random;$/;"	m	class:ParticleEmitter	access:protected
ParticleEmitter::set	test/Bullet/ParticleEmitter.h	/^        virtual void set() = 0;$/;"	p	class:ParticleEmitter	access:public	signature:()
ParticleEmitter::~ParticleEmitter	test/Bullet/ParticleEmitter.cpp	/^ParticleEmitter::~ParticleEmitter()$/;"	f	class:ParticleEmitter	signature:()
ParticleEmitter::~ParticleEmitter	test/Bullet/ParticleEmitter.h	/^        virtual ~ParticleEmitter();$/;"	p	class:ParticleEmitter	access:public	signature:()
ParticleMem	test/Bullet/ParticleMem.cpp	/^ParticleMem::ParticleMem() $/;"	f	class:ParticleMem	signature:()
ParticleMem	test/Bullet/ParticleMem.h	/^        ParticleMem();$/;"	p	class:ParticleMem	access:public	signature:()
ParticleMem	test/Bullet/ParticleMem.h	/^class ParticleMem$/;"	c
ParticleMem::MAX_PARTICLES	test/Bullet/ParticleMem.h	/^        static const int MAX_PARTICLES =  512 * 128;$/;"	m	class:ParticleMem	access:public
ParticleMem::ParticleMem	test/Bullet/ParticleMem.cpp	/^ParticleMem::ParticleMem() $/;"	f	class:ParticleMem	signature:()
ParticleMem::ParticleMem	test/Bullet/ParticleMem.h	/^        ParticleMem();$/;"	p	class:ParticleMem	access:public	signature:()
ParticleMem::add	test/Bullet/ParticleMem.h	/^        virtual void add(const ParticleProperties& p) = 0;$/;"	p	class:ParticleMem	access:public	signature:(const ParticleProperties& p)
ParticleMem::add	test/Bullet/ParticleMem.h	/^        virtual void add(const Vector2f& position, $/;"	p	class:ParticleMem	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
ParticleMem::colorBuffer	test/Bullet/ParticleMem.h	/^        float* colorBuffer;$/;"	m	class:ParticleMem	access:protected
ParticleMem::colorBufferSize	test/Bullet/ParticleMem.h	/^        int colorBufferSize;$/;"	m	class:ParticleMem	access:protected
ParticleMem::get	test/Bullet/ParticleMem.h	/^        virtual Particle& get(int index) = 0;$/;"	p	class:ParticleMem	access:public	signature:(int index)
ParticleMem::getColorBuffer	test/Bullet/ParticleMem.cpp	/^float* ParticleMem::getColorBuffer() const$/;"	f	class:ParticleMem	signature:() const
ParticleMem::getColorBuffer	test/Bullet/ParticleMem.h	/^        float* getColorBuffer() const;$/;"	p	class:ParticleMem	access:public	signature:() const
ParticleMem::getColorBufferSize	test/Bullet/ParticleMem.cpp	/^const int ParticleMem::getColorBufferSize() const$/;"	f	class:ParticleMem	signature:() const
ParticleMem::getColorBufferSize	test/Bullet/ParticleMem.h	/^        const int getColorBufferSize() const;$/;"	p	class:ParticleMem	access:public	signature:() const
ParticleMem::getVertexBuffer	test/Bullet/ParticleMem.cpp	/^float* ParticleMem::getVertexBuffer() const$/;"	f	class:ParticleMem	signature:() const
ParticleMem::getVertexBuffer	test/Bullet/ParticleMem.h	/^        float* getVertexBuffer() const;$/;"	p	class:ParticleMem	access:public	signature:() const
ParticleMem::getVertexBufferSize	test/Bullet/ParticleMem.cpp	/^const int ParticleMem::getVertexBufferSize() const$/;"	f	class:ParticleMem	signature:() const
ParticleMem::getVertexBufferSize	test/Bullet/ParticleMem.h	/^        const int getVertexBufferSize() const;$/;"	p	class:ParticleMem	access:public	signature:() const
ParticleMem::mem	test/Bullet/ParticleMem.h	/^        Particle* mem;$/;"	m	class:ParticleMem	access:protected
ParticleMem::remove	test/Bullet/ParticleMem.h	/^        virtual void remove(int index) = 0;$/;"	p	class:ParticleMem	access:public	signature:(int index)
ParticleMem::size	test/Bullet/ParticleMem.h	/^        virtual const int size() const = 0;$/;"	p	class:ParticleMem	access:public	signature:() const
ParticleMem::vertexBuffer	test/Bullet/ParticleMem.h	/^        float* vertexBuffer;$/;"	m	class:ParticleMem	access:protected
ParticleMem::vertexBufferSize	test/Bullet/ParticleMem.h	/^        int vertexBufferSize;$/;"	m	class:ParticleMem	access:protected
ParticleMem::~ParticleMem	test/Bullet/ParticleMem.cpp	/^ParticleMem::~ParticleMem()$/;"	f	class:ParticleMem	signature:()
ParticleMem::~ParticleMem	test/Bullet/ParticleMem.h	/^        virtual ~ParticleMem();$/;"	p	class:ParticleMem	access:public	signature:()
ParticleProperties	test/Bullet/Particle.h	/^struct ParticleProperties$/;"	s
ParticleProperties::acceleration	test/Bullet/Particle.h	/^    Vector2f acceleration;$/;"	m	struct:ParticleProperties	access:public
ParticleProperties::currentColor	test/Bullet/Particle.h	/^    Color currentColor;$/;"	m	struct:ParticleProperties	access:public
ParticleProperties::fadeColor	test/Bullet/Particle.h	/^    Color fadeColor;$/;"	m	struct:ParticleProperties	access:public
ParticleProperties::life	test/Bullet/Particle.h	/^    float life;$/;"	m	struct:ParticleProperties	access:public
ParticleProperties::position	test/Bullet/Particle.h	/^    Vector2f position;$/;"	m	struct:ParticleProperties	access:public
ParticleProperties::velocity	test/Bullet/Particle.h	/^    Vector2f velocity;$/;"	m	struct:ParticleProperties	access:public
PatternState	test/PatternState.cpp	/^PatternState::PatternState()$/;"	f	class:PatternState	signature:()
PatternState	test/PatternState.h	/^        PatternState();$/;"	p	class:PatternState	access:public	signature:()
PatternState	test/PatternState.h	/^class PatternState : public CoreState$/;"	c	inherits:CoreState
PatternState::PatternState	test/PatternState.cpp	/^PatternState::PatternState()$/;"	f	class:PatternState	signature:()
PatternState::PatternState	test/PatternState.h	/^        PatternState();$/;"	p	class:PatternState	access:public	signature:()
PatternState::background	test/PatternState.h	/^        TexturePtr background;$/;"	m	class:PatternState	access:private
PatternState::deinit	test/PatternState.cpp	/^void PatternState::deinit()$/;"	f	class:PatternState	signature:()
PatternState::deinit	test/PatternState.h	/^        void deinit();$/;"	p	class:PatternState	access:public	signature:()
PatternState::draw	test/PatternState.cpp	/^void PatternState::draw()$/;"	f	class:PatternState	signature:()
PatternState::draw	test/PatternState.h	/^        void draw();$/;"	p	class:PatternState	access:public	signature:()
PatternState::handleInput	test/PatternState.cpp	/^void PatternState::handleInput(Input& input, int value, int action)$/;"	f	class:PatternState	signature:(Input& input, int value, int action)
PatternState::handleInput	test/PatternState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:PatternState	access:public	signature:(Input& input, int value, int action)
PatternState::init	test/PatternState.cpp	/^void PatternState::init(ResourceManager& resources)$/;"	f	class:PatternState	signature:(ResourceManager& resources)
PatternState::init	test/PatternState.h	/^        void init(ResourceManager& resources);$/;"	p	class:PatternState	access:public	signature:(ResourceManager& resources)
PatternState::logic	test/PatternState.cpp	/^void PatternState::logic(float timeStep)$/;"	f	class:PatternState	signature:(float timeStep)
PatternState::logic	test/PatternState.h	/^        void logic(float timeStep);$/;"	p	class:PatternState	access:public	signature:(float timeStep)
PatternState::~PatternState	test/PatternState.cpp	/^PatternState::~PatternState()$/;"	f	class:PatternState	signature:()
PatternState::~PatternState	test/PatternState.h	/^        ~PatternState();$/;"	p	class:PatternState	access:public	signature:()
Paused	src/Audio/Sound.h	/^    Paused$/;"	e	enum:Status
Pi	src/Math/Trig.h	/^        static float Pi()                               { return 3.14159265f;                       }$/;"	f	class:Trig	access:public	signature:()
Playing	src/Audio/Sound.h	/^    Playing,$/;"	e	enum:Status
Points	src/Graphics/VertexBuffer.h	/^        Points,$/;"	e	enum:PrimitiveType::__anon2
Polygon	src/Graphics/VertexBuffer.h	/^        Polygon,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType	src/Graphics/VertexBuffer.h	/^namespace PrimitiveType$/;"	n
PrimitiveType::LineLoop	src/Graphics/VertexBuffer.h	/^        LineLoop,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::LineStrip	src/Graphics/VertexBuffer.h	/^        LineStrip,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::Lines	src/Graphics/VertexBuffer.h	/^        Lines,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::MAX_PRIMITIVE	src/Graphics/VertexBuffer.h	/^        MAX_PRIMITIVE$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::Points	src/Graphics/VertexBuffer.h	/^        Points,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::Polygon	src/Graphics/VertexBuffer.h	/^        Polygon,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::QuadStrip	src/Graphics/VertexBuffer.h	/^        QuadStrip,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::Quads	src/Graphics/VertexBuffer.h	/^        Quads,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::TriangleFan	src/Graphics/VertexBuffer.h	/^        TriangleFan,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::TriangleStrip	src/Graphics/VertexBuffer.h	/^        TriangleStrip,$/;"	e	enum:PrimitiveType::__anon2
PrimitiveType::Triangles	src/Graphics/VertexBuffer.h	/^        Triangles,$/;"	e	enum:PrimitiveType::__anon2
QuadStrip	src/Graphics/VertexBuffer.h	/^        QuadStrip,$/;"	e	enum:PrimitiveType::__anon2
Quads	src/Graphics/VertexBuffer.h	/^        Quads,$/;"	e	enum:PrimitiveType::__anon2
RED	src/Graphics/Color.cpp	/^Color Color::RED   = Color(1.0f, 0.0f, 0.0f, 1.0f);$/;"	m	class:Color	file:
RED	src/Graphics/Color.h	/^        static Color RED;$/;"	m	class:Color	access:public
REGISTER_GAME	src/Core/CoreRegistry.h	9;"	d
RESTART	src/stblib/stb_image.c	1071;"	d	file:
RIGHT	src/Utils/BinaryHeap.h	7;"	d
RadToDeg	src/Math/Trig.h	/^        static float RadToDeg(float rad)                { return 180 \/ 3.14159265f * rad;           }$/;"	f	class:Trig	access:public	signature:(float rad)
Random	src/Math/Random.cpp	/^Random::Random()$/;"	f	class:Random	signature:()
Random	src/Math/Random.cpp	/^Random::Random(unsigned long seedv)$/;"	f	class:Random	signature:(unsigned long seedv)
Random	src/Math/Random.h	/^        Random();$/;"	p	class:Random	access:public	signature:()
Random	src/Math/Random.h	/^        Random(unsigned long seedv);$/;"	p	class:Random	access:public	signature:(unsigned long seedv)
Random	src/Math/Random.h	/^class Random$/;"	c
Random::LOWER_MASK	src/Math/Random.h	/^        static const unsigned long LOWER_MASK = 0x7fffffffUL;$/;"	m	class:Random	access:private
Random::M	src/Math/Random.h	/^        static const unsigned long M = 397;$/;"	m	class:Random	access:private
Random::MATRIX_A	src/Math/Random.h	/^        static const unsigned long MATRIX_A = 0x9908b0dfUL;$/;"	m	class:Random	access:private
Random::N	src/Math/Random.h	/^        static const unsigned long N  = 624;$/;"	m	class:Random	access:private
Random::Random	src/Math/Random.cpp	/^Random::Random()$/;"	f	class:Random	signature:()
Random::Random	src/Math/Random.cpp	/^Random::Random(unsigned long seedv)$/;"	f	class:Random	signature:(unsigned long seedv)
Random::Random	src/Math/Random.h	/^        Random();$/;"	p	class:Random	access:public	signature:()
Random::Random	src/Math/Random.h	/^        Random(unsigned long seedv);$/;"	p	class:Random	access:public	signature:(unsigned long seedv)
Random::UPPER_MASK	src/Math/Random.h	/^        static const unsigned long UPPER_MASK = 0x80000000UL;$/;"	m	class:Random	access:private
Random::genRand	src/Math/Random.cpp	/^double Random::genRand(double min, double max)$/;"	f	class:Random	signature:(double min, double max)
Random::genRand	src/Math/Random.cpp	/^int Random::genRand(int min, int max)$/;"	f	class:Random	signature:(int min, int max)
Random::genRand	src/Math/Random.cpp	/^unsigned long Random::genRand(unsigned long max)$/;"	f	class:Random	signature:(unsigned long max)
Random::genRand	src/Math/Random.h	/^        double genRand(double min, double max);$/;"	p	class:Random	access:public	signature:(double min, double max)
Random::genRand	src/Math/Random.h	/^        int genRand(int min, int max);$/;"	p	class:Random	access:public	signature:(int min, int max)
Random::genRand	src/Math/Random.h	/^        unsigned long genRand(unsigned long max);$/;"	p	class:Random	access:public	signature:(unsigned long max)
Random::genRand_Int32	src/Math/Random.cpp	/^unsigned long Random::genRand_Int32()$/;"	f	class:Random	signature:()
Random::genRand_Int32	src/Math/Random.h	/^        unsigned long genRand_Int32();$/;"	p	class:Random	access:public	signature:()
Random::getSeed	src/Math/Random.cpp	/^unsigned long Random::getSeed() const$/;"	f	class:Random	signature:() const
Random::getSeed	src/Math/Random.h	/^        unsigned long getSeed() const;$/;"	p	class:Random	access:public	signature:() const
Random::seed	src/Math/Random.h	/^        unsigned long seed;$/;"	m	class:Random	access:private
Random::setSeed	src/Math/Random.cpp	/^void Random::setSeed()$/;"	f	class:Random	signature:()
Random::setSeed	src/Math/Random.cpp	/^void Random::setSeed(unsigned long seedv)$/;"	f	class:Random	signature:(unsigned long seedv)
Random::setSeed	src/Math/Random.h	/^        void setSeed();$/;"	p	class:Random	access:public	signature:()
Random::setSeed	src/Math/Random.h	/^        void setSeed(unsigned long seedv);$/;"	p	class:Random	access:public	signature:(unsigned long seedv)
Random::state	src/Math/Random.h	/^        unsigned long state[N];$/;"	m	class:Random	access:private
Random::stateIndex	src/Math/Random.h	/^        unsigned long stateIndex;$/;"	m	class:Random	access:private
Read	src/Utils/FileLoader.h	/^            Read,$/;"	e	enum:FileLoader::Mode
Rect	src/Math/Rect.h	/^        Rect()$/;"	f	class:Rect	access:public	signature:()
Rect	src/Math/Rect.h	/^        Rect(T coordLeft, T coordTop, T coordRight, T coordBottom)$/;"	f	class:Rect	access:public	signature:(T coordLeft, T coordTop, T coordRight, T coordBottom)
Rect	src/Math/Rect.h	/^template <typename T> class Rect$/;"	c
Rect::Rect	src/Math/Rect.h	/^        Rect()$/;"	f	class:Rect	access:public	signature:()
Rect::Rect	src/Math/Rect.h	/^        Rect(T coordLeft, T coordTop, T coordRight, T coordBottom)$/;"	f	class:Rect	access:public	signature:(T coordLeft, T coordTop, T coordRight, T coordBottom)
Rect::bottom	src/Math/Rect.h	/^        T bottom;$/;"	m	class:Rect	access:public
Rect::collide	src/Math/Rect.h	/^        bool collide(const Rect<T>& rect)$/;"	f	class:Rect	access:public	signature:(const Rect<T>& rect)
Rect::collide	src/Math/Rect.h	/^        bool collide(const Vector2<T>& point)$/;"	f	class:Rect	access:public	signature:(const Vector2<T>& point)
Rect::getHeight	src/Math/Rect.h	/^        T getHeight() const$/;"	f	class:Rect	access:public	signature:() const
Rect::getWidth	src/Math/Rect.h	/^        T getWidth() const$/;"	f	class:Rect	access:public	signature:() const
Rect::left	src/Math/Rect.h	/^        T left;$/;"	m	class:Rect	access:public
Rect::offset	src/Math/Rect.h	/^        void offset(T offsetx, T offsety)$/;"	f	class:Rect	access:public	signature:(T offsetx, T offsety)
Rect::right	src/Math/Rect.h	/^        T right;$/;"	m	class:Rect	access:public
Rect::top	src/Math/Rect.h	/^        T top;$/;"	m	class:Rect	access:public
Rectangle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Rectangle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
Rectangle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Rectangle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
Rectangle	src/Graphics/VertexBuffer.h	/^        static void Rectangle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
Rectangle	src/Graphics/VertexBuffer.h	/^        static void Rectangle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
Rectf	src/Math/Rect.h	/^typedef Rect<float> Rectf;$/;"	t
Recti	src/Math/Rect.h	/^typedef Rect<int> Recti;$/;"	t
RegisterState	src/Core/CoreRegistry.cpp	/^RegisterState::RegisterState(const std::string& identifier, CoreState* state)$/;"	f	class:RegisterState	signature:(const std::string& identifier, CoreState* state)
RegisterState	src/Core/CoreRegistry.h	/^        RegisterState(const std::string& identifier, CoreState* state);$/;"	p	struct:RegisterState	access:public	signature:(const std::string& identifier, CoreState* state)
RegisterState	src/Core/CoreRegistry.h	/^struct RegisterState$/;"	s
RegisterState::RegisterState	src/Core/CoreRegistry.cpp	/^RegisterState::RegisterState(const std::string& identifier, CoreState* state)$/;"	f	class:RegisterState	signature:(const std::string& identifier, CoreState* state)
RegisterState::RegisterState	src/Core/CoreRegistry.h	/^        RegisterState(const std::string& identifier, CoreState* state);$/;"	p	struct:RegisterState	access:public	signature:(const std::string& identifier, CoreState* state)
Renderer	src/Graphics/Renderer.cpp	/^Renderer::Renderer(int w, int h)$/;"	f	class:Renderer	signature:(int w, int h)
Renderer	src/Graphics/Renderer.h	/^        Renderer(int w, int h);$/;"	p	class:Renderer	access:public	signature:(int w, int h)
Renderer	src/Graphics/Renderer.h	/^class Renderer$/;"	c
Renderer::Renderer	src/Graphics/Renderer.cpp	/^Renderer::Renderer(int w, int h)$/;"	f	class:Renderer	signature:(int w, int h)
Renderer::Renderer	src/Graphics/Renderer.h	/^        Renderer(int w, int h);$/;"	p	class:Renderer	access:public	signature:(int w, int h)
Renderer::deinit	src/Graphics/Renderer.cpp	/^void Renderer::deinit() const$/;"	f	class:Renderer	signature:() const
Renderer::deinit	src/Graphics/Renderer.h	/^        void deinit() const;$/;"	p	class:Renderer	access:public	signature:() const
Renderer::dispHeight	src/Graphics/Renderer.h	/^        int dispHeight;$/;"	m	class:Renderer	access:protected
Renderer::dispWidth	src/Graphics/Renderer.h	/^        int dispWidth;$/;"	m	class:Renderer	access:protected
Renderer::draw	src/Graphics/Renderer.cpp	/^void Renderer::draw(Drawable& Object, Vector2f& loc)$/;"	f	class:Renderer	signature:(Drawable& Object, Vector2f& loc)
Renderer::draw	src/Graphics/Renderer.cpp	/^void Renderer::draw(Drawable& Object, float x, float y)$/;"	f	class:Renderer	signature:(Drawable& Object, float x, float y)
Renderer::draw	src/Graphics/Renderer.h	/^        void draw(Drawable& Object, Vector2f& loc);$/;"	p	class:Renderer	access:public	signature:(Drawable& Object, Vector2f& loc)
Renderer::draw	src/Graphics/Renderer.h	/^        void draw(Drawable& Object, float x, float y);$/;"	p	class:Renderer	access:public	signature:(Drawable& Object, float x, float y)
Renderer::init	src/Graphics/Renderer.cpp	/^void Renderer::init() const$/;"	f	class:Renderer	signature:() const
Renderer::init	src/Graphics/Renderer.h	/^        void init() const;$/;"	p	class:Renderer	access:public	signature:() const
Renderer::post	src/Graphics/Renderer.cpp	/^void Renderer::post() const$/;"	f	class:Renderer	signature:() const
Renderer::post	src/Graphics/Renderer.h	/^        void post() const;$/;"	p	class:Renderer	access:public	signature:() const
Renderer::pre	src/Graphics/Renderer.cpp	/^void Renderer::pre() const$/;"	f	class:Renderer	signature:() const
Renderer::pre	src/Graphics/Renderer.h	/^        void pre() const;$/;"	p	class:Renderer	access:public	signature:() const
Renderer::rotate	src/Graphics/Renderer.cpp	/^void Renderer::rotate(float rotation)$/;"	f	class:Renderer	signature:(float rotation)
Renderer::rotate	src/Graphics/Renderer.h	/^        void rotate(float rotation);$/;"	p	class:Renderer	access:public	signature:(float rotation)
Renderer::scale	src/Graphics/Renderer.cpp	/^void Renderer::scale(float x, float y)$/;"	f	class:Renderer	signature:(float x, float y)
Renderer::scale	src/Graphics/Renderer.h	/^        void scale(float x, float y);$/;"	p	class:Renderer	access:public	signature:(float x, float y)
Renderer::~Renderer	src/Graphics/Renderer.cpp	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
Renderer::~Renderer	src/Graphics/Renderer.h	/^        ~Renderer();$/;"	p	class:Renderer	access:public	signature:()
ResourceCache	src/System/ResourceCache.h	/^        ResourceCache()$/;"	f	class:ResourceCache	access:public	signature:()
ResourceCache	src/System/ResourceCache.h	/^class ResourceCache$/;"	c
ResourceCache::ResourceCache	src/System/ResourceCache.h	/^        ResourceCache()$/;"	f	class:ResourceCache	access:public	signature:()
ResourceCache::ResourcePointer	src/System/ResourceCache.h	/^        typedef boost::shared_ptr<T> ResourcePointer;$/;"	t	class:ResourceCache	access:protected
ResourceCache::add	src/System/ResourceCache.h	/^        ResourcePointer add(const std::string& identifier, const ResourcePointer& ptr)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier, const ResourcePointer& ptr)
ResourceCache::alreadyExists	src/System/ResourceCache.h	/^        bool alreadyExists(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
ResourceCache::get	src/System/ResourceCache.h	/^        ResourcePointer get(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
ResourceCache::operator []	src/System/ResourceCache.h	/^        ResourcePointer operator[] (const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
ResourceCache::remove	src/System/ResourceCache.h	/^        void remove(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
ResourceCache::removeAll	src/System/ResourceCache.h	/^        virtual void removeAll()$/;"	f	class:ResourceCache	access:public	signature:()
ResourceCache::resmap	src/System/ResourceCache.h	/^        std::map<std::string, ResourcePointer> resmap;$/;"	m	class:ResourceCache	access:protected
ResourceCache::~ResourceCache	src/System/ResourceCache.h	/^        ~ResourceCache()$/;"	f	class:ResourceCache	access:public	signature:()
ResourceManager	src/System/ResourceManager.cpp	/^ResourceManager::ResourceManager()$/;"	f	class:ResourceManager	signature:()
ResourceManager	src/System/ResourceManager.h	/^    ResourceManager();$/;"	p	struct:ResourceManager	access:public	signature:()
ResourceManager	src/System/ResourceManager.h	/^struct ResourceManager$/;"	s
ResourceManager::ResourceManager	src/System/ResourceManager.cpp	/^ResourceManager::ResourceManager()$/;"	f	class:ResourceManager	signature:()
ResourceManager::ResourceManager	src/System/ResourceManager.h	/^    ResourceManager();$/;"	p	struct:ResourceManager	access:public	signature:()
ResourceManager::fontCache	src/System/ResourceManager.h	/^    FontCache fontCache;$/;"	m	struct:ResourceManager	access:public
ResourceManager::soundCache	src/System/ResourceManager.h	/^    SoundCache soundCache;$/;"	m	struct:ResourceManager	access:public
ResourceManager::textureCache	src/System/ResourceManager.h	/^    TextureCache textureCache;$/;"	m	struct:ResourceManager	access:public
ResourceManager::~ResourceManager	src/System/ResourceManager.cpp	/^ResourceManager::~ResourceManager()$/;"	f	class:ResourceManager	signature:()
ResourceManager::~ResourceManager	src/System/ResourceManager.h	/^    ~ResourceManager();$/;"	p	struct:ResourceManager	access:public	signature:()
ResourcePointer	src/System/ResourceCache.h	/^        typedef boost::shared_ptr<T> ResourcePointer;$/;"	t	class:ResourceCache	access:protected
SCAN_header	src/stblib/stb_image.c	/^   SCAN_header$/;"	e	enum:__anon7	file:
SCAN_load	src/stblib/stb_image.c	/^   SCAN_load=0,$/;"	e	enum:__anon7	file:
SCAN_type	src/stblib/stb_image.c	/^   SCAN_type,$/;"	e	enum:__anon7	file:
SINGLE	test/Bullet/Burst.h	/^        static const int SINGLE = 512.0f;$/;"	m	class:Burst	access:private
SOF	src/stblib/stb_image.c	1329;"	d	file:
SOI	src/stblib/stb_image.c	1327;"	d	file:
SOS	src/stblib/stb_image.c	1330;"	d	file:
SPACE	src/Graphics/Font.h	/^        static const unsigned int SPACE = 32;$/;"	m	class:Font	access:public
STBI_HAS_LROTL	src/stblib/stb_image.c	110;"	d	file:
STBI_INCLUDE_STB_IMAGE_H	src/stblib/stb_image.h	2;"	d
STBI_NOTUSED	src/stblib/stb_image.c	107;"	d	file:
STBI_NO_WRITE	src/stblib/stb_image.c	104;"	d	file:
STBI_VERSION	src/stblib/stb_image.h	133;"	d
STBI_default	src/stblib/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon4
STBI_grey	src/stblib/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon4
STBI_grey_alpha	src/stblib/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon4
STBI_rgb	src/stblib/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon4
STBI_rgb_alpha	src/stblib/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon4
STBTT_MACSTYLE_BOLD	src/stblib/stb_truetype.h	583;"	d
STBTT_MACSTYLE_DONTCARE	src/stblib/stb_truetype.h	582;"	d
STBTT_MACSTYLE_ITALIC	src/stblib/stb_truetype.h	584;"	d
STBTT_MACSTYLE_NONE	src/stblib/stb_truetype.h	586;"	d
STBTT_MACSTYLE_UNDERSCORE	src/stblib/stb_truetype.h	585;"	d
STBTT_MAC_EID_ARABIC	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon27
STBTT_MAC_EID_CHINESE_TRAD	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon27
STBTT_MAC_EID_GREEK	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon27
STBTT_MAC_EID_HEBREW	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon27
STBTT_MAC_EID_JAPANESE	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon27
STBTT_MAC_EID_KOREAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon27
STBTT_MAC_EID_ROMAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon27
STBTT_MAC_EID_RUSSIAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon27
STBTT_MAC_LANG_ARABIC	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon29
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon29
STBTT_MAC_LANG_CHINESE_TRAD	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon29
STBTT_MAC_LANG_DUTCH	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon29
STBTT_MAC_LANG_ENGLISH	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon29
STBTT_MAC_LANG_FRENCH	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon29
STBTT_MAC_LANG_GERMAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon29
STBTT_MAC_LANG_HEBREW	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon29
STBTT_MAC_LANG_ITALIAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon29
STBTT_MAC_LANG_JAPANESE	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon29
STBTT_MAC_LANG_KOREAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon29
STBTT_MAC_LANG_RUSSIAN	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon29
STBTT_MAC_LANG_SPANISH	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon29
STBTT_MAC_LANG_SWEDISH	src/stblib/stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon29
STBTT_MS_EID_SHIFTJIS	src/stblib/stb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon26
STBTT_MS_EID_SYMBOL	src/stblib/stb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon26
STBTT_MS_EID_UNICODE_BMP	src/stblib/stb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon26
STBTT_MS_EID_UNICODE_FULL	src/stblib/stb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon26
STBTT_MS_LANG_CHINESE	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon28
STBTT_MS_LANG_DUTCH	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon28
STBTT_MS_LANG_ENGLISH	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon28
STBTT_MS_LANG_FRENCH	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon28
STBTT_MS_LANG_GERMAN	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon28
STBTT_MS_LANG_HEBREW	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon28
STBTT_MS_LANG_ITALIAN	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon28
STBTT_MS_LANG_JAPANESE	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon28
STBTT_MS_LANG_KOREAN	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon28
STBTT_MS_LANG_RUSSIAN	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon28
STBTT_MS_LANG_SPANISH	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon28
STBTT_MS_LANG_SWEDISH	src/stblib/stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon28
STBTT_PLATFORM_ID_ISO	src/stblib/stb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon24
STBTT_PLATFORM_ID_MAC	src/stblib/stb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon24
STBTT_PLATFORM_ID_MICROSOFT	src/stblib/stb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon24
STBTT_PLATFORM_ID_UNICODE	src/stblib/stb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon24
STBTT_UNICODE_EID_ISO_10646	src/stblib/stb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon25
STBTT_UNICODE_EID_UNICODE_1_0	src/stblib/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon25
STBTT_UNICODE_EID_UNICODE_1_1	src/stblib/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon25
STBTT_UNICODE_EID_UNICODE_2_0_BMP	src/stblib/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon25
STBTT_UNICODE_EID_UNICODE_2_0_FULL	src/stblib/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon25
STBTT_assert	src/stblib/stb_truetype.h	307;"	d
STBTT_free	src/stblib/stb_truetype.h	302;"	d
STBTT_iceil	src/stblib/stb_truetype.h	295;"	d
STBTT_ifloor	src/stblib/stb_truetype.h	294;"	d
STBTT_malloc	src/stblib/stb_truetype.h	301;"	d
STBTT_memcpy	src/stblib/stb_truetype.h	317;"	d
STBTT_memset	src/stblib/stb_truetype.h	318;"	d
STBTT_sort	src/stblib/stb_truetype.h	288;"	d
STBTT_strlen	src/stblib/stb_truetype.h	312;"	d
STBTT_vcurve	src/stblib/stb_truetype.h	/^      STBTT_vcurve$/;"	e	enum:__anon21
STBTT_vline	src/stblib/stb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon21
STBTT_vmove	src/stblib/stb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon21
STB_TRUETYPE_IMPLEMENTATION	src/Graphics/FontLoader.cpp	8;"	d	file:
Sample	src/Audio/Sample.cpp	/^Sample::Sample()$/;"	f	class:Sample	signature:()
Sample	src/Audio/Sample.cpp	/^Sample::Sample(const std::string& filename)$/;"	f	class:Sample	signature:(const std::string& filename)
Sample	src/Audio/Sample.h	/^        Sample();$/;"	p	class:Sample	access:public	signature:()
Sample	src/Audio/Sample.h	/^        Sample(const std::string& filename);$/;"	p	class:Sample	access:public	signature:(const std::string& filename)
Sample	src/Audio/Sample.h	/^class Sample : public Sound$/;"	c	inherits:Sound
Sample::Sample	src/Audio/Sample.cpp	/^Sample::Sample()$/;"	f	class:Sample	signature:()
Sample::Sample	src/Audio/Sample.cpp	/^Sample::Sample(const std::string& filename)$/;"	f	class:Sample	signature:(const std::string& filename)
Sample::Sample	src/Audio/Sample.h	/^        Sample();$/;"	p	class:Sample	access:public	signature:()
Sample::Sample	src/Audio/Sample.h	/^        Sample(const std::string& filename);$/;"	p	class:Sample	access:public	signature:(const std::string& filename)
Sample::buffer	src/Audio/Sample.h	/^        SoundBuffer buffer;$/;"	m	class:Sample	access:private
Sample::loadSound	src/Audio/Sample.cpp	/^void Sample::loadSound(const std::string& filename)$/;"	f	class:Sample	signature:(const std::string& filename)
Sample::loadSound	src/Audio/Sample.h	/^        void loadSound(const std::string& filename);$/;"	p	class:Sample	access:public	signature:(const std::string& filename)
Sample::~Sample	src/Audio/Sample.cpp	/^Sample::~Sample()$/;"	f	class:Sample	signature:()
Sample::~Sample	src/Audio/Sample.h	/^        ~Sample();$/;"	p	class:Sample	access:public	signature:()
Section	src/Graphics/Section.cpp	/^Section::Section()$/;"	f	class:Section	signature:()
Section	src/Graphics/Section.cpp	/^Section::Section(const Texture& t, Rect<float>* r)$/;"	f	class:Section	signature:(const Texture& t, Rect<float>* r)
Section	src/Graphics/Section.h	/^        Section();$/;"	p	class:Section	access:public	signature:()
Section	src/Graphics/Section.h	/^        Section(const Texture& t, Rect<float>* r);$/;"	p	class:Section	access:public	signature:(const Texture& t, Rect<float>* r)
Section	src/Graphics/Section.h	/^class Section : public Drawable$/;"	c	inherits:Drawable
Section::Section	src/Graphics/Section.cpp	/^Section::Section()$/;"	f	class:Section	signature:()
Section::Section	src/Graphics/Section.cpp	/^Section::Section(const Texture& t, Rect<float>* r)$/;"	f	class:Section	signature:(const Texture& t, Rect<float>* r)
Section::Section	src/Graphics/Section.h	/^        Section();$/;"	p	class:Section	access:public	signature:()
Section::Section	src/Graphics/Section.h	/^        Section(const Texture& t, Rect<float>* r);$/;"	p	class:Section	access:public	signature:(const Texture& t, Rect<float>* r)
Section::createSection	src/Graphics/Section.cpp	/^void Section::createSection(const Texture& t, Rect<float>* r)$/;"	f	class:Section	signature:(const Texture& t, Rect<float>* r)
Section::createSection	src/Graphics/Section.h	/^        void createSection(const Texture& t, Rect<float>* r);$/;"	p	class:Section	access:public	signature:(const Texture& t, Rect<float>* r)
Section::draw	src/Graphics/Section.cpp	/^void Section::draw(float x, float y) const$/;"	f	class:Section	signature:(float x, float y) const
Section::draw	src/Graphics/Section.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Section	access:public	signature:(float x = 0.0f, float y = 0.0f) const
Section::setTexture	src/Graphics/Section.cpp	/^void Section::setTexture(Texture* tex)$/;"	f	class:Section	signature:(Texture* tex)
Section::setTexture	src/Graphics/Section.h	/^        void setTexture(Texture* tex);$/;"	p	class:Section	access:public	signature:(Texture* tex)
Section::texture	src/Graphics/Section.h	/^        const Texture* texture;$/;"	m	class:Section	access:private
Section::vb	src/Graphics/Section.h	/^        VertexBuffer vb;$/;"	m	class:Section	access:private
Section::~Section	src/Graphics/Section.cpp	/^Section::~Section()$/;"	f	class:Section	signature:()
Section::~Section	src/Graphics/Section.h	/^        ~Section();$/;"	p	class:Section	access:public	signature:()
Sin	src/Math/Trig.h	/^        static float Sin(float deg)                 { return std::sin(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
Sound	src/Audio/Sound.cpp	/^Sound::Sound()$/;"	f	class:Sound	signature:()
Sound	src/Audio/Sound.cpp	/^Sound::Sound(const std::string& filename)$/;"	f	class:Sound	signature:(const std::string& filename)
Sound	src/Audio/Sound.h	/^        Sound();$/;"	p	class:Sound	access:public	signature:()
Sound	src/Audio/Sound.h	/^        Sound(const std::string& filename);$/;"	p	class:Sound	access:public	signature:(const std::string& filename)
Sound	src/Audio/Sound.h	/^class Sound$/;"	c
Sound::Sound	src/Audio/Sound.cpp	/^Sound::Sound()$/;"	f	class:Sound	signature:()
Sound::Sound	src/Audio/Sound.cpp	/^Sound::Sound(const std::string& filename)$/;"	f	class:Sound	signature:(const std::string& filename)
Sound::Sound	src/Audio/Sound.h	/^        Sound();$/;"	p	class:Sound	access:public	signature:()
Sound::Sound	src/Audio/Sound.h	/^        Sound(const std::string& filename);$/;"	p	class:Sound	access:public	signature:(const std::string& filename)
Sound::__generateSource	src/Audio/Sound.cpp	/^void Sound::__generateSource()$/;"	f	class:Sound	signature:()
Sound::__generateSource	src/Audio/Sound.h	/^        void __generateSource();$/;"	p	class:Sound	access:protected	signature:()
Sound::__setSource	src/Audio/Sound.cpp	/^void Sound::__setSource(const unsigned int& bufferID)$/;"	f	class:Sound	signature:(const unsigned int& bufferID)
Sound::__setSource	src/Audio/Sound.h	/^        void __setSource(const unsigned int& bufferID);$/;"	p	class:Sound	access:protected	signature:(const unsigned int& bufferID)
Sound::getDuration	src/Audio/Sound.cpp	/^float Sound::getDuration()$/;"	f	class:Sound	signature:()
Sound::getDuration	src/Audio/Sound.h	/^        virtual float getDuration();$/;"	p	class:Sound	access:public	signature:()
Sound::getLoop	src/Audio/Sound.cpp	/^bool Sound::getLoop() const$/;"	f	class:Sound	signature:() const
Sound::getLoop	src/Audio/Sound.h	/^        virtual bool getLoop() const;$/;"	p	class:Sound	access:public	signature:() const
Sound::getSource	src/Audio/Sound.cpp	/^ALuint Sound::getSource()$/;"	f	class:Sound	signature:()
Sound::getSource	src/Audio/Sound.h	/^        ALuint getSource();$/;"	p	class:Sound	access:public	signature:()
Sound::getStatus	src/Audio/Sound.cpp	/^Status Sound::getStatus()$/;"	f	class:Sound	signature:()
Sound::getStatus	src/Audio/Sound.h	/^        Status getStatus();$/;"	p	class:Sound	access:public	signature:()
Sound::getTime	src/Audio/Sound.cpp	/^float Sound::getTime()$/;"	f	class:Sound	signature:()
Sound::getTime	src/Audio/Sound.h	/^        virtual float getTime();$/;"	p	class:Sound	access:public	signature:()
Sound::getVolume	src/Audio/Sound.cpp	/^float Sound::getVolume()$/;"	f	class:Sound	signature:()
Sound::getVolume	src/Audio/Sound.h	/^        float getVolume();$/;"	p	class:Sound	access:public	signature:()
Sound::isPaused	src/Audio/Sound.cpp	/^bool Sound::isPaused()$/;"	f	class:Sound	signature:()
Sound::isPaused	src/Audio/Sound.h	/^        bool isPaused();$/;"	p	class:Sound	access:public	signature:()
Sound::isPlaying	src/Audio/Sound.cpp	/^bool Sound::isPlaying()$/;"	f	class:Sound	signature:()
Sound::isPlaying	src/Audio/Sound.h	/^        bool isPlaying();$/;"	p	class:Sound	access:public	signature:()
Sound::loadSound	src/Audio/Sound.h	/^        virtual void loadSound(const std::string& filename) = 0;$/;"	p	class:Sound	access:public	signature:(const std::string& filename)
Sound::pause	src/Audio/Sound.cpp	/^void Sound::pause()$/;"	f	class:Sound	signature:()
Sound::pause	src/Audio/Sound.h	/^        void pause();$/;"	p	class:Sound	access:public	signature:()
Sound::play	src/Audio/Sound.cpp	/^void Sound::play()$/;"	f	class:Sound	signature:()
Sound::play	src/Audio/Sound.h	/^        virtual void play();$/;"	p	class:Sound	access:public	signature:()
Sound::setLoop	src/Audio/Sound.cpp	/^void Sound::setLoop(bool loop)$/;"	f	class:Sound	signature:(bool loop)
Sound::setLoop	src/Audio/Sound.h	/^        virtual void setLoop(bool loop);$/;"	p	class:Sound	access:public	signature:(bool loop)
Sound::setTime	src/Audio/Sound.cpp	/^void Sound::setTime(float time)$/;"	f	class:Sound	signature:(float time)
Sound::setTime	src/Audio/Sound.h	/^        void setTime(float time);$/;"	p	class:Sound	access:public	signature:(float time)
Sound::setVolume	src/Audio/Sound.cpp	/^void Sound::setVolume(float volume)$/;"	f	class:Sound	signature:(float volume)
Sound::setVolume	src/Audio/Sound.h	/^        void setVolume(float volume);$/;"	p	class:Sound	access:public	signature:(float volume)
Sound::source	src/Audio/Sound.h	/^        ALuint source;$/;"	m	class:Sound	access:protected
Sound::status	src/Audio/Sound.h	/^        Status status;$/;"	m	class:Sound	access:protected
Sound::stop	src/Audio/Sound.cpp	/^void Sound::stop()$/;"	f	class:Sound	signature:()
Sound::stop	src/Audio/Sound.h	/^        virtual void stop();$/;"	p	class:Sound	access:public	signature:()
Sound::~Sound	src/Audio/Sound.cpp	/^Sound::~Sound()$/;"	f	class:Sound	signature:()
Sound::~Sound	src/Audio/Sound.h	/^        ~Sound();$/;"	p	class:Sound	access:public	signature:()
SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::SoundBuffer()$/;"	f	class:SoundBuffer	signature:()
SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::SoundBuffer(const std::string& filename)$/;"	f	class:SoundBuffer	signature:(const std::string& filename)
SoundBuffer	src/Audio/SoundBuffer.h	/^        SoundBuffer();$/;"	p	class:SoundBuffer	access:public	signature:()
SoundBuffer	src/Audio/SoundBuffer.h	/^        SoundBuffer(const std::string& filename);$/;"	p	class:SoundBuffer	access:public	signature:(const std::string& filename)
SoundBuffer	src/Audio/SoundBuffer.h	/^class SoundBuffer : public Buffer$/;"	c	inherits:Buffer
SoundBuffer::SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::SoundBuffer()$/;"	f	class:SoundBuffer	signature:()
SoundBuffer::SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::SoundBuffer(const std::string& filename)$/;"	f	class:SoundBuffer	signature:(const std::string& filename)
SoundBuffer::SoundBuffer	src/Audio/SoundBuffer.h	/^        SoundBuffer();$/;"	p	class:SoundBuffer	access:public	signature:()
SoundBuffer::SoundBuffer	src/Audio/SoundBuffer.h	/^        SoundBuffer(const std::string& filename);$/;"	p	class:SoundBuffer	access:public	signature:(const std::string& filename)
SoundBuffer::buffer	src/Audio/SoundBuffer.h	/^        unsigned int buffer;$/;"	m	class:SoundBuffer	access:private
SoundBuffer::channelCount	src/Audio/SoundBuffer.h	/^        unsigned int channelCount;$/;"	m	class:SoundBuffer	access:private
SoundBuffer::getBufferID	src/Audio/SoundBuffer.cpp	/^const unsigned int SoundBuffer::getBufferID() const$/;"	f	class:SoundBuffer	signature:() const
SoundBuffer::getBufferID	src/Audio/SoundBuffer.h	/^        const unsigned int getBufferID() const;$/;"	p	class:SoundBuffer	access:public	signature:() const
SoundBuffer::getSampleCount	src/Audio/SoundBuffer.cpp	/^const std::size_t SoundBuffer::getSampleCount() const$/;"	f	class:SoundBuffer	signature:() const
SoundBuffer::getSampleCount	src/Audio/SoundBuffer.h	/^        const std::size_t getSampleCount() const;$/;"	p	class:SoundBuffer	access:public	signature:() const
SoundBuffer::loadFromFile	src/Audio/SoundBuffer.cpp	/^void SoundBuffer::loadFromFile(const std::string& filename)$/;"	f	class:SoundBuffer	signature:(const std::string& filename)
SoundBuffer::loadFromFile	src/Audio/SoundBuffer.h	/^        void loadFromFile(const std::string& filename);$/;"	p	class:SoundBuffer	access:public	signature:(const std::string& filename)
SoundBuffer::sampleCount	src/Audio/SoundBuffer.h	/^        std::size_t  sampleCount;$/;"	m	class:SoundBuffer	access:private
SoundBuffer::sampleRate	src/Audio/SoundBuffer.h	/^        unsigned int sampleRate;$/;"	m	class:SoundBuffer	access:private
SoundBuffer::update	src/Audio/SoundBuffer.cpp	/^void SoundBuffer::update()$/;"	f	class:SoundBuffer	signature:()
SoundBuffer::update	src/Audio/SoundBuffer.h	/^        void update();$/;"	p	class:SoundBuffer	access:public	signature:()
SoundBuffer::~SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::~SoundBuffer()$/;"	f	class:SoundBuffer	signature:()
SoundBuffer::~SoundBuffer	src/Audio/SoundBuffer.h	/^        ~SoundBuffer();$/;"	p	class:SoundBuffer	access:public	signature:()
SoundCache	src/System/ResourceCache.h	/^class SoundCache : public ResourceCache<Sound>$/;"	c	inherits:ResourceCache
SoundCache::addMusic	src/System/ResourceCache.cpp	/^boost::shared_ptr<Sound> SoundCache::addMusic(const std::string& identifier, $/;"	f	class:SoundCache	signature:(const std::string& identifier, const std::string& filename)
SoundCache::addMusic	src/System/ResourceCache.h	/^        boost::shared_ptr<Sound> addMusic(const std::string& identifier, const std::string& filename);$/;"	p	class:SoundCache	access:public	signature:(const std::string& identifier, const std::string& filename)
SoundCache::addSample	src/System/ResourceCache.cpp	/^boost::shared_ptr<Sound> SoundCache::addSample(const std::string& identifier, $/;"	f	class:SoundCache	signature:(const std::string& identifier, const std::string& filename)
SoundCache::addSample	src/System/ResourceCache.h	/^        boost::shared_ptr<Sound> addSample(const std::string& identifier, const std::string& filename);$/;"	p	class:SoundCache	access:public	signature:(const std::string& identifier, const std::string& filename)
SoundChunk	src/Audio/Music.h	/^        struct SoundChunk$/;"	s	class:Music	access:private
SoundLoader	src/Audio/SoundLoader.h	/^class SoundLoader$/;"	c
SoundLoader::getFormat	src/Audio/SoundLoader.cpp	/^ALenum SoundLoader::getFormat(unsigned int channels)$/;"	f	class:SoundLoader	signature:(unsigned int channels)
SoundLoader::getFormat	src/Audio/SoundLoader.h	/^        static ALenum getFormat(unsigned int channels);$/;"	p	class:SoundLoader	access:public	signature:(unsigned int channels)
SoundPtr	src/System/ResourcePtr.h	/^typedef boost::shared_ptr<Sound> SoundPtr;$/;"	t
SoundStream	src/Audio/SoundStream.h	/^class SoundStream$/;"	c
SoundStream::streamData	src/Audio/SoundStream.cpp	/^void GLFWCALL SoundStream::streamData(void* arg)$/;"	f	class:SoundStream	signature:(void* arg)
SoundStream::streamData	src/Audio/SoundStream.h	/^        static void streamData(void* arg);$/;"	p	class:SoundStream	access:public	signature:(void* arg)
Sqrt	src/Math/Trig.h	/^        static float Sqrt(float value)                  { return std::sqrt(value);                  }$/;"	f	class:Trig	access:public	signature:(float value)
StaticBuffer	src/Graphics/VertexBuffer.h	/^        StaticBuffer,  \/\/ Set data once, render that data lots$/;"	e	enum:BufferType::__anon1
Status	src/Audio/Sound.h	/^enum Status$/;"	g
Stopped	src/Audio/Sound.h	/^    Stopped,$/;"	e	enum:Status
StreamBuffer	src/Graphics/VertexBuffer.h	/^        StreamBuffer,  \/\/ Write data a lot (like once per frame)$/;"	e	enum:BufferType::__anon1
TV	src/Graphics/VertexBuffer.h	/^        TV,$/;"	e	enum:BufferLayout::__anon3
TVC	src/Graphics/VertexBuffer.h	/^        TVC,$/;"	e	enum:BufferLayout::__anon3
TWO_PI	src/Math/Math.h	/^    const double TWO_PI = (PI * 2.0);$/;"	m	namespace:Math
Tan	src/Math/Trig.h	/^        static float Tan(float deg)                 { return std::tan(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
TestState	test/TestState.cpp	/^TestState::TestState()$/;"	f	class:TestState	signature:()
TestState	test/TestState.h	/^        TestState();$/;"	p	class:TestState	access:public	signature:()
TestState	test/TestState.h	/^class TestState : public CoreState$/;"	c	inherits:CoreState
TestState::TestState	test/TestState.cpp	/^TestState::TestState()$/;"	f	class:TestState	signature:()
TestState::TestState	test/TestState.h	/^        TestState();$/;"	p	class:TestState	access:public	signature:()
TestState::background	test/TestState.h	/^        TexturePtr background;$/;"	m	class:TestState	access:private
TestState::deinit	test/TestState.cpp	/^void TestState::deinit()$/;"	f	class:TestState	signature:()
TestState::deinit	test/TestState.h	/^        void deinit();$/;"	p	class:TestState	access:public	signature:()
TestState::draw	test/TestState.cpp	/^void TestState::draw()$/;"	f	class:TestState	signature:()
TestState::draw	test/TestState.h	/^        void draw();$/;"	p	class:TestState	access:public	signature:()
TestState::font	test/TestState.h	/^        FontPtr font;$/;"	m	class:TestState	access:private
TestState::handleInput	test/TestState.cpp	/^void TestState::handleInput(Input& input, int value, int action)$/;"	f	class:TestState	signature:(Input& input, int value, int action)
TestState::handleInput	test/TestState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:TestState	access:public	signature:(Input& input, int value, int action)
TestState::init	test/TestState.cpp	/^void TestState::init(ResourceManager& resources)$/;"	f	class:TestState	signature:(ResourceManager& resources)
TestState::init	test/TestState.h	/^        void init(ResourceManager& resources);$/;"	p	class:TestState	access:public	signature:(ResourceManager& resources)
TestState::line	test/TestState.h	/^        VertexBuffer* line;$/;"	m	class:TestState	access:private
TestState::logic	test/TestState.cpp	/^void TestState::logic(float timeStep)$/;"	f	class:TestState	signature:(float timeStep)
TestState::logic	test/TestState.h	/^        void logic(float timeStep);$/;"	p	class:TestState	access:public	signature:(float timeStep)
TestState::menu	test/TestState.h	/^        Menu* menu;$/;"	m	class:TestState	access:private
TestState::sound	test/TestState.h	/^        SoundPtr sound;$/;"	m	class:TestState	access:private
TestState::text	test/TestState.h	/^        Text text;$/;"	m	class:TestState	access:private
TestState::text2	test/TestState.h	/^        Text text2;$/;"	m	class:TestState	access:private
TestState::vb	test/TestState.h	/^        VertexBuffer* vb;$/;"	m	class:TestState	access:private
TestState::~TestState	test/TestState.cpp	/^TestState::~TestState()$/;"	f	class:TestState	signature:()
TestState::~TestState	test/TestState.h	/^        ~TestState();$/;"	p	class:TestState	access:public	signature:()
TexCoord	src/Graphics/VertexBuffer.h	/^        TexCoord,$/;"	e	enum:BufferLayout::__anon3
Text	src/Graphics/Text.cpp	/^Text::Text()$/;"	f	class:Text	signature:()
Text	src/Graphics/Text.cpp	/^Text::Text(const FontPtr& f)$/;"	f	class:Text	signature:(const FontPtr& f)
Text	src/Graphics/Text.cpp	/^Text::Text(const FontPtr& f, const std::string& t)$/;"	f	class:Text	signature:(const FontPtr& f, const std::string& t)
Text	src/Graphics/Text.h	/^        Text();$/;"	p	class:Text	access:public	signature:()
Text	src/Graphics/Text.h	/^        Text(const FontPtr& f);$/;"	p	class:Text	access:public	signature:(const FontPtr& f)
Text	src/Graphics/Text.h	/^        Text(const FontPtr& f, const std::string& t);$/;"	p	class:Text	access:public	signature:(const FontPtr& f, const std::string& t)
Text	src/Graphics/Text.h	/^class Text : public Drawable$/;"	c	inherits:Drawable
Text::Text	src/Graphics/Text.cpp	/^Text::Text()$/;"	f	class:Text	signature:()
Text::Text	src/Graphics/Text.cpp	/^Text::Text(const FontPtr& f)$/;"	f	class:Text	signature:(const FontPtr& f)
Text::Text	src/Graphics/Text.cpp	/^Text::Text(const FontPtr& f, const std::string& t)$/;"	f	class:Text	signature:(const FontPtr& f, const std::string& t)
Text::Text	src/Graphics/Text.h	/^        Text();$/;"	p	class:Text	access:public	signature:()
Text::Text	src/Graphics/Text.h	/^        Text(const FontPtr& f);$/;"	p	class:Text	access:public	signature:(const FontPtr& f)
Text::Text	src/Graphics/Text.h	/^        Text(const FontPtr& f, const std::string& t);$/;"	p	class:Text	access:public	signature:(const FontPtr& f, const std::string& t)
Text::draw	src/Graphics/Text.cpp	/^void Text::draw(float x, float y) const$/;"	f	class:Text	signature:(float x, float y) const
Text::draw	src/Graphics/Text.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Text	access:public	signature:(float x = 0.0f, float y = 0.0f) const
Text::font	src/Graphics/Text.h	/^        FontPtr font;$/;"	m	class:Text	access:private
Text::getLength	src/Graphics/Text.cpp	/^float Text::getLength() const$/;"	f	class:Text	signature:() const
Text::getLength	src/Graphics/Text.h	/^        float getLength() const;$/;"	p	class:Text	access:public	signature:() const
Text::getString	src/Graphics/Text.cpp	/^const std::string& Text::getString() const$/;"	f	class:Text	signature:() const
Text::getString	src/Graphics/Text.h	/^        const std::string& getString() const;$/;"	p	class:Text	access:public	signature:() const
Text::length	src/Graphics/Text.h	/^        float length;$/;"	m	class:Text	access:private
Text::setFont	src/Graphics/Text.cpp	/^void Text::setFont(const FontPtr& f)$/;"	f	class:Text	signature:(const FontPtr& f)
Text::setFont	src/Graphics/Text.h	/^        void setFont(const FontPtr& f);$/;"	p	class:Text	access:public	signature:(const FontPtr& f)
Text::setText	src/Graphics/Text.cpp	/^void Text::setText(const std::string& t)$/;"	f	class:Text	signature:(const std::string& t)
Text::setText	src/Graphics/Text.h	/^        void setText(const std::string& t);$/;"	p	class:Text	access:public	signature:(const std::string& t)
Text::text	src/Graphics/Text.h	/^        std::string text;$/;"	m	class:Text	access:private
Text::~Text	src/Graphics/Text.cpp	/^Text::~Text()$/;"	f	class:Text	signature:()
Text::~Text	src/Graphics/Text.h	/^        ~Text();$/;"	p	class:Text	access:public	signature:()
Texture	src/Graphics/Texture.cpp	/^Texture::Texture()$/;"	f	class:Texture	signature:()
Texture	src/Graphics/Texture.cpp	/^Texture::Texture(const std::string& Filename)$/;"	f	class:Texture	signature:(const std::string& Filename)
Texture	src/Graphics/Texture.cpp	/^Texture::Texture(const unsigned char* data, int size)$/;"	f	class:Texture	signature:(const unsigned char* data, int size)
Texture	src/Graphics/Texture.h	/^        Texture();$/;"	p	class:Texture	access:public	signature:()
Texture	src/Graphics/Texture.h	/^        Texture(const std::string& Filename);$/;"	p	class:Texture	access:public	signature:(const std::string& Filename)
Texture	src/Graphics/Texture.h	/^        Texture(const unsigned char* data, int size);$/;"	p	class:Texture	access:public	signature:(const unsigned char* data, int size)
Texture	src/Graphics/Texture.h	/^class Texture : public Drawable$/;"	c	inherits:Drawable
Texture::Texture	src/Graphics/Texture.cpp	/^Texture::Texture()$/;"	f	class:Texture	signature:()
Texture::Texture	src/Graphics/Texture.cpp	/^Texture::Texture(const std::string& Filename)$/;"	f	class:Texture	signature:(const std::string& Filename)
Texture::Texture	src/Graphics/Texture.cpp	/^Texture::Texture(const unsigned char* data, int size)$/;"	f	class:Texture	signature:(const unsigned char* data, int size)
Texture::Texture	src/Graphics/Texture.h	/^        Texture();$/;"	p	class:Texture	access:public	signature:()
Texture::Texture	src/Graphics/Texture.h	/^        Texture(const std::string& Filename);$/;"	p	class:Texture	access:public	signature:(const std::string& Filename)
Texture::Texture	src/Graphics/Texture.h	/^        Texture(const unsigned char* data, int size);$/;"	p	class:Texture	access:public	signature:(const unsigned char* data, int size)
Texture::__texturize	src/Graphics/Texture.cpp	/^bool Texture::__texturize(unsigned char* Buffer)$/;"	f	class:Texture	signature:(unsigned char* Buffer)
Texture::__texturize	src/Graphics/Texture.h	/^        bool __texturize(unsigned char* Buffer);$/;"	p	class:Texture	access:protected	signature:(unsigned char* Buffer)
Texture::bindTexture	src/Graphics/Texture.cpp	/^void Texture::bindTexture() const$/;"	f	class:Texture	signature:() const
Texture::bindTexture	src/Graphics/Texture.h	/^        void bindTexture() const;$/;"	p	class:Texture	access:public	signature:() const
Texture::draw	src/Graphics/Texture.cpp	/^void Texture::draw(float x, float y) const$/;"	f	class:Texture	signature:(float x, float y) const
Texture::draw	src/Graphics/Texture.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Texture	access:public	signature:(float x = 0.0f, float y = 0.0f) const
Texture::getHeight	src/Graphics/Texture.cpp	/^const int Texture::getHeight() const$/;"	f	class:Texture	signature:() const
Texture::getHeight	src/Graphics/Texture.h	/^        const int getHeight() const;$/;"	p	class:Texture	access:public	signature:() const
Texture::getTexture	src/Graphics/Texture.cpp	/^const GLuint Texture::getTexture() const$/;"	f	class:Texture	signature:() const
Texture::getTexture	src/Graphics/Texture.h	/^        const GLuint getTexture() const;$/;"	p	class:Texture	access:public	signature:() const
Texture::getWidth	src/Graphics/Texture.cpp	/^const int Texture::getWidth() const$/;"	f	class:Texture	signature:() const
Texture::getWidth	src/Graphics/Texture.h	/^        const int getWidth() const;$/;"	p	class:Texture	access:public	signature:() const
Texture::height	src/Graphics/Texture.h	/^        int height;$/;"	m	class:Texture	access:protected
Texture::killTexture	src/Graphics/Texture.cpp	/^void Texture::killTexture()$/;"	f	class:Texture	signature:()
Texture::killTexture	src/Graphics/Texture.h	/^        void killTexture();$/;"	p	class:Texture	access:public	signature:()
Texture::loadImage	src/Graphics/Texture.cpp	/^bool Texture::loadImage(const std::string& Filename)$/;"	f	class:Texture	signature:(const std::string& Filename)
Texture::loadImage	src/Graphics/Texture.h	/^        bool loadImage(const std::string& Filename);$/;"	p	class:Texture	access:public	signature:(const std::string& Filename)
Texture::loadImageMemory	src/Graphics/Texture.cpp	/^bool Texture::loadImageMemory(const unsigned char* data, int size)$/;"	f	class:Texture	signature:(const unsigned char* data, int size)
Texture::loadImageMemory	src/Graphics/Texture.h	/^        bool loadImageMemory(const unsigned char* data, int size);$/;"	p	class:Texture	access:public	signature:(const unsigned char* data, int size)
Texture::loaded	src/Graphics/Texture.h	/^        bool loaded;$/;"	m	class:Texture	access:protected
Texture::mode	src/Graphics/Texture.h	/^        int mode;$/;"	m	class:Texture	access:protected
Texture::setTexture	src/Graphics/Texture.cpp	/^void Texture::setTexture(GLuint tex, int w, int h)$/;"	f	class:Texture	signature:(GLuint tex, int w, int h)
Texture::setTexture	src/Graphics/Texture.h	/^        void setTexture(GLuint tex, int w = 0, int h = 0);$/;"	p	class:Texture	access:public	signature:(GLuint tex, int w = 0, int h = 0)
Texture::texture	src/Graphics/Texture.h	/^        GLuint texture;$/;"	m	class:Texture	access:protected
Texture::width	src/Graphics/Texture.h	/^        int width;$/;"	m	class:Texture	access:protected
Texture::~Texture	src/Graphics/Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
Texture::~Texture	src/Graphics/Texture.h	/^        virtual ~Texture();$/;"	p	class:Texture	access:public	signature:()
TextureCache	src/System/ResourceCache.h	/^class TextureCache : public ResourceCache<Texture>$/;"	c	inherits:ResourceCache
TextureCache::add	src/System/ResourceCache.cpp	/^boost::shared_ptr<Texture> TextureCache::add(const std::string& identifier, const std::string& filename)$/;"	f	class:TextureCache	signature:(const std::string& identifier, const std::string& filename)
TextureCache::add	src/System/ResourceCache.h	/^        boost::shared_ptr<Texture> add(const std::string& identifier, const std::string& filename);$/;"	p	class:TextureCache	access:public	signature:(const std::string& identifier, const std::string& filename)
TexturePtr	src/System/ResourcePtr.h	/^typedef boost::shared_ptr<Texture> TexturePtr;$/;"	t
Timer	src/Utils/Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer	src/Utils/Timer.h	/^        Timer();$/;"	p	class:Timer	access:public	signature:()
Timer	src/Utils/Timer.h	/^class Timer$/;"	c
Timer::Timer	src/Utils/Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::Timer	src/Utils/Timer.h	/^        Timer();$/;"	p	class:Timer	access:public	signature:()
Timer::getTime	src/Utils/Timer.cpp	/^float Timer::getTime()$/;"	f	class:Timer	signature:()
Timer::getTime	src/Utils/Timer.h	/^        float getTime();$/;"	p	class:Timer	access:public	signature:()
Timer::isPaused	src/Utils/Timer.cpp	/^bool Timer::isPaused()$/;"	f	class:Timer	signature:()
Timer::isPaused	src/Utils/Timer.h	/^        bool isPaused();$/;"	p	class:Timer	access:public	signature:()
Timer::isStarted	src/Utils/Timer.cpp	/^bool Timer::isStarted()$/;"	f	class:Timer	signature:()
Timer::isStarted	src/Utils/Timer.h	/^        bool isStarted();$/;"	p	class:Timer	access:public	signature:()
Timer::offsetTime	src/Utils/Timer.cpp	/^void Timer::offsetTime(float time)$/;"	f	class:Timer	signature:(float time)
Timer::offsetTime	src/Utils/Timer.h	/^        void offsetTime(float time);$/;"	p	class:Timer	access:public	signature:(float time)
Timer::pause	src/Utils/Timer.cpp	/^void Timer::pause()$/;"	f	class:Timer	signature:()
Timer::pause	src/Utils/Timer.h	/^        void pause();$/;"	p	class:Timer	access:public	signature:()
Timer::pauseTicks	src/Utils/Timer.h	/^        float pauseTicks;$/;"	m	class:Timer	access:private
Timer::paused	src/Utils/Timer.h	/^        bool paused;$/;"	m	class:Timer	access:private
Timer::start	src/Utils/Timer.cpp	/^void Timer::start()$/;"	f	class:Timer	signature:()
Timer::start	src/Utils/Timer.h	/^        void start();$/;"	p	class:Timer	access:public	signature:()
Timer::startTicks	src/Utils/Timer.h	/^        float startTicks;$/;"	m	class:Timer	access:private
Timer::started	src/Utils/Timer.h	/^        bool started;$/;"	m	class:Timer	access:private
Timer::stop	src/Utils/Timer.cpp	/^void Timer::stop()$/;"	f	class:Timer	signature:()
Timer::stop	src/Utils/Timer.h	/^        void stop();$/;"	p	class:Timer	access:public	signature:()
Timer::unpause	src/Utils/Timer.cpp	/^void Timer::unpause()$/;"	f	class:Timer	signature:()
Timer::unpause	src/Utils/Timer.h	/^        void unpause();$/;"	p	class:Timer	access:public	signature:()
TriangleFan	src/Graphics/VertexBuffer.h	/^        TriangleFan,$/;"	e	enum:PrimitiveType::__anon2
TriangleStrip	src/Graphics/VertexBuffer.h	/^        TriangleStrip,$/;"	e	enum:PrimitiveType::__anon2
Triangles	src/Graphics/VertexBuffer.h	/^        Triangles,$/;"	e	enum:PrimitiveType::__anon2
Trig	src/Math/Trig.h	/^class Trig$/;"	c
Trig::ArcCos	src/Math/Trig.h	/^        static float ArcCos(float value)                { return RadToDeg(std::acos(value));        }$/;"	f	class:Trig	access:public	signature:(float value)
Trig::ArcSin	src/Math/Trig.h	/^        static float ArcSin(float value)                { return RadToDeg(std::asin(value));        }$/;"	f	class:Trig	access:public	signature:(float value)
Trig::ArcTan2	src/Math/Trig.h	/^        static float ArcTan2(float valY, float valX)    { return RadToDeg(std::atan2(valY, valX));  }$/;"	f	class:Trig	access:public	signature:(float valY, float valX)
Trig::Cos	src/Math/Trig.h	/^        static float Cos(float deg)                 { return std::cos(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
Trig::DegToRad	src/Math/Trig.h	/^        static float DegToRad(float deg)                { return 3.14159265f \/ 180 * deg;           }$/;"	f	class:Trig	access:public	signature:(float deg)
Trig::Pi	src/Math/Trig.h	/^        static float Pi()                               { return 3.14159265f;                       }$/;"	f	class:Trig	access:public	signature:()
Trig::RadToDeg	src/Math/Trig.h	/^        static float RadToDeg(float rad)                { return 180 \/ 3.14159265f * rad;           }$/;"	f	class:Trig	access:public	signature:(float rad)
Trig::Sin	src/Math/Trig.h	/^        static float Sin(float deg)                 { return std::sin(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
Trig::Sqrt	src/Math/Trig.h	/^        static float Sqrt(float value)                  { return std::sqrt(value);                  }$/;"	f	class:Trig	access:public	signature:(float value)
Trig::Tan	src/Math/Trig.h	/^        static float Tan(float deg)                 { return std::tan(DegToRad(deg));           }$/;"	f	class:Trig	access:public	signature:(float deg)
UPPER_MASK	src/Math/Random.h	/^        static const unsigned long UPPER_MASK = 0x80000000UL;$/;"	m	class:Random	access:private
VC	src/Graphics/VertexBuffer.h	/^        VC,$/;"	e	enum:BufferLayout::__anon3
Vector2	src/Math/Vector2.h	/^        Vector2()$/;"	f	class:Vector2	access:public	signature:()
Vector2	src/Math/Vector2.h	/^        Vector2(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2	src/Math/Vector2.h	/^        Vector2(float X, float Y)$/;"	f	class:Vector2	access:public	signature:(float X, float Y)
Vector2	src/Math/Vector2.h	/^class Vector2$/;"	c
Vector2::Vector2	src/Math/Vector2.h	/^        Vector2()$/;"	f	class:Vector2	access:public	signature:()
Vector2::Vector2	src/Math/Vector2.h	/^        Vector2(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::Vector2	src/Math/Vector2.h	/^        Vector2(float X, float Y)$/;"	f	class:Vector2	access:public	signature:(float X, float Y)
Vector2::dotProduct	src/Math/Vector2.h	/^        float dotProduct(Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(Vector2<T>& v)
Vector2::extend	src/Math/Vector2.h	/^        void extend(float newMagnitude)$/;"	f	class:Vector2	access:public	signature:(float newMagnitude)
Vector2::magnitude	src/Math/Vector2.h	/^        float magnitude()$/;"	f	class:Vector2	access:public	signature:()
Vector2::normalize	src/Math/Vector2.h	/^        Vector2<T> normalize()$/;"	f	class:Vector2	access:public	signature:()
Vector2::operator !=	src/Math/Vector2.h	/^        bool operator!=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::operator *	src/Math/Vector2.h	/^        Vector2<T> operator*(T n) const$/;"	f	class:Vector2	access:public	signature:(T n) const
Vector2::operator *=	src/Math/Vector2.h	/^        Vector2<T> operator*=(T n)$/;"	f	class:Vector2	access:public	signature:(T n)
Vector2::operator +	src/Math/Vector2.h	/^        Vector2<T> operator+(const Vector2<T>& v) const$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v) const
Vector2::operator +=	src/Math/Vector2.h	/^        Vector2<T> operator+=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::operator -	src/Math/Vector2.h	/^        Vector2<T> operator-(const Vector2<T>& v) const$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v) const
Vector2::operator -=	src/Math/Vector2.h	/^        Vector2<T> operator-=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::operator /	src/Math/Vector2.h	/^        Vector2<T> operator\/(T n) const$/;"	f	class:Vector2	access:public	signature:(T n) const
Vector2::operator /=	src/Math/Vector2.h	/^        Vector2<T> operator\/=(T n)$/;"	f	class:Vector2	access:public	signature:(T n)
Vector2::operator ==	src/Math/Vector2.h	/^        bool operator==(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::set	src/Math/Vector2.h	/^        void set(T X, T Y)$/;"	f	class:Vector2	access:public	signature:(T X, T Y)
Vector2::set	src/Math/Vector2.h	/^        void set(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
Vector2::x	src/Math/Vector2.h	/^        T x;$/;"	m	class:Vector2	access:public
Vector2::y	src/Math/Vector2.h	/^        T y;$/;"	m	class:Vector2	access:public
Vector2f	src/Graphics/VertexBuffer.h	/^typedef Vector2<float> Vector2f;$/;"	t
Vector2f	src/Math/Vector2.h	/^typedef Vector2<float> Vector2f;$/;"	t
Vector2f	src/Memory/Buffer.h	/^typedef Vector2<float> Vector2f;$/;"	t
Vector2i	src/Math/Vector2.h	/^typedef Vector2<int> Vector2i;$/;"	t
VectorMem	test/Bullet/ParticleMem.cpp	/^VectorMem::VectorMem(int size)$/;"	f	class:VectorMem	signature:(int size)
VectorMem	test/Bullet/ParticleMem.h	/^        VectorMem(int size);$/;"	p	class:VectorMem	access:public	signature:(int size)
VectorMem	test/Bullet/ParticleMem.h	/^class VectorMem : public ParticleMem$/;"	c	inherits:ParticleMem
VectorMem::VectorMem	test/Bullet/ParticleMem.cpp	/^VectorMem::VectorMem(int size)$/;"	f	class:VectorMem	signature:(int size)
VectorMem::VectorMem	test/Bullet/ParticleMem.h	/^        VectorMem(int size);$/;"	p	class:VectorMem	access:public	signature:(int size)
VectorMem::add	test/Bullet/ParticleMem.cpp	/^void VectorMem::add(const ParticleProperties& p)$/;"	f	class:VectorMem	signature:(const ParticleProperties& p)
VectorMem::add	test/Bullet/ParticleMem.cpp	/^void VectorMem::add(const Vector2f& position, $/;"	f	class:VectorMem	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
VectorMem::add	test/Bullet/ParticleMem.h	/^        void add(const ParticleProperties& p);$/;"	p	class:VectorMem	access:public	signature:(const ParticleProperties& p)
VectorMem::add	test/Bullet/ParticleMem.h	/^        void add(const Vector2f& position, $/;"	p	class:VectorMem	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
VectorMem::allocateData	test/Bullet/ParticleMem.cpp	/^void VectorMem::allocateData(int size)$/;"	f	class:VectorMem	signature:(int size)
VectorMem::allocateData	test/Bullet/ParticleMem.h	/^        void allocateData(int size);$/;"	p	class:VectorMem	access:protected	signature:(int size)
VectorMem::allocateParticles	test/Bullet/ParticleMem.cpp	/^void VectorMem::allocateParticles()$/;"	f	class:VectorMem	signature:()
VectorMem::allocateParticles	test/Bullet/ParticleMem.h	/^        virtual void allocateParticles();$/;"	p	class:VectorMem	access:protected	signature:()
VectorMem::deadIndex	test/Bullet/ParticleMem.h	/^        int deadIndex;$/;"	m	class:VectorMem	access:protected
VectorMem::get	test/Bullet/ParticleMem.cpp	/^Particle& VectorMem::get(int index)$/;"	f	class:VectorMem	signature:(int index)
VectorMem::get	test/Bullet/ParticleMem.h	/^        Particle& get(int index);$/;"	p	class:VectorMem	access:public	signature:(int index)
VectorMem::remove	test/Bullet/ParticleMem.cpp	/^void VectorMem::remove(int index)$/;"	f	class:VectorMem	signature:(int index)
VectorMem::remove	test/Bullet/ParticleMem.h	/^        void remove(int index);$/;"	p	class:VectorMem	access:public	signature:(int index)
VectorMem::size	test/Bullet/ParticleMem.cpp	/^const int VectorMem::size() const$/;"	f	class:VectorMem	signature:() const
VectorMem::size	test/Bullet/ParticleMem.h	/^        const int size() const;$/;"	p	class:VectorMem	access:public	signature:() const
VectorMem::swap	test/Bullet/ParticleMem.cpp	/^void VectorMem::swap(int index1, int index2)$/;"	f	class:VectorMem	signature:(int index1, int index2)
VectorMem::swap	test/Bullet/ParticleMem.h	/^        void swap(int index1, int index2);$/;"	p	class:VectorMem	access:protected	signature:(int index1, int index2)
VectorMem::swapData	test/Bullet/ParticleMem.cpp	/^void VectorMem::swapData(int index1, int index2)$/;"	f	class:VectorMem	signature:(int index1, int index2)
VectorMem::swapData	test/Bullet/ParticleMem.h	/^        void swapData(int index1, int index2);$/;"	p	class:VectorMem	access:protected	signature:(int index1, int index2)
VectorMem::~VectorMem	test/Bullet/ParticleMem.cpp	/^VectorMem::~VectorMem()$/;"	f	class:VectorMem	signature:()
VectorMem::~VectorMem	test/Bullet/ParticleMem.h	/^        ~VectorMem();$/;"	p	class:VectorMem	access:public	signature:()
Vertex	src/Graphics/VertexBuffer.h	/^        Vertex,$/;"	e	enum:BufferLayout::__anon3
VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::VertexBuffer()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::VertexBuffer(int numVertices, int ptype, int bufferLayout, int type)$/;"	f	class:VertexBuffer	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer	src/Graphics/VertexBuffer.h	/^        VertexBuffer();$/;"	p	class:VertexBuffer	access:public	signature:()
VertexBuffer	src/Graphics/VertexBuffer.h	/^        VertexBuffer(int numVertices, int ptype, int bufferLayout, int type);$/;"	p	class:VertexBuffer	access:public	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer	src/Graphics/VertexBuffer.h	/^class VertexBuffer : public Buffer, public Drawable$/;"	c	inherits:Buffer,Drawable
VertexBuffer::Circle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Circle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v, float r, const Color& color)
VertexBuffer::Circle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Circle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x, float y, float r, const Color& color)
VertexBuffer::Circle	src/Graphics/VertexBuffer.h	/^        static void Circle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v, float r, const Color& color)
VertexBuffer::Circle	src/Graphics/VertexBuffer.h	/^        static void Circle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x, float y, float r, const Color& color)
VertexBuffer::Line	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Line(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
VertexBuffer::Line	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Line(VertexBuffer& b,$/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
VertexBuffer::Line	src/Graphics/VertexBuffer.h	/^        static void Line(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
VertexBuffer::Line	src/Graphics/VertexBuffer.h	/^        static void Line(VertexBuffer& b,$/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
VertexBuffer::Rectangle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Rectangle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
VertexBuffer::Rectangle	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::Rectangle(VertexBuffer& b, $/;"	f	class:VertexBuffer	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
VertexBuffer::Rectangle	src/Graphics/VertexBuffer.h	/^        static void Rectangle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, const Vector2f& v1, const Vector2f& v2, const Color& color)
VertexBuffer::Rectangle	src/Graphics/VertexBuffer.h	/^        static void Rectangle(VertexBuffer& b, $/;"	p	class:VertexBuffer	access:public	signature:(VertexBuffer& b, float x1, float y1, float x2, float y2, const Color& color)
VertexBuffer::VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::VertexBuffer()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer::VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::VertexBuffer(int numVertices, int ptype, int bufferLayout, int type)$/;"	f	class:VertexBuffer	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer::VertexBuffer	src/Graphics/VertexBuffer.h	/^        VertexBuffer();$/;"	p	class:VertexBuffer	access:public	signature:()
VertexBuffer::VertexBuffer	src/Graphics/VertexBuffer.h	/^        VertexBuffer(int numVertices, int ptype, int bufferLayout, int type);$/;"	p	class:VertexBuffer	access:public	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer::bufferNum	src/Graphics/VertexBuffer.h	/^        unsigned int bufferNum;$/;"	m	class:VertexBuffer	access:private
VertexBuffer::bufferType	src/Graphics/VertexBuffer.h	/^        int bufferType;$/;"	m	class:VertexBuffer	access:private
VertexBuffer::bytesNeeded	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::bytesNeeded[BufferLayout::MAX_LAYOUT] = $/;"	m	class:VertexBuffer	file:
VertexBuffer::bytesNeeded	src/Graphics/VertexBuffer.h	/^        static const int bytesNeeded[BufferLayout::MAX_LAYOUT];$/;"	m	class:VertexBuffer	access:private
VertexBuffer::draw	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::draw(float x, float y) const$/;"	f	class:VertexBuffer	signature:(float x, float y) const
VertexBuffer::draw	src/Graphics/VertexBuffer.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:VertexBuffer	access:public	signature:(float x = 0.0f, float y = 0.0f) const
VertexBuffer::drawShape	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::drawShape() const$/;"	f	class:VertexBuffer	signature:() const
VertexBuffer::drawShape	src/Graphics/VertexBuffer.h	/^        void drawShape() const;$/;"	p	class:VertexBuffer	access:public	signature:() const
VertexBuffer::drawTexture	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::drawTexture() const$/;"	f	class:VertexBuffer	signature:() const
VertexBuffer::drawTexture	src/Graphics/VertexBuffer.h	/^        void drawTexture() const;$/;"	p	class:VertexBuffer	access:public	signature:() const
VertexBuffer::gl_BufferType	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::gl_BufferType[BufferType::MAX_BUFFER] = $/;"	m	class:VertexBuffer	file:
VertexBuffer::gl_BufferType	src/Graphics/VertexBuffer.h	/^        static const int gl_BufferType[BufferType::MAX_BUFFER];$/;"	m	class:VertexBuffer	access:private
VertexBuffer::gl_PrimitiveType	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::gl_PrimitiveType[PrimitiveType::MAX_PRIMITIVE] = $/;"	m	class:VertexBuffer	file:
VertexBuffer::gl_PrimitiveType	src/Graphics/VertexBuffer.h	/^        static const int gl_PrimitiveType[PrimitiveType::MAX_PRIMITIVE];$/;"	m	class:VertexBuffer	access:private
VertexBuffer::init	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::init()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer::init	src/Graphics/VertexBuffer.h	/^        void init();$/;"	p	class:VertexBuffer	access:public	signature:()
VertexBuffer::primitiveType	src/Graphics/VertexBuffer.h	/^        int primitiveType;$/;"	m	class:VertexBuffer	access:private
VertexBuffer::printDebug	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::printDebug()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer::printDebug	src/Graphics/VertexBuffer.h	/^        void printDebug();$/;"	p	class:VertexBuffer	access:public	signature:()
VertexBuffer::set	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::set(int numVertices, int ptype, int bufferLayout, int type)$/;"	f	class:VertexBuffer	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer::set	src/Graphics/VertexBuffer.h	/^        void set(int numVertices, int ptype, int bufferLayout, int type);$/;"	p	class:VertexBuffer	access:public	signature:(int numVertices, int ptype, int bufferLayout, int type)
VertexBuffer::setDrawType	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::setDrawType(int t)$/;"	f	class:VertexBuffer	signature:(int t)
VertexBuffer::setDrawType	src/Graphics/VertexBuffer.h	/^        void setDrawType(int t);$/;"	p	class:VertexBuffer	access:public	signature:(int t)
VertexBuffer::updateBuffers	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::updateBuffers()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer::updateBuffers	src/Graphics/VertexBuffer.h	/^        void updateBuffers();$/;"	p	class:VertexBuffer	access:public	signature:()
VertexBuffer::vertexCount	src/Graphics/VertexBuffer.h	/^        int vertexCount;$/;"	m	class:VertexBuffer	access:private
VertexBuffer::~VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::~VertexBuffer()$/;"	f	class:VertexBuffer	signature:()
VertexBuffer::~VertexBuffer	src/Graphics/VertexBuffer.h	/^        ~VertexBuffer();$/;"	p	class:VertexBuffer	access:public	signature:()
WHITE	src/Graphics/Color.cpp	/^Color Color::WHITE = Color(1.0f, 1.0f, 1.0f, 1.0f);$/;"	m	class:Color	file:
WHITE	src/Graphics/Color.h	/^        static Color WHITE;$/;"	m	class:Color	access:public
Write	src/Utils/FileLoader.h	/^            Write,$/;"	e	enum:FileLoader::Mode
YCbCr_to_RGB_row	src/stblib/stb_image.c	/^static void YCbCr_to_RGB_row(uint8 *out, const uint8 *y, const uint8 *pcb, const uint8 *pcr, int count, int step)$/;"	f	file:	signature:(uint8 *out, const uint8 *y, const uint8 *pcb, const uint8 *pcr, int count, int step)
ZFAST_BITS	src/stblib/stb_image.c	1684;"	d	file:
ZFAST_MASK	src/stblib/stb_image.c	1685;"	d	file:
_BinaryHeap_h_	src/Utils/BinaryHeap.h	2;"	d
_Buffer_h_	src/Memory/Buffer.h	2;"	d
_BulletEmitter_h_	test/Bullet/BulletEmitter.h	2;"	d
_Bullet_h_	test/Bullet/Bullet.h	2;"	d
_Burst_h_	test/Bullet/Burst.h	2;"	d
_CRT_SECURE_NO_WARNINGS	src/stblib/stb_image.h	127;"	d
_Color_h_	src/Graphics/Color.h	2;"	d
_CoreRegistry_h_	src/Core/CoreRegistry.h	2;"	d
_CoreState_h_	src/Core/CoreState.h	2;"	d
_Core_h_	src/Core/Core.h	2;"	d
_Drawable_h_	src/Graphics/Drawable.h	2;"	d
_FileLoader_h_	src/Utils/FileLoader.h	2;"	d
_FontLoader_h_	src/Graphics/FontLoader.h	2;"	d
_Font_h_	src/Graphics/Font.h	2;"	d
_GameState_h_	test/GameState.h	2;"	d
_ImageLoader_h_	src/Graphics/ImageLoader.h	2;"	d
_Ini_h_	src/Utils/Ini.h	2;"	d
_Input_h_	src/System/Input.h	2;"	d
_Listener_h_	src/Audio/Listener.h	2;"	d
_Log_h_	src/System/Log.h	2;"	d
_Math_h_	src/Math/Math.h	2;"	d
_Menu_h_	test/Menu.h	2;"	d
_MusicState_h_	test/MusicState.h	2;"	d
_Music_h_	src/Audio/Music.h	2;"	d
_ParticleEmitter_h_	test/Bullet/ParticleEmitter.h	2;"	d
_ParticleMem_h_	test/Bullet/ParticleMem.h	2;"	d
_Particle_h_	test/Bullet/Particle.h	2;"	d
_PatternState_h_	test/PatternState.h	2;"	d
_Random_h_	src/Math/Random.h	2;"	d
_Rect_h_	src/Math/Rect.h	2;"	d
_Renderer_h_	src/Graphics/Renderer.h	2;"	d
_ResourceCache_h_	src/System/ResourceCache.h	2;"	d
_ResourceManager_h_	src/System/ResourceManager.h	2;"	d
_Resources_h_	src/System/ResourcePtr.h	2;"	d
_Sample_h_	src/Audio/Sample.h	2;"	d
_Section_h_	src/Graphics/Section.h	2;"	d
_SoundBuffer_h_	src/Audio/SoundBuffer.h	2;"	d
_SoundLoader_h_	src/Audio/SoundLoader.h	2;"	d
_SoundStream_h_	src/Audio/SoundStream.h	2;"	d
_Sound_h_	src/Audio/Sound.h	2;"	d
_StringUtils_h_	src/Utils/StringUtils.h	2;"	d
_TestState_h_	test/TestState.h	2;"	d
_Text_h_	src/Graphics/Text.h	2;"	d
_Texture_h_	src/Graphics/Texture.h	2;"	d
_Timer_h_	src/Utils/Timer.h	2;"	d
_Trigonometry_h_	src/Math/Trig.h	2;"	d
_Vector2_h_	src/Math/Vector2.h	2;"	d
_VertexBuffer_h_	src/Graphics/VertexBuffer.h	2;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	src/stblib/stb_truetype.h	330;"	d
__anon11::hs	src/stblib/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11	file:	access:public
__anon11::line0	src/stblib/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon11	file:	access:public
__anon11::line1	src/stblib/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon11	file:	access:public
__anon11::resample	src/stblib/stb_image.c	/^   resample_row_func resample;$/;"	m	struct:__anon11	file:	access:public
__anon11::vs	src/stblib/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11	file:	access:public
__anon11::w_lores	src/stblib/stb_image.c	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon11	file:	access:public
__anon11::ypos	src/stblib/stb_image.c	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon11	file:	access:public
__anon11::ystep	src/stblib/stb_image.c	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon11	file:	access:public
__anon12::fast	src/stblib/stb_image.c	/^   uint16 fast[1 << ZFAST_BITS];$/;"	m	struct:__anon12	file:	access:public
__anon12::firstcode	src/stblib/stb_image.c	/^   uint16 firstcode[16];$/;"	m	struct:__anon12	file:	access:public
__anon12::firstsymbol	src/stblib/stb_image.c	/^   uint16 firstsymbol[16];$/;"	m	struct:__anon12	file:	access:public
__anon12::maxcode	src/stblib/stb_image.c	/^   int maxcode[17];$/;"	m	struct:__anon12	file:	access:public
__anon12::size	src/stblib/stb_image.c	/^   uint8  size[288];$/;"	m	struct:__anon12	file:	access:public
__anon12::value	src/stblib/stb_image.c	/^   uint16 value[288]; $/;"	m	struct:__anon12	file:	access:public
__anon13::code_buffer	src/stblib/stb_image.c	/^   uint32 code_buffer;$/;"	m	struct:__anon13	file:	access:public
__anon13::num_bits	src/stblib/stb_image.c	/^   int num_bits;$/;"	m	struct:__anon13	file:	access:public
__anon13::z_distance	src/stblib/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon13	file:	access:public
__anon13::z_expandable	src/stblib/stb_image.c	/^   int   z_expandable;$/;"	m	struct:__anon13	file:	access:public
__anon13::z_length	src/stblib/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon13	file:	access:public
__anon13::zbuffer	src/stblib/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13	file:	access:public
__anon13::zbuffer_end	src/stblib/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13	file:	access:public
__anon13::zout	src/stblib/stb_image.c	/^   char *zout;$/;"	m	struct:__anon13	file:	access:public
__anon13::zout_end	src/stblib/stb_image.c	/^   char *zout_end;$/;"	m	struct:__anon13	file:	access:public
__anon13::zout_start	src/stblib/stb_image.c	/^   char *zout_start;$/;"	m	struct:__anon13	file:	access:public
__anon14::length	src/stblib/stb_image.c	/^   uint32 length;$/;"	m	struct:__anon14	file:	access:public
__anon14::type	src/stblib/stb_image.c	/^   uint32 type;$/;"	m	struct:__anon14	file:	access:public
__anon15::expanded	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
__anon15::idata	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
__anon15::out	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
__anon15::s	src/stblib/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon15	file:	access:public
__anon17::channel	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
__anon17::size	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
__anon17::type	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
__anon18::x0	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
__anon18::x1	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
__anon18::xadvance	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
__anon18::xoff	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
__anon18::y0	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
__anon18::y1	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
__anon18::yoff	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
__anon19::s0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
__anon19::s1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
__anon19::t0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
__anon19::t1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
__anon19::x0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
__anon19::x1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
__anon19::y0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
__anon19::y1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
__anon20::data	src/stblib/stb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:__anon20	access:public
__anon20::fontstart	src/stblib/stb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:__anon20	access:public
__anon20::glyf	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::head	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::hhea	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::hmtx	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::indexToLocFormat	src/stblib/stb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:__anon20	access:public
__anon20::index_map	src/stblib/stb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:__anon20	access:public
__anon20::kern	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::loca	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
__anon20::numGlyphs	src/stblib/stb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:__anon20	access:public
__anon20::userdata	src/stblib/stb_truetype.h	/^   void           * userdata;$/;"	m	struct:__anon20	access:public
__anon22::cx	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
__anon22::cy	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
__anon22::padding	src/stblib/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon22	access:public
__anon22::type	src/stblib/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon22	access:public
__anon22::x	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
__anon22::y	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
__anon23::h	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
__anon23::pixels	src/stblib/stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon23	access:public
__anon23::stride	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
__anon23::w	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
__anon30::x	src/stblib/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon30	access:public
__anon30::y	src/stblib/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon30	access:public
__anon5::eof	src/stblib/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon5	access:public
__anon5::read	src/stblib/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon5	access:public
__anon5::skip	src/stblib/stb_image.h	/^   void     (*skip)  (void *user,unsigned n);            \/\/ skip the next 'n' bytes$/;"	m	struct:__anon5	access:public
__anon6::buffer_start	src/stblib/stb_image.c	/^   uint8 buffer_start[128];$/;"	m	struct:__anon6	file:	access:public
__anon6::buflen	src/stblib/stb_image.c	/^   int buflen;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_buffer	src/stblib/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_buffer_end	src/stblib/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_buffer_original	src/stblib/stb_image.c	/^   uint8 *img_buffer_original;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_n	src/stblib/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_out_n	src/stblib/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_x	src/stblib/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon6	file:	access:public
__anon6::img_y	src/stblib/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon6	file:	access:public
__anon6::io	src/stblib/stb_image.c	/^   stbi_io_callbacks io;$/;"	m	struct:__anon6	file:	access:public
__anon6::io_user_data	src/stblib/stb_image.c	/^   void *io_user_data;$/;"	m	struct:__anon6	file:	access:public
__anon6::read_from_callbacks	src/stblib/stb_image.c	/^   int read_from_callbacks;$/;"	m	struct:__anon6	file:	access:public
__anon8::code	src/stblib/stb_image.c	/^   uint16 code[256];$/;"	m	struct:__anon8	file:	access:public
__anon8::delta	src/stblib/stb_image.c	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon8	file:	access:public
__anon8::fast	src/stblib/stb_image.c	/^   uint8  fast[1 << FAST_BITS];$/;"	m	struct:__anon8	file:	access:public
__anon8::maxcode	src/stblib/stb_image.c	/^   unsigned int maxcode[18];$/;"	m	struct:__anon8	file:	access:public
__anon8::size	src/stblib/stb_image.c	/^   uint8  size[257];$/;"	m	struct:__anon8	file:	access:public
__anon8::values	src/stblib/stb_image.c	/^   uint8  values[256];$/;"	m	struct:__anon8	file:	access:public
__anon9::__anon10::data	src/stblib/stb_image.c	/^      uint8 *data;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::dc_pred	src/stblib/stb_image.c	/^      int dc_pred;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::h	src/stblib/stb_image.c	/^      int h,v;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::h2	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::ha	src/stblib/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::hd	src/stblib/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::id	src/stblib/stb_image.c	/^      int id;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::linebuf	src/stblib/stb_image.c	/^      uint8 *linebuf;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::raw_data	src/stblib/stb_image.c	/^      void *raw_data;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::tq	src/stblib/stb_image.c	/^      int tq;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::v	src/stblib/stb_image.c	/^      int h,v;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::w2	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::x	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::__anon10::y	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
__anon9::code_bits	src/stblib/stb_image.c	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon9	file:	access:public
__anon9::code_buffer	src/stblib/stb_image.c	/^   uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon9	file:	access:public
__anon9::dequant	src/stblib/stb_image.c	/^   uint8 dequant[4][64];$/;"	m	struct:__anon9	file:	access:public
__anon9::dequant2	src/stblib/stb_image.c	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon9	file:	access:public
__anon9::huff_ac	src/stblib/stb_image.c	/^   huffman huff_ac[4];$/;"	m	struct:__anon9	file:	access:public
__anon9::huff_dc	src/stblib/stb_image.c	/^   huffman huff_dc[4];$/;"	m	struct:__anon9	file:	access:public
__anon9::img_comp	src/stblib/stb_image.c	/^   } img_comp[4];$/;"	m	struct:__anon9	typeref:struct:__anon9::__anon10	file:	access:public
__anon9::img_h_max	src/stblib/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9	file:	access:public
__anon9::img_mcu_h	src/stblib/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9	file:	access:public
__anon9::img_mcu_w	src/stblib/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9	file:	access:public
__anon9::img_mcu_x	src/stblib/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9	file:	access:public
__anon9::img_mcu_y	src/stblib/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9	file:	access:public
__anon9::img_v_max	src/stblib/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9	file:	access:public
__anon9::marker	src/stblib/stb_image.c	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon9	file:	access:public
__anon9::nomore	src/stblib/stb_image.c	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon9	file:	access:public
__anon9::order	src/stblib/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon9	file:	access:public
__anon9::restart_interval	src/stblib/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon9	file:	access:public
__anon9::s	src/stblib/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon9	file:	access:public
__anon9::scan_n	src/stblib/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon9	file:	access:public
__anon9::todo	src/stblib/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon9	file:	access:public
__dump	src/Utils/Ini.h	/^        void __dump(FILE* f);$/;"	p	class:Ini	access:public	signature:(FILE* f)
__generateSource	src/Audio/Sound.cpp	/^void Sound::__generateSource()$/;"	f	class:Sound	signature:()
__generateSource	src/Audio/Sound.h	/^        void __generateSource();$/;"	p	class:Sound	access:protected	signature:()
__setDefaultKeys	src/System/Input.cpp	/^void Input::__setDefaultKeys()$/;"	f	class:Input	signature:()
__setDefaultKeys	src/System/Input.h	/^        void __setDefaultKeys();$/;"	p	class:Input	access:private	signature:()
__setLongest	test/Menu.cpp	/^void Menu::__setLongest(float f)$/;"	f	class:Menu	signature:(float f)
__setLongest	test/Menu.h	/^        void __setLongest(float f);$/;"	p	class:Menu	access:private	signature:(float f)
__setSource	src/Audio/Sound.cpp	/^void Sound::__setSource(const unsigned int& bufferID)$/;"	f	class:Sound	signature:(const unsigned int& bufferID)
__setSource	src/Audio/Sound.h	/^        void __setSource(const unsigned int& bufferID);$/;"	p	class:Sound	access:protected	signature:(const unsigned int& bufferID)
__texturize	src/Graphics/Texture.cpp	/^bool Texture::__texturize(unsigned char* Buffer)$/;"	f	class:Texture	signature:(unsigned char* Buffer)
__texturize	src/Graphics/Texture.h	/^        bool __texturize(unsigned char* Buffer);$/;"	p	class:Texture	access:protected	signature:(unsigned char* Buffer)
a	src/Graphics/Color.h	/^        float a;$/;"	m	class:Color	access:public
acceleration	test/Bullet/Particle.h	/^        Vector2f acceleration;$/;"	m	class:Particle	access:protected
acceleration	test/Bullet/Particle.h	/^    Vector2f acceleration;$/;"	m	struct:ParticleProperties	access:public
add	src/System/ResourceCache.cpp	/^boost::shared_ptr<Font> FontCache::add(const std::string& identifier, $/;"	f	class:FontCache	signature:(const std::string& identifier, const std::string& filename, unsigned int charSize)
add	src/System/ResourceCache.cpp	/^boost::shared_ptr<Texture> TextureCache::add(const std::string& identifier, const std::string& filename)$/;"	f	class:TextureCache	signature:(const std::string& identifier, const std::string& filename)
add	src/System/ResourceCache.h	/^        ResourcePointer add(const std::string& identifier, const ResourcePointer& ptr)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier, const ResourcePointer& ptr)
add	src/System/ResourceCache.h	/^        boost::shared_ptr<Font> add(const std::string& identifier, const std::string& filename, unsigned int charSize);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier, const std::string& filename, unsigned int charSize)
add	src/System/ResourceCache.h	/^        boost::shared_ptr<Texture> add(const std::string& identifier, const std::string& filename);$/;"	p	class:TextureCache	access:public	signature:(const std::string& identifier, const std::string& filename)
add	src/Utils/BinaryHeap.h	/^        void add(const T* element)$/;"	f	class:BinaryHeap	access:public	signature:(const T* element)
add	test/Bullet/ParticleMem.cpp	/^void VectorMem::add(const ParticleProperties& p)$/;"	f	class:VectorMem	signature:(const ParticleProperties& p)
add	test/Bullet/ParticleMem.cpp	/^void VectorMem::add(const Vector2f& position, $/;"	f	class:VectorMem	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
add	test/Bullet/ParticleMem.h	/^        virtual void add(const ParticleProperties& p) = 0;$/;"	p	class:ParticleMem	access:public	signature:(const ParticleProperties& p)
add	test/Bullet/ParticleMem.h	/^        virtual void add(const Vector2f& position, $/;"	p	class:ParticleMem	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
add	test/Bullet/ParticleMem.h	/^        void add(const ParticleProperties& p);$/;"	p	class:VectorMem	access:public	signature:(const ParticleProperties& p)
add	test/Bullet/ParticleMem.h	/^        void add(const Vector2f& position, $/;"	p	class:VectorMem	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
addItem	test/Menu.cpp	/^void Menu::addItem(const std::string& item)$/;"	f	class:Menu	signature:(const std::string& item)
addItem	test/Menu.h	/^        void addItem(const std::string& item);$/;"	p	class:Menu	access:public	signature:(const std::string& item)
addItems	test/Menu.cpp	/^void Menu::addItems(const std::string items[], int numItems)$/;"	f	class:Menu	signature:(const std::string items[], int numItems)
addItems	test/Menu.h	/^        void addItems(const std::string items[], int numItems);$/;"	p	class:Menu	access:public	signature:(const std::string items[], int numItems)
addKey	src/System/Input.cpp	/^void Input::addKey(std::string key, int k)$/;"	f	class:Input	signature:(std::string key, int k)
addKey	src/System/Input.h	/^        void addKey(std::string key, int k);$/;"	p	class:Input	access:public	signature:(std::string key, int k)
addMusic	src/System/ResourceCache.cpp	/^boost::shared_ptr<Sound> SoundCache::addMusic(const std::string& identifier, $/;"	f	class:SoundCache	signature:(const std::string& identifier, const std::string& filename)
addMusic	src/System/ResourceCache.h	/^        boost::shared_ptr<Sound> addMusic(const std::string& identifier, const std::string& filename);$/;"	p	class:SoundCache	access:public	signature:(const std::string& identifier, const std::string& filename)
addSample	src/System/ResourceCache.cpp	/^boost::shared_ptr<Sound> SoundCache::addSample(const std::string& identifier, $/;"	f	class:SoundCache	signature:(const std::string& identifier, const std::string& filename)
addSample	src/System/ResourceCache.h	/^        boost::shared_ptr<Sound> addSample(const std::string& identifier, const std::string& filename);$/;"	p	class:SoundCache	access:public	signature:(const std::string& identifier, const std::string& filename)
addSamplesProcessed	src/Audio/Music.cpp	/^void Music::addSamplesProcessed(unsigned long i)$/;"	f	class:Music	signature:(unsigned long i)
addSamplesProcessed	src/Audio/Music.h	/^        void addSamplesProcessed(unsigned long i);$/;"	p	class:Music	access:public	signature:(unsigned long i)
alive	test/Bullet/Particle.h	/^        bool alive;$/;"	m	class:Particle	access:protected
allocateData	src/Memory/Buffer.cpp	/^void Buffer::allocateData(size_t maxSize)$/;"	f	class:Buffer	signature:(size_t maxSize)
allocateData	src/Memory/Buffer.h	/^        void allocateData(size_t maxSize);$/;"	p	class:Buffer	access:public	signature:(size_t maxSize)
allocateData	test/Bullet/ParticleMem.cpp	/^void VectorMem::allocateData(int size)$/;"	f	class:VectorMem	signature:(int size)
allocateData	test/Bullet/ParticleMem.h	/^        void allocateData(int size);$/;"	p	class:VectorMem	access:protected	signature:(int size)
allocateMem	test/Bullet/BulletEmitter.cpp	/^void BulletEmitter::allocateMem()$/;"	f	class:BulletEmitter	signature:()
allocateMem	test/Bullet/BulletEmitter.h	/^        void allocateMem();$/;"	p	class:BulletEmitter	access:public	signature:()
allocateMem	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::allocateMem()$/;"	f	class:ParticleEmitter	signature:()
allocateMem	test/Bullet/ParticleEmitter.h	/^        virtual void allocateMem();$/;"	p	class:ParticleEmitter	access:public	signature:()
allocateParticles	test/Bullet/ParticleMem.cpp	/^void BulletMem::allocateParticles()$/;"	f	class:BulletMem	signature:()
allocateParticles	test/Bullet/ParticleMem.cpp	/^void VectorMem::allocateParticles()$/;"	f	class:VectorMem	signature:()
allocateParticles	test/Bullet/ParticleMem.h	/^        virtual void allocateParticles();$/;"	p	class:VectorMem	access:protected	signature:()
allocateParticles	test/Bullet/ParticleMem.h	/^        void allocateParticles();$/;"	p	class:BulletMem	access:private	signature:()
alreadyExists	src/Core/CoreRegistry.cpp	/^bool CoreRegistry::alreadyExists(const std::string& identifier)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier)
alreadyExists	src/Core/CoreRegistry.h	/^        static bool alreadyExists(const std::string& identifier);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier)
alreadyExists	src/System/ResourceCache.h	/^        bool alreadyExists(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
alreadyExists	src/Utils/Ini.cpp	/^bool Ini::alreadyExists(const std::string& identifier)$/;"	f	class:Ini	signature:(const std::string& identifier)
alreadyExists	src/Utils/Ini.h	/^        bool alreadyExists(const std::string& identifier);$/;"	p	class:Ini	access:public	signature:(const std::string& identifier)
append	src/Memory/Buffer.cpp	/^void Buffer::append(Buffer* b)$/;"	f	class:Buffer	signature:(Buffer* b)
append	src/Memory/Buffer.h	/^        void append(Buffer* b);$/;"	p	class:Buffer	access:public	signature:(Buffer* b)
atEnd	src/Memory/Buffer.cpp	/^bool Buffer::atEnd()$/;"	f	class:Buffer	signature:()
atEnd	src/Memory/Buffer.h	/^        bool atEnd();$/;"	p	class:Buffer	access:public	signature:()
atEnd	src/Utils/FileLoader.cpp	/^bool FileLoader::atEnd()$/;"	f	class:FileLoader	signature:()
atEnd	src/Utils/FileLoader.h	/^        bool atEnd();$/;"	p	class:FileLoader	access:public	signature:()
at_eof	src/stblib/stb_image.c	/^stbi_inline static int at_eof(stbi *s)$/;"	f	file:	signature:(stbi *s)
b	src/Graphics/Color.h	/^        float b;$/;"	m	class:Color	access:public
background	test/GameState.h	/^        TexturePtr background;$/;"	m	class:GameState	access:private
background	test/MusicState.h	/^        TexturePtr background;$/;"	m	class:MusicState	access:private
background	test/PatternState.h	/^        TexturePtr background;$/;"	m	class:PatternState	access:private
background	test/TestState.h	/^        TexturePtr background;$/;"	m	class:TestState	access:private
bgindex	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
bindTexture	src/Graphics/Texture.cpp	/^void Texture::bindTexture() const$/;"	f	class:Texture	signature:() const
bindTexture	src/Graphics/Texture.h	/^        void bindTexture() const;$/;"	p	class:Texture	access:public	signature:() const
bit_reverse	src/stblib/stb_image.c	/^stbi_inline static int bit_reverse(int v, int bits)$/;"	f	file:	signature:(int v, int bits)
bitcount	src/stblib/stb_image.c	/^static int bitcount(unsigned int a)$/;"	f	file:	signature:(unsigned int a)
bitreverse16	src/stblib/stb_image.c	/^stbi_inline static int bitreverse16(int n)$/;"	f	file:	signature:(int n)
bmask	src/stblib/stb_image.c	/^static uint32 bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v	file:
bmp_load	src/stblib/stb_image.c	/^static stbi_uc *bmp_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
bmp_test	src/stblib/stb_image.c	/^static int bmp_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
bottom	src/Math/Rect.h	/^        T bottom;$/;"	m	class:Rect	access:public
buffer	src/Audio/Music.h	/^        std::vector<short> buffer;$/;"	m	class:Music	access:private
buffer	src/Audio/Sample.h	/^        SoundBuffer buffer;$/;"	m	class:Sample	access:private
buffer	src/Audio/SoundBuffer.h	/^        unsigned int buffer;$/;"	m	class:SoundBuffer	access:private
buffer	src/Graphics/Font.h	/^        unsigned char buffer[1<<20];$/;"	m	class:Font	access:protected
bufferEnd	src/Memory/Buffer.h	/^        char* bufferEnd;$/;"	m	class:Buffer	access:protected
bufferID	test/Bullet/ParticleEmitter.h	/^        unsigned int bufferID;$/;"	m	class:ParticleEmitter	access:protected
bufferNum	src/Graphics/VertexBuffer.h	/^        unsigned int bufferNum;$/;"	m	class:VertexBuffer	access:private
bufferType	src/Graphics/VertexBuffer.h	/^        int bufferType;$/;"	m	class:VertexBuffer	access:private
buffer_start	src/stblib/stb_image.c	/^   uint8 buffer_start[128];$/;"	m	struct:__anon6	file:	access:public
buffers	src/Audio/Music.h	/^        unsigned int buffers[BUFFER_COUNT];$/;"	m	class:Music	access:private
buffersProcessed	src/Audio/Music.cpp	/^ALint Music::buffersProcessed()$/;"	f	class:Music	signature:()
buffersProcessed	src/Audio/Music.h	/^        ALint buffersProcessed();$/;"	p	class:Music	access:public	signature:()
buflen	src/stblib/stb_image.c	/^   int buflen;$/;"	m	struct:__anon6	file:	access:public
build_huffman	src/stblib/stb_image.c	/^static int build_huffman(huffman *h, int *count)$/;"	f	file:	signature:(huffman *h, int *count)
bytesNeeded	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::bytesNeeded[BufferLayout::MAX_LAYOUT] = $/;"	m	class:VertexBuffer	file:
bytesNeeded	src/Graphics/VertexBuffer.h	/^        static const int bytesNeeded[BufferLayout::MAX_LAYOUT];$/;"	m	class:VertexBuffer	access:private
calculate	src/Utils/FpsCounter.cpp	/^void FpsCounter::calculate()$/;"	f	class:FpsCounter	signature:()
calculate	src/Utils/FpsCounter.h	/^        void calculate();$/;"	p	class:FpsCounter	access:public	signature:()
capacity	src/Utils/BinaryHeap.h	/^        size_t capacity;$/;"	m	class:BinaryHeap	access:private
cdata	src/stblib/stb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
changeDirection	test/Bullet/Bullet.h	/^        void changeDirection(float value, float wait);$/;"	p	class:Bullet	access:public	signature:(float value, float wait)
changeDirectionRel	test/Bullet/Bullet.h	/^        void changeDirectionRel(float value, float wait);$/;"	p	class:Bullet	access:public	signature:(float value, float wait)
channel	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
channelCount	src/Audio/Music.h	/^        unsigned int channelCount;$/;"	m	class:Music	access:private
channelCount	src/Audio/SoundBuffer.h	/^        unsigned int channelCount;$/;"	m	class:SoundBuffer	access:private
checkChoice	test/Menu.cpp	/^const bool Menu::checkChoice() const$/;"	f	class:Menu	signature:() const
checkChoice	test/Menu.h	/^        const bool checkChoice() const;$/;"	p	class:Menu	access:public	signature:() const
checkPow2	src/Math/Math.cpp	/^bool Math::checkPow2(unsigned int n)$/;"	f	class:Math	signature:(unsigned int n)
checkPow2	src/Math/Math.h	/^    bool checkPow2(unsigned int n);$/;"	p	namespace:Math	signature:(unsigned int n)
check_png_header	src/stblib/stb_image.c	/^static int check_png_header(stbi *s)$/;"	f	file:	signature:(stbi *s)
choice	test/Menu.h	/^        std::string choice;$/;"	m	class:Menu	access:private
chunk	src/stblib/stb_image.c	/^} chunk;$/;"	t	typeref:struct:__anon14	file:
clamp	src/stblib/stb_image.c	/^stbi_inline static uint8 clamp(int x)$/;"	f	file:	signature:(int x)
cleanup_jpeg	src/stblib/stb_image.c	/^static void cleanup_jpeg(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
clear	src/Memory/Buffer.cpp	/^void Buffer::clear()$/;"	f	class:Buffer	signature:()
clear	src/Memory/Buffer.h	/^        void clear();$/;"	p	class:Buffer	access:public	signature:()
clearQueue	src/Audio/Music.cpp	/^void Music::clearQueue()$/;"	f	class:Music	signature:()
clearQueue	src/Audio/Music.h	/^        void clearQueue();$/;"	p	class:Music	access:public	signature:()
cmp	src/Utils/BinaryHeap.h	/^        int (*cmp)(const T& a, const T& b);$/;"	m	class:BinaryHeap	access:private
code	src/stblib/stb_image.c	/^   uint16 code[256];$/;"	m	struct:__anon8	file:	access:public
code_bits	src/stblib/stb_image.c	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon9	file:	access:public
code_buffer	src/stblib/stb_image.c	/^   uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon9	file:	access:public
code_buffer	src/stblib/stb_image.c	/^   uint32 code_buffer;$/;"	m	struct:__anon13	file:	access:public
codes	src/stblib/stb_image.c	/^   stbi_gif_lzw codes[4096];$/;"	m	struct:stbi_gif_struct	file:	access:public
collide	src/Math/Rect.h	/^        bool collide(const Rect<T>& rect)$/;"	f	class:Rect	access:public	signature:(const Rect<T>& rect)
collide	src/Math/Rect.h	/^        bool collide(const Vector2<T>& point)$/;"	f	class:Rect	access:public	signature:(const Vector2<T>& point)
colorBuffer	test/Bullet/ParticleMem.h	/^        float* colorBuffer;$/;"	m	class:ParticleMem	access:protected
colorBufferSize	test/Bullet/ParticleMem.h	/^        int colorBufferSize;$/;"	m	class:ParticleMem	access:protected
colorDelta	test/Bullet/Particle.h	/^        Color colorDelta;$/;"	m	class:Particle	access:protected
color_table	src/stblib/stb_image.c	/^   uint8 *color_table;$/;"	m	struct:stbi_gif_struct	file:	access:public
compute_huffman_codes	src/stblib/stb_image.c	/^static int compute_huffman_codes(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
compute_transparency	src/stblib/stb_image.c	/^static int compute_transparency(png *z, uint8 tc[3], int out_n)$/;"	f	file:	signature:(png *z, uint8 tc[3], int out_n)
compute_y	src/stblib/stb_image.c	/^static uint8 compute_y(int r, int g, int b)$/;"	f	file:	signature:(int r, int g, int b)
config	Makefile	/^  config=debug$/;"	m
context	src/Audio/Listener.cpp	/^ALCcontext* Listener::context = NULL;$/;"	m	class:Listener	file:
context	src/Audio/Listener.h	/^        static ALCcontext* context;$/;"	m	class:Listener	access:private
convert_format	src/stblib/stb_image.c	/^static unsigned char *convert_format(unsigned char *data, int img_n, int req_comp, uint x, uint y)$/;"	f	file:	signature:(unsigned char *data, int img_n, int req_comp, uint x, uint y)
coreAssert	src/System/Log.h	13;"	d
coreAssert	src/System/Log.h	7;"	d
coreFailedAssert	src/System/Log.cpp	/^void coreFailedAssert(const std::string& condition, $/;"	f	signature:(const std::string& condition, const std::string message, const char* file, int line)
coreFailedAssert	src/System/Log.h	/^    void coreFailedAssert(const std::string& condition, $/;"	p	signature:(const std::string& condition, const std::string message, const char* file, int line)
createSection	src/Graphics/Section.cpp	/^void Section::createSection(const Texture& t, Rect<float>* r)$/;"	f	class:Section	signature:(const Texture& t, Rect<float>* r)
createSection	src/Graphics/Section.h	/^        void createSection(const Texture& t, Rect<float>* r);$/;"	p	class:Section	access:public	signature:(const Texture& t, Rect<float>* r)
create_png_image	src/stblib/stb_image.c	/^static int create_png_image(png *a, uint8 *raw, uint32 raw_len, int out_n, int interlaced)$/;"	f	file:	signature:(png *a, uint8 *raw, uint32 raw_len, int out_n, int interlaced)
create_png_image_raw	src/stblib/stb_image.c	/^static int create_png_image_raw(png *a, uint8 *raw, uint32 raw_len, int out_n, uint32 x, uint32 y)$/;"	f	file:	signature:(png *a, uint8 *raw, uint32 raw_len, int out_n, uint32 x, uint32 y)
cur_x	src/stblib/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
cur_y	src/stblib/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
currentChoice	test/Menu.h	/^        int currentChoice;$/;"	m	class:Menu	access:private
currentColor	test/Bullet/Particle.h	/^    Color currentColor;$/;"	m	struct:ParticleProperties	access:public
currentTime	src/Utils/FpsCounter.h	/^        float currentTime;$/;"	m	class:FpsCounter	access:private
cx	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
cy	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
data	src/Memory/Buffer.h	/^        char* data;$/;"	m	class:Buffer	access:protected
data	src/Utils/BinaryHeap.h	/^        T* data;$/;"	m	class:BinaryHeap	access:private
data	src/stblib/stb_image.c	/^      uint8 *data;$/;"	m	struct:__anon9::__anon10	file:	access:public
data	src/stblib/stb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:__anon20	access:public
dc_pred	src/stblib/stb_image.c	/^      int dc_pred;$/;"	m	struct:__anon9::__anon10	file:	access:public
deadIndex	test/Bullet/ParticleMem.h	/^        int deadIndex;$/;"	m	class:VectorMem	access:protected
decode	src/stblib/stb_image.c	/^stbi_inline static int decode(jpeg *j, huffman *h)$/;"	f	file:	signature:(jpeg *j, huffman *h)
decode_block	src/stblib/stb_image.c	/^static int decode_block(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)$/;"	f	file:	signature:(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)
decode_jpeg_header	src/stblib/stb_image.c	/^static int decode_jpeg_header(jpeg *z, int scan)$/;"	f	file:	signature:(jpeg *z, int scan)
decode_jpeg_image	src/stblib/stb_image.c	/^static int decode_jpeg_image(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
default_distance	src/stblib/stb_image.c	/^static uint8 default_length[288], default_distance[32];$/;"	v	file:
default_length	src/stblib/stb_image.c	/^static uint8 default_length[288], default_distance[32];$/;"	v	file:
degToRad	src/Math/Math.cpp	/^float Math::degToRad(float degrees)$/;"	f	class:Math	signature:(float degrees)
degToRad	src/Math/Math.h	/^    float degToRad(float degrees);$/;"	p	namespace:Math	signature:(float degrees)
deinit	src/Audio/Listener.cpp	/^void Listener::deinit()$/;"	f	class:Listener	signature:()
deinit	src/Audio/Listener.h	/^        static void deinit();$/;"	p	class:Listener	access:public	signature:()
deinit	src/Core/Core.cpp	/^void Core::deinit()$/;"	f	class:Core	signature:()
deinit	src/Core/Core.h	/^        static void deinit();$/;"	p	class:Core	access:public	signature:()
deinit	src/Core/CoreState.cpp	/^void CoreState::deinit()$/;"	f	class:CoreState	signature:()
deinit	src/Core/CoreState.h	/^        virtual void deinit();$/;"	p	class:CoreState	access:public	signature:()
deinit	src/Graphics/FontLoader.cpp	/^void FontLoader::deinit()$/;"	f	class:FontLoader	signature:()
deinit	src/Graphics/FontLoader.h	/^        static void deinit();$/;"	p	class:FontLoader	access:public	signature:()
deinit	src/Graphics/Renderer.cpp	/^void Renderer::deinit() const$/;"	f	class:Renderer	signature:() const
deinit	src/Graphics/Renderer.h	/^        void deinit() const;$/;"	p	class:Renderer	access:public	signature:() const
deinit	test/GameState.cpp	/^void GameState::deinit()$/;"	f	class:GameState	signature:()
deinit	test/GameState.h	/^        void deinit();$/;"	p	class:GameState	access:public	signature:()
deinit	test/MusicState.cpp	/^void MusicState::deinit()$/;"	f	class:MusicState	signature:()
deinit	test/MusicState.h	/^        void deinit();$/;"	p	class:MusicState	access:public	signature:()
deinit	test/PatternState.cpp	/^void PatternState::deinit()$/;"	f	class:PatternState	signature:()
deinit	test/PatternState.h	/^        void deinit();$/;"	p	class:PatternState	access:public	signature:()
deinit	test/TestState.cpp	/^void TestState::deinit()$/;"	f	class:TestState	signature:()
deinit	test/TestState.h	/^        void deinit();$/;"	p	class:TestState	access:public	signature:()
delta	src/stblib/stb_image.c	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon8	file:	access:public
dequant	src/stblib/stb_image.c	/^   uint8 dequant[4][64];$/;"	m	struct:__anon9	file:	access:public
dequant2	src/stblib/stb_image.c	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon9	file:	access:public
device	src/Audio/Listener.cpp	/^ALCdevice* Listener::device = NULL;$/;"	m	class:Listener	file:
device	src/Audio/Listener.h	/^        static ALCdevice* device;$/;"	m	class:Listener	access:private
dezigzag	src/stblib/stb_image.c	/^static uint8 dezigzag[64+15] =$/;"	v	file:
dispHeight	src/Graphics/Renderer.h	/^        int dispHeight;$/;"	m	class:Renderer	access:protected
dispWidth	src/Graphics/Renderer.h	/^        int dispWidth;$/;"	m	class:Renderer	access:protected
dist_base	src/stblib/stb_image.c	/^static int dist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	file:
dist_extra	src/stblib/stb_image.c	/^static int dist_extra[32] =$/;"	v	file:
div16	src/stblib/stb_image.c	1438;"	d	file:
div4	src/stblib/stb_image.c	1389;"	d	file:
do_png	src/stblib/stb_image.c	/^static unsigned char *do_png(png *p, int *x, int *y, int *n, int req_comp)$/;"	f	file:	signature:(png *p, int *x, int *y, int *n, int req_comp)
do_zlib	src/stblib/stb_image.c	/^static int do_zlib(zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	file:	signature:(zbuf *a, char *obuf, int olen, int exp, int parse_header)
dotProduct	src/Math/Vector2.h	/^        float dotProduct(Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(Vector2<T>& v)
draw	src/Core/CoreState.h	/^        virtual void draw() = 0;$/;"	p	class:CoreState	access:public	signature:()
draw	src/Graphics/Drawable.cpp	/^void Drawable::draw(Vector2<float> v) const$/;"	f	class:Drawable	signature:(Vector2<float> v) const
draw	src/Graphics/Drawable.h	/^        virtual void draw(Vector2<float> v) const;$/;"	p	class:Drawable	access:public	signature:(Vector2<float> v) const
draw	src/Graphics/Drawable.h	/^        virtual void draw(float x = 0.0f, float y = 0.0f) const = 0;$/;"	p	class:Drawable	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	src/Graphics/Renderer.cpp	/^void Renderer::draw(Drawable& Object, Vector2f& loc)$/;"	f	class:Renderer	signature:(Drawable& Object, Vector2f& loc)
draw	src/Graphics/Renderer.cpp	/^void Renderer::draw(Drawable& Object, float x, float y)$/;"	f	class:Renderer	signature:(Drawable& Object, float x, float y)
draw	src/Graphics/Renderer.h	/^        void draw(Drawable& Object, Vector2f& loc);$/;"	p	class:Renderer	access:public	signature:(Drawable& Object, Vector2f& loc)
draw	src/Graphics/Renderer.h	/^        void draw(Drawable& Object, float x, float y);$/;"	p	class:Renderer	access:public	signature:(Drawable& Object, float x, float y)
draw	src/Graphics/Section.cpp	/^void Section::draw(float x, float y) const$/;"	f	class:Section	signature:(float x, float y) const
draw	src/Graphics/Section.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Section	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	src/Graphics/Text.cpp	/^void Text::draw(float x, float y) const$/;"	f	class:Text	signature:(float x, float y) const
draw	src/Graphics/Text.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Text	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	src/Graphics/Texture.cpp	/^void Texture::draw(float x, float y) const$/;"	f	class:Texture	signature:(float x, float y) const
draw	src/Graphics/Texture.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Texture	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::draw(float x, float y) const$/;"	f	class:VertexBuffer	signature:(float x, float y) const
draw	src/Graphics/VertexBuffer.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:VertexBuffer	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::draw(float x, float y) const$/;"	f	class:ParticleEmitter	signature:(float x, float y) const
draw	test/Bullet/ParticleEmitter.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:ParticleEmitter	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	test/GameState.cpp	/^void GameState::draw()$/;"	f	class:GameState	signature:()
draw	test/GameState.h	/^        void draw();$/;"	p	class:GameState	access:public	signature:()
draw	test/Menu.cpp	/^void Menu::draw(float x, float y) const$/;"	f	class:Menu	signature:(float x, float y) const
draw	test/Menu.h	/^        void draw(float x = 0.0f, float y = 0.0f) const;$/;"	p	class:Menu	access:public	signature:(float x = 0.0f, float y = 0.0f) const
draw	test/MusicState.cpp	/^void MusicState::draw()$/;"	f	class:MusicState	signature:()
draw	test/MusicState.h	/^        void draw();$/;"	p	class:MusicState	access:public	signature:()
draw	test/PatternState.cpp	/^void PatternState::draw()$/;"	f	class:PatternState	signature:()
draw	test/PatternState.h	/^        void draw();$/;"	p	class:PatternState	access:public	signature:()
draw	test/TestState.cpp	/^void TestState::draw()$/;"	f	class:TestState	signature:()
draw	test/TestState.h	/^        void draw();$/;"	p	class:TestState	access:public	signature:()
drawShape	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::drawShape() const$/;"	f	class:VertexBuffer	signature:() const
drawShape	src/Graphics/VertexBuffer.h	/^        void drawShape() const;$/;"	p	class:VertexBuffer	access:public	signature:() const
drawTexture	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::drawTexture() const$/;"	f	class:VertexBuffer	signature:() const
drawTexture	src/Graphics/VertexBuffer.h	/^        void drawTexture() const;$/;"	p	class:VertexBuffer	access:public	signature:() const
dumpBuffer	src/Memory/Buffer.cpp	/^void Buffer::dumpBuffer()$/;"	f	class:Buffer	signature:()
dumpBuffer	src/Memory/Buffer.h	/^        void dumpBuffer();$/;"	p	class:Buffer	access:public	signature:()
duration	src/Audio/Music.h	/^        float duration;$/;"	m	class:Music	access:private
dx	src/stblib/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	access:public
e	src/stblib/stb_image.c	/^static int e(const char *str)$/;"	f	file:	signature:(const char *str)
e	src/stblib/stb_image.c	246;"	d	file:
e	src/stblib/stb_image.c	248;"	d	file:
e	src/stblib/stb_image.c	250;"	d	file:
eflags	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
emitter	test/GameState.h	/^        ParticleEmitter* emitter;$/;"	m	class:GameState	access:private
endBuffers	src/Audio/Music.h	/^        bool endBuffers[BUFFER_COUNT];$/;"	m	class:Music	access:private
entries	src/Utils/Ini.h	/^        std::map<std::string, std::string> entries;$/;"	m	class:Ini	access:private
eof	src/stblib/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon5	access:public
epf	src/stblib/stb_image.c	253;"	d	file:
epuc	src/stblib/stb_image.c	254;"	d	file:
exists	src/Utils/FileLoader.cpp	/^bool FileLoader::exists(const std::string& filename)$/;"	f	class:FileLoader	signature:(const std::string& filename)
exists	src/Utils/FileLoader.h	/^        static bool exists(const std::string& filename);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename)
exit	src/Core/Core.cpp	/^void Core::exit()$/;"	f	class:Core	signature:()
exit	src/Core/Core.h	/^        static void exit();$/;"	p	class:Core	access:public	signature:()
expand	src/stblib/stb_image.c	/^static int expand(zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	file:	signature:(zbuf *z, int n)
expand_palette	src/stblib/stb_image.c	/^static int expand_palette(png *a, uint8 *palette, int len, int pal_img_n)$/;"	f	file:	signature:(png *a, uint8 *palette, int len, int pal_img_n)
expanded	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
exportFile	src/Utils/Ini.cpp	/^void Ini::exportFile(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
exportFile	src/Utils/Ini.h	/^        void exportFile(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
extend	src/Math/Vector2.h	/^        void extend(float newMagnitude)$/;"	f	class:Vector2	access:public	signature:(float newMagnitude)
extend_receive	src/stblib/stb_image.c	/^stbi_inline static int extend_receive(jpeg *j, int n)$/;"	f	file:	signature:(jpeg *j, int n)
external	src/Memory/Buffer.h	/^        bool external;$/;"	m	class:Buffer	access:protected
ey	src/stblib/stb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	access:public
f2f	src/stblib/stb_image.c	936;"	d	file:
fadeColor	test/Bullet/Particle.h	/^    Color fadeColor;$/;"	m	struct:ParticleProperties	access:public
failure_reason	src/stblib/stb_image.c	/^static const char *failure_reason;$/;"	v	file:
fast	src/stblib/stb_image.c	/^   uint16 fast[1 << ZFAST_BITS];$/;"	m	struct:__anon12	file:	access:public
fast	src/stblib/stb_image.c	/^   uint8  fast[1 << FAST_BITS];$/;"	m	struct:__anon8	file:	access:public
file	src/Audio/Music.h	/^        SNDFILE* file;$/;"	m	class:Music	access:private
file	src/Utils/FileLoader.h	/^        FILE* file;$/;"	m	class:FileLoader	access:private
fillAndPushBuffer	src/Audio/Music.cpp	/^bool Music::fillAndPushBuffer(unsigned int bufferNum)$/;"	f	class:Music	signature:(unsigned int bufferNum)
fillAndPushBuffer	src/Audio/Music.h	/^        bool fillAndPushBuffer(unsigned int bufferNum);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum)
fillQueue	src/Audio/Music.cpp	/^bool Music::fillQueue()$/;"	f	class:Music	signature:()
fillQueue	src/Audio/Music.h	/^        bool fillQueue();$/;"	p	class:Music	access:public	signature:()
fill_bits	src/stblib/stb_image.c	/^static void fill_bits(zbuf *z)$/;"	f	file:	signature:(zbuf *z)
findIndex	src/Utils/BinaryHeap.h	/^        int findIndex(const T* data) const$/;"	f	class:BinaryHeap	access:public	signature:(const T* data) const
fire	test/Bullet/BulletEmitter.h	/^        void fire();$/;"	p	class:BulletEmitter	access:public	signature:()
first	src/stblib/stb_image.c	/^   uint8 first;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
first_row_filter	src/stblib/stb_image.c	/^static uint8 first_row_filter[5] =$/;"	v	file:
firstcode	src/stblib/stb_image.c	/^   uint16 firstcode[16];$/;"	m	struct:__anon12	file:	access:public
firstsymbol	src/stblib/stb_image.c	/^   uint16 firstsymbol[16];$/;"	m	struct:__anon12	file:	access:public
flags	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
float2fixed	src/stblib/stb_image.c	1475;"	d	file:
float2int	src/stblib/stb_image.c	628;"	d	file:
font	src/Graphics/Text.h	/^        FontPtr font;$/;"	m	class:Text	access:private
font	test/Menu.h	/^        FontPtr font;$/;"	m	class:Menu	access:private
font	test/TestState.h	/^        FontPtr font;$/;"	m	class:TestState	access:private
fontCache	src/System/ResourceManager.h	/^    FontCache fontCache;$/;"	m	struct:ResourceManager	access:public
fontinfo	src/Graphics/Font.h	/^        FontInfo fontinfo;$/;"	m	class:Font	access:protected
fonts	src/Core/CoreState.h	/^        FontCache* fonts;$/;"	m	class:CoreState	access:protected
fontstart	src/stblib/stb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:__anon20	access:public
format	src/Audio/Music.h	/^        ALenum format;$/;"	m	class:Music	access:private
formatString	src/Utils/StringUtils.cpp	/^std::string formatString(const char* format, ...)$/;"	f	signature:(const char* format, ...)
formatString	src/Utils/StringUtils.h	/^std::string formatString(const char* format, ...);$/;"	p	signature:(const char* format, ...)
fps	src/Core/Core.cpp	/^FpsCounter* Core::fps = NULL;$/;"	m	class:Core	file:
fps	src/Core/Core.h	/^        static FpsCounter* fps;$/;"	m	class:Core	access:private
fps	src/Utils/FpsCounter.h	/^        float fps;$/;"	m	class:FpsCounter	access:private
frameCount	src/Utils/FpsCounter.h	/^        int frameCount;$/;"	m	class:FpsCounter	access:private
fromString	src/Utils/StringUtils.h	/^template<typename T> inline T fromString(std::string str)$/;"	f	signature:(std::string str)
fsh	src/stblib/stb_image.c	937;"	d	file:
ftex	src/stblib/stb_truetype.h	/^GLstbtt_uint ftex;$/;"	v
fullscreen	src/Core/Core.cpp	/^bool Core::fullscreen = false;$/;"	m	class:Core	file:
fullscreen	src/Core/Core.h	/^        static bool fullscreen;$/;"	m	class:Core	access:private
g	src/Graphics/Color.h	/^        float g;$/;"	m	class:Color	access:public
genRand	src/Math/Random.cpp	/^double Random::genRand(double min, double max)$/;"	f	class:Random	signature:(double min, double max)
genRand	src/Math/Random.cpp	/^int Random::genRand(int min, int max)$/;"	f	class:Random	signature:(int min, int max)
genRand	src/Math/Random.cpp	/^unsigned long Random::genRand(unsigned long max)$/;"	f	class:Random	signature:(unsigned long max)
genRand	src/Math/Random.h	/^        double genRand(double min, double max);$/;"	p	class:Random	access:public	signature:(double min, double max)
genRand	src/Math/Random.h	/^        int genRand(int min, int max);$/;"	p	class:Random	access:public	signature:(int min, int max)
genRand	src/Math/Random.h	/^        unsigned long genRand(unsigned long max);$/;"	p	class:Random	access:public	signature:(unsigned long max)
genRand_Int32	src/Math/Random.cpp	/^unsigned long Random::genRand_Int32()$/;"	f	class:Random	signature:()
genRand_Int32	src/Math/Random.h	/^        unsigned long genRand_Int32();$/;"	p	class:Random	access:public	signature:()
get	src/System/ResourceCache.h	/^        ResourcePointer get(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
get	test/Bullet/ParticleMem.cpp	/^Particle& VectorMem::get(int index)$/;"	f	class:VectorMem	signature:(int index)
get	test/Bullet/ParticleMem.h	/^        Particle& get(int index);$/;"	p	class:VectorMem	access:public	signature:(int index)
get	test/Bullet/ParticleMem.h	/^        virtual Particle& get(int index) = 0;$/;"	p	class:ParticleMem	access:public	signature:(int index)
get16	src/stblib/stb_image.c	/^static int get16(stbi *s)$/;"	f	file:	signature:(stbi *s)
get16le	src/stblib/stb_image.c	/^static int get16le(stbi *s)$/;"	f	file:	signature:(stbi *s)
get32	src/stblib/stb_image.c	/^static uint32 get32(stbi *s)$/;"	f	file:	signature:(stbi *s)
get32le	src/stblib/stb_image.c	/^static uint32 get32le(stbi *s)$/;"	f	file:	signature:(stbi *s)
get8	src/stblib/stb_image.c	/^stbi_inline static int get8(stbi *s)$/;"	f	file:	signature:(stbi *s)
get8u	src/stblib/stb_image.c	/^stbi_inline static uint8 get8u(stbi *s)$/;"	f	file:	signature:(stbi *s)
getAcceleration	test/Bullet/Particle.cpp	/^Vector2f& Particle::getAcceleration()$/;"	f	class:Particle	signature:()
getAcceleration	test/Bullet/Particle.h	/^        Vector2f& getAcceleration();$/;"	p	class:Particle	access:public	signature:()
getBufferID	src/Audio/SoundBuffer.cpp	/^const unsigned int SoundBuffer::getBufferID() const$/;"	f	class:SoundBuffer	signature:() const
getBufferID	src/Audio/SoundBuffer.h	/^        const unsigned int getBufferID() const;$/;"	p	class:SoundBuffer	access:public	signature:() const
getBufferNum	src/Audio/Music.cpp	/^unsigned int Music::getBufferNum(ALuint buffer)$/;"	f	class:Music	signature:(ALuint buffer)
getBufferNum	src/Audio/Music.h	/^        unsigned int getBufferNum(ALuint buffer);$/;"	p	class:Music	access:public	signature:(ALuint buffer)
getCapacity	src/Utils/BinaryHeap.h	/^        size_t getCapacity() const$/;"	f	class:BinaryHeap	access:public	signature:() const
getChoice	test/Menu.cpp	/^const std::string Menu::getChoice() const$/;"	f	class:Menu	signature:() const
getChoice	test/Menu.h	/^        const std::string getChoice() const;$/;"	p	class:Menu	access:public	signature:() const
getColorBuffer	test/Bullet/ParticleMem.cpp	/^float* ParticleMem::getColorBuffer() const$/;"	f	class:ParticleMem	signature:() const
getColorBuffer	test/Bullet/ParticleMem.h	/^        float* getColorBuffer() const;$/;"	p	class:ParticleMem	access:public	signature:() const
getColorBufferSize	test/Bullet/ParticleMem.cpp	/^const int ParticleMem::getColorBufferSize() const$/;"	f	class:ParticleMem	signature:() const
getColorBufferSize	test/Bullet/ParticleMem.h	/^        const int getColorBufferSize() const;$/;"	p	class:ParticleMem	access:public	signature:() const
getData	src/Memory/Buffer.cpp	/^char* Buffer::getData()$/;"	f	class:Buffer	signature:()
getData	src/Memory/Buffer.h	/^        char* getData();$/;"	p	class:Buffer	access:public	signature:()
getDuration	src/Audio/Music.cpp	/^float Music::getDuration()$/;"	f	class:Music	signature:()
getDuration	src/Audio/Music.h	/^        float getDuration();$/;"	p	class:Music	access:public	signature:()
getDuration	src/Audio/Sound.cpp	/^float Sound::getDuration()$/;"	f	class:Sound	signature:()
getDuration	src/Audio/Sound.h	/^        virtual float getDuration();$/;"	p	class:Sound	access:public	signature:()
getEndBuffer	src/Audio/Music.cpp	/^bool Music::getEndBuffer(unsigned int bufferNum)$/;"	f	class:Music	signature:(unsigned int bufferNum)
getEndBuffer	src/Audio/Music.h	/^        bool getEndBuffer(unsigned int bufferNum);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum)
getFormat	src/Audio/SoundLoader.cpp	/^ALenum SoundLoader::getFormat(unsigned int channels)$/;"	f	class:SoundLoader	signature:(unsigned int channels)
getFormat	src/Audio/SoundLoader.h	/^        static ALenum getFormat(unsigned int channels);$/;"	p	class:SoundLoader	access:public	signature:(unsigned int channels)
getFps	src/Utils/FpsCounter.cpp	/^float FpsCounter::getFps() const$/;"	f	class:FpsCounter	signature:() const
getFps	src/Utils/FpsCounter.h	/^        float getFps() const;$/;"	p	class:FpsCounter	access:public	signature:() const
getFrameTime	src/Utils/FpsCounter.cpp	/^float FpsCounter::getFrameTime() const$/;"	f	class:FpsCounter	signature:() const
getFrameTime	src/Utils/FpsCounter.h	/^        float getFrameTime() const;$/;"	p	class:FpsCounter	access:public	signature:() const
getGlyph	src/Graphics/Font.cpp	/^Glyph* Font::getGlyph(int ch)$/;"	f	class:Font	signature:(int ch)
getGlyph	src/Graphics/Font.h	/^        Glyph* getGlyph(int ch);$/;"	p	class:Font	access:public	signature:(int ch)
getHeight	src/Graphics/Font.cpp	/^unsigned int Font::getHeight()$/;"	f	class:Font	signature:()
getHeight	src/Graphics/Font.h	/^        unsigned int getHeight();$/;"	p	class:Font	access:public	signature:()
getHeight	src/Graphics/Texture.cpp	/^const int Texture::getHeight() const$/;"	f	class:Texture	signature:() const
getHeight	src/Graphics/Texture.h	/^        const int getHeight() const;$/;"	p	class:Texture	access:public	signature:() const
getHeight	src/Math/Rect.h	/^        T getHeight() const$/;"	f	class:Rect	access:public	signature:() const
getInfo	src/Graphics/Font.cpp	/^FontInfo* Font::getInfo()$/;"	f	class:Font	signature:()
getInfo	src/Graphics/Font.h	/^        FontInfo* getInfo();$/;"	p	class:Font	access:public	signature:()
getKey	src/System/Input.cpp	/^int Input::getKey(const std::string& key)$/;"	f	class:Input	signature:(const std::string& key)
getKey	src/System/Input.h	/^        int getKey(const std::string& key);$/;"	p	class:Input	access:public	signature:(const std::string& key)
getLength	src/Graphics/Text.cpp	/^float Text::getLength() const$/;"	f	class:Text	signature:() const
getLength	src/Graphics/Text.h	/^        float getLength() const;$/;"	p	class:Text	access:public	signature:() const
getLength	src/Utils/FileLoader.cpp	/^size_t FileLoader::getLength()$/;"	f	class:FileLoader	signature:()
getLength	src/Utils/FileLoader.h	/^        size_t getLength();$/;"	p	class:FileLoader	access:public	signature:()
getLoop	src/Audio/Music.cpp	/^bool Music::getLoop()$/;"	f	class:Music	signature:()
getLoop	src/Audio/Music.h	/^        bool getLoop();$/;"	p	class:Music	access:public	signature:()
getLoop	src/Audio/Sound.cpp	/^bool Sound::getLoop() const$/;"	f	class:Sound	signature:() const
getLoop	src/Audio/Sound.h	/^        virtual bool getLoop() const;$/;"	p	class:Sound	access:public	signature:() const
getMousePos	src/System/Input.cpp	/^Vector2f Input::getMousePos() const$/;"	f	class:Input	signature:() const
getMousePos	src/System/Input.h	/^        Vector2f getMousePos() const;$/;"	p	class:Input	access:public	signature:() const
getParticleCount	test/Bullet/ParticleEmitter.cpp	/^const int ParticleEmitter::getParticleCount() const$/;"	f	class:ParticleEmitter	signature:() const
getParticleCount	test/Bullet/ParticleEmitter.h	/^        const int getParticleCount() const;$/;"	p	class:ParticleEmitter	access:public	signature:() const
getSampleCount	src/Audio/SoundBuffer.cpp	/^const std::size_t SoundBuffer::getSampleCount() const$/;"	f	class:SoundBuffer	signature:() const
getSampleCount	src/Audio/SoundBuffer.h	/^        const std::size_t getSampleCount() const;$/;"	p	class:SoundBuffer	access:public	signature:() const
getSamplesProcessed	src/Audio/Music.cpp	/^unsigned long Music::getSamplesProcessed()$/;"	f	class:Music	signature:()
getSamplesProcessed	src/Audio/Music.h	/^        unsigned long getSamplesProcessed();$/;"	p	class:Music	access:public	signature:()
getSeed	src/Math/Random.cpp	/^unsigned long Random::getSeed() const$/;"	f	class:Random	signature:() const
getSeed	src/Math/Random.h	/^        unsigned long getSeed() const;$/;"	p	class:Random	access:public	signature:() const
getSize	src/Utils/BinaryHeap.h	/^        size_t getSize() const$/;"	f	class:BinaryHeap	access:public	signature:() const
getSkittles	test/Bullet/Burst.cpp	/^bool Burst::getSkittles()$/;"	f	class:Burst	signature:()
getSkittles	test/Bullet/Burst.h	/^        bool getSkittles();$/;"	p	class:Burst	access:public	signature:()
getSource	src/Audio/Sound.cpp	/^ALuint Sound::getSource()$/;"	f	class:Sound	signature:()
getSource	src/Audio/Sound.h	/^        ALuint getSource();$/;"	p	class:Sound	access:public	signature:()
getState	src/Core/CoreRegistry.cpp	/^CoreState* CoreRegistry::getState(const std::string& identifier)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier)
getState	src/Core/CoreRegistry.h	/^        static CoreState* getState(const std::string& identifier);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier)
getStateCount	src/Core/CoreRegistry.cpp	/^int CoreRegistry::getStateCount()$/;"	f	class:CoreRegistry	signature:()
getStateCount	src/Core/CoreRegistry.h	/^        static int getStateCount();$/;"	p	class:CoreRegistry	access:public	signature:()
getStateName	src/Core/CoreRegistry.cpp	/^const std::string& CoreRegistry::getStateName(CoreState* s)$/;"	f	class:CoreRegistry	signature:(CoreState* s)
getStateName	src/Core/CoreRegistry.h	/^        static const std::string& getStateName(CoreState* s);$/;"	p	class:CoreRegistry	access:public	signature:(CoreState* s)
getStatus	src/Audio/Sound.cpp	/^Status Sound::getStatus()$/;"	f	class:Sound	signature:()
getStatus	src/Audio/Sound.h	/^        Status getStatus();$/;"	p	class:Sound	access:public	signature:()
getString	src/Graphics/Text.cpp	/^const std::string& Text::getString() const$/;"	f	class:Text	signature:() const
getString	src/Graphics/Text.h	/^        const std::string& getString() const;$/;"	p	class:Text	access:public	signature:() const
getTexture	src/Graphics/Font.cpp	/^unsigned int Font::getTexture()$/;"	f	class:Font	signature:()
getTexture	src/Graphics/Font.h	/^        unsigned int getTexture();$/;"	p	class:Font	access:public	signature:()
getTexture	src/Graphics/Texture.cpp	/^const GLuint Texture::getTexture() const$/;"	f	class:Texture	signature:() const
getTexture	src/Graphics/Texture.h	/^        const GLuint getTexture() const;$/;"	p	class:Texture	access:public	signature:() const
getTime	src/Audio/Music.cpp	/^float Music::getTime()$/;"	f	class:Music	signature:()
getTime	src/Audio/Music.h	/^        float getTime();$/;"	p	class:Music	access:public	signature:()
getTime	src/Audio/Sound.cpp	/^float Sound::getTime()$/;"	f	class:Sound	signature:()
getTime	src/Audio/Sound.h	/^        virtual float getTime();$/;"	p	class:Sound	access:public	signature:()
getTime	src/Utils/Timer.cpp	/^float Timer::getTime()$/;"	f	class:Timer	signature:()
getTime	src/Utils/Timer.h	/^        float getTime();$/;"	p	class:Timer	access:public	signature:()
getVelocity	test/Bullet/Particle.cpp	/^Vector2f& Particle::getVelocity()$/;"	f	class:Particle	signature:()
getVelocity	test/Bullet/Particle.h	/^        Vector2f& getVelocity();$/;"	p	class:Particle	access:public	signature:()
getVersion	src/Core/Core.cpp	/^const std::string& Core::getVersion()$/;"	f	class:Core	signature:()
getVersion	src/Core/Core.h	/^        static const std::string& getVersion();$/;"	p	class:Core	access:public	signature:()
getVertexBuffer	test/Bullet/ParticleMem.cpp	/^float* ParticleMem::getVertexBuffer() const$/;"	f	class:ParticleMem	signature:() const
getVertexBuffer	test/Bullet/ParticleMem.h	/^        float* getVertexBuffer() const;$/;"	p	class:ParticleMem	access:public	signature:() const
getVertexBufferSize	test/Bullet/ParticleMem.cpp	/^const int ParticleMem::getVertexBufferSize() const$/;"	f	class:ParticleMem	signature:() const
getVertexBufferSize	test/Bullet/ParticleMem.h	/^        const int getVertexBufferSize() const;$/;"	p	class:ParticleMem	access:public	signature:() const
getVolume	src/Audio/Listener.cpp	/^float Listener::getVolume()$/;"	f	class:Listener	signature:()
getVolume	src/Audio/Listener.h	/^        static float getVolume();$/;"	p	class:Listener	access:public	signature:()
getVolume	src/Audio/Sound.cpp	/^float Sound::getVolume()$/;"	f	class:Sound	signature:()
getVolume	src/Audio/Sound.h	/^        float getVolume();$/;"	p	class:Sound	access:public	signature:()
getWidth	src/Graphics/Texture.cpp	/^const int Texture::getWidth() const$/;"	f	class:Texture	signature:() const
getWidth	src/Graphics/Texture.h	/^        const int getWidth() const;$/;"	p	class:Texture	access:public	signature:() const
getWidth	src/Math/Rect.h	/^        T getWidth() const$/;"	f	class:Rect	access:public	signature:() const
get_chunk_header	src/stblib/stb_image.c	/^static chunk get_chunk_header(stbi *s)$/;"	f	file:	signature:(stbi *s)
get_marker	src/stblib/stb_image.c	/^static uint8 get_marker(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
getn	src/stblib/stb_image.c	/^static int getn(stbi *s, stbi_uc *buffer, int n)$/;"	f	file:	signature:(stbi *s, stbi_uc *buffer, int n)
gif_test	src/stblib/stb_image.c	/^static int gif_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
gl_BufferType	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::gl_BufferType[BufferType::MAX_BUFFER] = $/;"	m	class:VertexBuffer	file:
gl_BufferType	src/Graphics/VertexBuffer.h	/^        static const int gl_BufferType[BufferType::MAX_BUFFER];$/;"	m	class:VertexBuffer	access:private
gl_PrimitiveType	src/Graphics/VertexBuffer.cpp	/^const int VertexBuffer::gl_PrimitiveType[PrimitiveType::MAX_PRIMITIVE] = $/;"	m	class:VertexBuffer	file:
gl_PrimitiveType	src/Graphics/VertexBuffer.h	/^        static const int gl_PrimitiveType[PrimitiveType::MAX_PRIMITIVE];$/;"	m	class:VertexBuffer	access:private
glyf	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
glyphs	src/Graphics/Font.h	/^        Glyph glyphs[NUM_CHARS];$/;"	m	class:Font	access:protected
gotoBeginning	src/Utils/FileLoader.cpp	/^void FileLoader::gotoBeginning()$/;"	f	class:FileLoader	signature:()
gotoBeginning	src/Utils/FileLoader.h	/^        void gotoBeginning();$/;"	p	class:FileLoader	access:public	signature:()
grow_buffer_unsafe	src/stblib/stb_image.c	/^static void grow_buffer_unsafe(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
h	src/stblib/stb_image.c	/^      int h,v;$/;"	m	struct:__anon9::__anon10	file:	access:public
h	src/stblib/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
h	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
h2	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
h2l_gamma_i	src/stblib/stb_image.c	/^static float h2l_gamma_i=1.0f\/2.2f, h2l_scale_i=1.0f;$/;"	v	file:
h2l_scale_i	src/stblib/stb_image.c	/^static float h2l_gamma_i=1.0f\/2.2f, h2l_scale_i=1.0f;$/;"	v	file:
ha	src/stblib/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10	file:	access:public
handleInput	src/Core/CoreState.h	/^        virtual void handleInput(Input& i, int value, int action) = 0;$/;"	p	class:CoreState	access:public	signature:(Input& i, int value, int action)
handleInput	test/GameState.cpp	/^void GameState::handleInput(Input& input, int value, int action)$/;"	f	class:GameState	signature:(Input& input, int value, int action)
handleInput	test/GameState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:GameState	access:public	signature:(Input& input, int value, int action)
handleInput	test/Menu.cpp	/^void Menu::handleInput(Input& input, int key, int action)$/;"	f	class:Menu	signature:(Input& input, int key, int action)
handleInput	test/Menu.h	/^        void handleInput(Input& input, int key, int action);$/;"	p	class:Menu	access:public	signature:(Input& input, int key, int action)
handleInput	test/MusicState.cpp	/^void MusicState::handleInput(Input& input, int value, int action)$/;"	f	class:MusicState	signature:(Input& input, int value, int action)
handleInput	test/MusicState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:MusicState	access:public	signature:(Input& input, int value, int action)
handleInput	test/PatternState.cpp	/^void PatternState::handleInput(Input& input, int value, int action)$/;"	f	class:PatternState	signature:(Input& input, int value, int action)
handleInput	test/PatternState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:PatternState	access:public	signature:(Input& input, int value, int action)
handleInput	test/TestState.cpp	/^void TestState::handleInput(Input& input, int value, int action)$/;"	f	class:TestState	signature:(Input& input, int value, int action)
handleInput	test/TestState.h	/^        void handleInput(Input& input, int value, int action);$/;"	p	class:TestState	access:public	signature:(Input& input, int value, int action)
hd	src/stblib/stb_image.c	/^      int hd,ha;$/;"	m	struct:__anon9::__anon10	file:	access:public
hdr_convert	src/stblib/stb_image.c	/^static void hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	file:	signature:(float *output, stbi_uc *input, int req_comp)
hdr_gettoken	src/stblib/stb_image.c	/^static char *hdr_gettoken(stbi *z, char *buffer)$/;"	f	file:	signature:(stbi *z, char *buffer)
hdr_load	src/stblib/stb_image.c	/^static float *hdr_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
hdr_test	src/stblib/stb_image.c	/^static int hdr_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
hdr_to_ldr	src/stblib/stb_image.c	/^static stbi_uc *hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	file:	signature:(float *data, int x, int y, int comp)
hdr_to_ldr	src/stblib/stb_image.c	/^static stbi_uc *hdr_to_ldr(float   *data, int x, int y, int comp);$/;"	p	file:	signature:(float *data, int x, int y, int comp)
head	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
height	src/Core/Core.cpp	/^unsigned int Core::height = 0;$/;"	m	class:Core	file:
height	src/Core/Core.h	/^        static unsigned int height;$/;"	m	class:Core	access:private
height	src/Graphics/Font.h	/^        unsigned int height;$/;"	m	class:Font	access:protected
height	src/Graphics/Texture.h	/^        int height;$/;"	m	class:Texture	access:protected
held	test/GameState.h	/^        bool held;$/;"	m	class:GameState	access:private
hhea	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
high_bit	src/stblib/stb_image.c	/^static int high_bit(unsigned int z)$/;"	f	file:	signature:(unsigned int z)
hmtx	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
hs	src/stblib/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11	file:	access:public
huff_ac	src/stblib/stb_image.c	/^   huffman huff_ac[4];$/;"	m	struct:__anon9	file:	access:public
huff_dc	src/stblib/stb_image.c	/^   huffman huff_dc[4];$/;"	m	struct:__anon9	file:	access:public
huffman	src/stblib/stb_image.c	/^} huffman;$/;"	t	typeref:struct:__anon8	file:
id	src/stblib/stb_image.c	/^      int id;$/;"	m	struct:__anon9::__anon10	file:	access:public
idata	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
idct_block	src/stblib/stb_image.c	/^static void idct_block(uint8 *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f	file:	signature:(uint8 *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)
img_buffer	src/stblib/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6	file:	access:public
img_buffer_end	src/stblib/stb_image.c	/^   uint8 *img_buffer, *img_buffer_end;$/;"	m	struct:__anon6	file:	access:public
img_buffer_original	src/stblib/stb_image.c	/^   uint8 *img_buffer_original;$/;"	m	struct:__anon6	file:	access:public
img_comp	src/stblib/stb_image.c	/^   } img_comp[4];$/;"	m	struct:__anon9	typeref:struct:__anon9::__anon10	file:	access:public
img_h_max	src/stblib/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9	file:	access:public
img_mcu_h	src/stblib/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9	file:	access:public
img_mcu_w	src/stblib/stb_image.c	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon9	file:	access:public
img_mcu_x	src/stblib/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9	file:	access:public
img_mcu_y	src/stblib/stb_image.c	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon9	file:	access:public
img_n	src/stblib/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon6	file:	access:public
img_out_n	src/stblib/stb_image.c	/^   int img_n, img_out_n;$/;"	m	struct:__anon6	file:	access:public
img_v_max	src/stblib/stb_image.c	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon9	file:	access:public
img_x	src/stblib/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon6	file:	access:public
img_y	src/stblib/stb_image.c	/^   uint32 img_x, img_y;$/;"	m	struct:__anon6	file:	access:public
indexToLocFormat	src/stblib/stb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:__anon20	access:public
index_map	src/stblib/stb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:__anon20	access:public
init	src/Audio/Listener.cpp	/^void Listener::init()$/;"	f	class:Listener	signature:()
init	src/Audio/Listener.h	/^        static void init();$/;"	p	class:Listener	access:public	signature:()
init	src/Core/Core.cpp	/^void Core::init(std::string title, unsigned int width, unsigned int height, bool fullscreen)$/;"	f	class:Core	signature:(std::string title, unsigned int width, unsigned int height, bool fullscreen)
init	src/Core/Core.h	/^        static void init(std::string title, unsigned int width, unsigned int height, bool fullscreen);$/;"	p	class:Core	access:public	signature:(std::string title, unsigned int width, unsigned int height, bool fullscreen)
init	src/Core/CoreState.cpp	/^void CoreState::init(ResourceManager& resources)$/;"	f	class:CoreState	signature:(ResourceManager& resources)
init	src/Core/CoreState.h	/^        virtual void init(ResourceManager& resources);$/;"	p	class:CoreState	access:public	signature:(ResourceManager& resources)
init	src/Graphics/FontLoader.cpp	/^void FontLoader::init()$/;"	f	class:FontLoader	signature:()
init	src/Graphics/FontLoader.h	/^        static void init();$/;"	p	class:FontLoader	access:public	signature:()
init	src/Graphics/Renderer.cpp	/^void Renderer::init() const$/;"	f	class:Renderer	signature:() const
init	src/Graphics/Renderer.h	/^        void init() const;$/;"	p	class:Renderer	access:public	signature:() const
init	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::init()$/;"	f	class:VertexBuffer	signature:()
init	src/Graphics/VertexBuffer.h	/^        void init();$/;"	p	class:VertexBuffer	access:public	signature:()
init	test/GameState.cpp	/^void GameState::init(ResourceManager& resources)$/;"	f	class:GameState	signature:(ResourceManager& resources)
init	test/GameState.h	/^        void init(ResourceManager& resources);$/;"	p	class:GameState	access:public	signature:(ResourceManager& resources)
init	test/MusicState.cpp	/^void MusicState::init(ResourceManager& resources)$/;"	f	class:MusicState	signature:(ResourceManager& resources)
init	test/MusicState.h	/^        void init(ResourceManager& resources);$/;"	p	class:MusicState	access:public	signature:(ResourceManager& resources)
init	test/PatternState.cpp	/^void PatternState::init(ResourceManager& resources)$/;"	f	class:PatternState	signature:(ResourceManager& resources)
init	test/PatternState.h	/^        void init(ResourceManager& resources);$/;"	p	class:PatternState	access:public	signature:(ResourceManager& resources)
init	test/TestState.cpp	/^void TestState::init(ResourceManager& resources)$/;"	f	class:TestState	signature:(ResourceManager& resources)
init	test/TestState.h	/^        void init(ResourceManager& resources);$/;"	p	class:TestState	access:public	signature:(ResourceManager& resources)
initGLFW	src/Core/Core.cpp	/^bool Core::initGLFW()$/;"	f	class:Core	signature:()
initGLFW	src/Core/Core.h	/^        static bool initGLFW();$/;"	p	class:Core	access:private	signature:()
init_defaults	src/stblib/stb_image.c	/^static void init_defaults(void)$/;"	f	file:	signature:(void)
initialized	src/Core/CoreState.h	/^        bool initialized;$/;"	m	class:CoreState	access:protected
input	src/Core/Core.cpp	/^Input* Core::input = NULL;$/;"	m	class:Core	file:
input	src/Core/Core.h	/^        static Input* input;$/;"	m	class:Core	access:private
int16	src/stblib/stb_image.c	/^typedef   signed short  int16;$/;"	t	file:
int32	src/stblib/stb_image.c	/^typedef   signed int    int32;$/;"	t	file:
invert	src/stblib/stb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	access:public
io	src/stblib/stb_image.c	/^   stbi_io_callbacks io;$/;"	m	struct:__anon6	file:	access:public
io_user_data	src/stblib/stb_image.c	/^   void *io_user_data;$/;"	m	struct:__anon6	file:	access:public
isAlive	test/Bullet/Particle.cpp	/^bool Particle::isAlive() const$/;"	f	class:Particle	signature:() const
isAlive	test/Bullet/Particle.h	/^        bool isAlive() const;$/;"	p	class:Particle	access:public	signature:() const
isInitialized	src/Core/CoreState.cpp	/^bool CoreState::isInitialized() const$/;"	f	class:CoreState	signature:() const
isInitialized	src/Core/CoreState.h	/^        bool isInitialized() const;$/;"	p	class:CoreState	access:public	signature:() const
isOpen	src/Utils/FileLoader.cpp	/^bool FileLoader::isOpen()$/;"	f	class:FileLoader	signature:()
isOpen	src/Utils/FileLoader.h	/^        bool isOpen();$/;"	p	class:FileLoader	access:public	signature:()
isPaused	src/Audio/Sound.cpp	/^bool Sound::isPaused()$/;"	f	class:Sound	signature:()
isPaused	src/Audio/Sound.h	/^        bool isPaused();$/;"	p	class:Sound	access:public	signature:()
isPaused	src/Utils/Timer.cpp	/^bool Timer::isPaused()$/;"	f	class:Timer	signature:()
isPaused	src/Utils/Timer.h	/^        bool isPaused();$/;"	p	class:Timer	access:public	signature:()
isPlaying	src/Audio/Sound.cpp	/^bool Sound::isPlaying()$/;"	f	class:Sound	signature:()
isPlaying	src/Audio/Sound.h	/^        bool isPlaying();$/;"	p	class:Sound	access:public	signature:()
isStarted	src/Utils/Timer.cpp	/^bool Timer::isStarted()$/;"	f	class:Timer	signature:()
isStarted	src/Utils/Timer.h	/^        bool isStarted();$/;"	p	class:Timer	access:public	signature:()
isStreaming	src/Audio/Music.cpp	/^bool Music::isStreaming()$/;"	f	class:Music	signature:()
isStreaming	src/Audio/Music.h	/^        bool isStreaming();$/;"	p	class:Music	access:public	signature:()
items	test/Menu.h	/^        std::vector<Text> items;$/;"	m	class:Menu	access:private
jpeg	src/stblib/stb_image.c	/^} jpeg;$/;"	t	typeref:struct:__anon9	file:
kern	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
keyInput	src/Core/Core.cpp	/^void GLFWCALL Core::keyInput(int key, int action)$/;"	f	class:Core	signature:(int key, int action)
keyInput	src/Core/Core.h	/^        static void keyInput(int key, int action); $/;"	p	class:Core	access:public	signature:(int key, int action)
keys	src/System/Input.h	/^        std::map<std::string, int> keys;$/;"	m	class:Input	access:private
killTexture	src/Graphics/Texture.cpp	/^void Texture::killTexture()$/;"	f	class:Texture	signature:()
killTexture	src/Graphics/Texture.h	/^        void killTexture();$/;"	p	class:Texture	access:public	signature:()
l2h_gamma	src/stblib/stb_image.c	/^static float l2h_gamma=2.2f, l2h_scale=1.0f;$/;"	v	file:
l2h_scale	src/stblib/stb_image.c	/^static float l2h_gamma=2.2f, l2h_scale=1.0f;$/;"	v	file:
lastTime	src/Utils/FpsCounter.h	/^        float lastTime;$/;"	m	class:FpsCounter	access:private
ldr_to_hdr	src/stblib/stb_image.c	/^static float   *ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	file:	signature:(stbi_uc *data, int x, int y, int comp)
ldr_to_hdr	src/stblib/stb_image.c	/^static float   *ldr_to_hdr(stbi_uc *data, int x, int y, int comp);$/;"	p	file:	signature:(stbi_uc *data, int x, int y, int comp)
left	src/Math/Rect.h	/^        T left;$/;"	m	class:Rect	access:public
length	src/Graphics/Text.h	/^        float length;$/;"	m	class:Text	access:private
length	src/Memory/Buffer.h	/^        size_t length;$/;"	m	class:Buffer	access:protected
length	src/Utils/FileLoader.h	/^        size_t length;$/;"	m	class:FileLoader	access:private
length	src/stblib/stb_image.c	/^   uint32 length;$/;"	m	struct:__anon14	file:	access:public
length_base	src/stblib/stb_image.c	/^static int length_base[31] = {$/;"	v	file:
length_extra	src/stblib/stb_image.c	/^static int length_extra[31]= $/;"	v	file:
lflags	src/stblib/stb_image.c	/^   int lflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
life	test/Bullet/Particle.h	/^        float life;$/;"	m	class:Particle	access:protected
life	test/Bullet/Particle.h	/^    float life;$/;"	m	struct:ParticleProperties	access:public
line	test/Menu.h	/^        VertexBuffer line;$/;"	m	class:Menu	access:private
line	test/TestState.h	/^        VertexBuffer* line;$/;"	m	class:TestState	access:private
line0	src/stblib/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon11	file:	access:public
line1	src/stblib/stb_image.c	/^   uint8 *line0,*line1;$/;"	m	struct:__anon11	file:	access:public
line_size	src/stblib/stb_image.c	/^   int line_size;$/;"	m	struct:stbi_gif_struct	file:	access:public
linearInterpolate	src/Graphics/Color.cpp	/^Color linearInterpolate(const Color& color1, const Color& color2, float stepSize)$/;"	f	signature:(const Color& color1, const Color& color2, float stepSize)
linearInterpolate	src/Graphics/Color.h	/^Color linearInterpolate(const Color& color1, const Color& color2, float stepSize);$/;"	p	signature:(const Color& color1, const Color& color2, float stepSize)
linearInterpolate	src/Math/Vector2.cpp	/^Vector2f linearInterpolate(Vector2f a, Vector2f b, float step)$/;"	f	signature:(Vector2f a, Vector2f b, float step)
linearInterpolate	src/Math/Vector2.cpp	/^float linearInterpolate(float a, float b, float step)$/;"	f	signature:(float a, float b, float step)
linearInterpolate	src/Math/Vector2.h	/^Vector2f linearInterpolate(Vector2f a, Vector2f b, float step);$/;"	p	signature:(Vector2f a, Vector2f b, float step)
linearInterpolate	src/Math/Vector2.h	/^float linearInterpolate(float a, float b, float step);$/;"	p	signature:(float a, float b, float step)
linebuf	src/stblib/stb_image.c	/^      uint8 *linebuf;$/;"	m	struct:__anon9::__anon10	file:	access:public
loadChunk	src/Audio/Music.cpp	/^bool Music::loadChunk(SoundChunk& c)$/;"	f	class:Music	signature:(SoundChunk& c)
loadChunk	src/Audio/Music.h	/^        bool loadChunk(SoundChunk& c);$/;"	p	class:Music	access:public	signature:(SoundChunk& c)
loadFile	src/Utils/FileLoader.cpp	/^void FileLoader::loadFile(const std::string& filename, Mode m)$/;"	f	class:FileLoader	signature:(const std::string& filename, Mode m)
loadFile	src/Utils/FileLoader.h	/^        void loadFile(const std::string& filename, Mode m);$/;"	p	class:FileLoader	access:public	signature:(const std::string& filename, Mode m)
loadFile	src/Utils/Ini.cpp	/^bool Ini::loadFile(const std::string& Filename)$/;"	f	class:Ini	signature:(const std::string& Filename)
loadFile	src/Utils/Ini.h	/^        bool loadFile(const std::string& Filename);$/;"	p	class:Ini	access:public	signature:(const std::string& Filename)
loadFont	src/Graphics/Font.cpp	/^void Font::loadFont(const std::string& filename, unsigned int charSize)$/;"	f	class:Font	signature:(const std::string& filename, unsigned int charSize)
loadFont	src/Graphics/Font.h	/^        void loadFont(const std::string& filename, unsigned int charSize);$/;"	p	class:Font	access:public	signature:(const std::string& filename, unsigned int charSize)
loadFont	src/Graphics/FontLoader.cpp	/^bool FontLoader::loadFont(const std::string& Filename, unsigned int& texture,$/;"	f	class:FontLoader	signature:(const std::string& Filename, unsigned int& texture, unsigned int& height, unsigned char* buffer, Glyph* glyphs, FontInfo& fontinfo)
loadFont	src/Graphics/FontLoader.h	/^        static bool loadFont(const std::string& Filename, unsigned int& texture, $/;"	p	class:FontLoader	access:public	signature:(const std::string& Filename, unsigned int& texture, unsigned int& height, unsigned char* buffer, Glyph* glyphs, FontInfo& fontinfo)
loadFromFile	src/Audio/SoundBuffer.cpp	/^void SoundBuffer::loadFromFile(const std::string& filename)$/;"	f	class:SoundBuffer	signature:(const std::string& filename)
loadFromFile	src/Audio/SoundBuffer.h	/^        void loadFromFile(const std::string& filename);$/;"	p	class:SoundBuffer	access:public	signature:(const std::string& filename)
loadImage	src/Graphics/ImageLoader.cpp	/^unsigned char* ImageLoader::loadImage(const std::string& Filename, $/;"	f	class:ImageLoader	signature:(const std::string& Filename, int& width, int& height, int& mode)
loadImage	src/Graphics/ImageLoader.cpp	/^unsigned char* ImageLoader::loadImage(const unsigned char* data, int size, $/;"	f	class:ImageLoader	signature:(const unsigned char* data, int size, int& width, int& height, int& mode)
loadImage	src/Graphics/ImageLoader.h	/^        static unsigned char* loadImage(const std::string& Filename, $/;"	p	class:ImageLoader	access:public	signature:(const std::string& Filename, int& width, int& height, int& mode)
loadImage	src/Graphics/ImageLoader.h	/^        static unsigned char* loadImage(const unsigned char* data, int size, $/;"	p	class:ImageLoader	access:public	signature:(const unsigned char* data, int size, int& width, int& height, int& mode)
loadImage	src/Graphics/Texture.cpp	/^bool Texture::loadImage(const std::string& Filename)$/;"	f	class:Texture	signature:(const std::string& Filename)
loadImage	src/Graphics/Texture.h	/^        bool loadImage(const std::string& Filename);$/;"	p	class:Texture	access:public	signature:(const std::string& Filename)
loadImageMemory	src/Graphics/Texture.cpp	/^bool Texture::loadImageMemory(const unsigned char* data, int size)$/;"	f	class:Texture	signature:(const unsigned char* data, int size)
loadImageMemory	src/Graphics/Texture.h	/^        bool loadImageMemory(const unsigned char* data, int size);$/;"	p	class:Texture	access:public	signature:(const unsigned char* data, int size)
loadSound	src/Audio/Music.cpp	/^void Music::loadSound(const std::string& filename)$/;"	f	class:Music	signature:(const std::string& filename)
loadSound	src/Audio/Music.h	/^        void loadSound(const std::string& filename);$/;"	p	class:Music	access:public	signature:(const std::string& filename)
loadSound	src/Audio/Sample.cpp	/^void Sample::loadSound(const std::string& filename)$/;"	f	class:Sample	signature:(const std::string& filename)
loadSound	src/Audio/Sample.h	/^        void loadSound(const std::string& filename);$/;"	p	class:Sample	access:public	signature:(const std::string& filename)
loadSound	src/Audio/Sound.h	/^        virtual void loadSound(const std::string& filename) = 0;$/;"	p	class:Sound	access:public	signature:(const std::string& filename)
load_jpeg_image	src/stblib/stb_image.c	/^static uint8 *load_jpeg_image(jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	file:	signature:(jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
loaded	src/Graphics/Texture.h	/^        bool loaded;$/;"	m	class:Texture	access:protected
loca	src/stblib/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern; \/\/ table locations as offset from start of .ttf$/;"	m	struct:__anon20	access:public
log	src/System/Log.cpp	/^void log(const std::string& str)$/;"	f	signature:(const std::string& str)
log	src/System/Log.h	/^void log(const std::string& str);$/;"	p	signature:(const std::string& str)
logf	src/System/Log.cpp	/^void logf(const char *format, ...)$/;"	f	signature:(const char *format, ...)
logf	src/System/Log.h	/^void logf(const char* format, ...);$/;"	p	signature:(const char* format, ...)
logic	src/Core/CoreState.h	/^        virtual void logic(float timeStep) = 0;$/;"	p	class:CoreState	access:public	signature:(float timeStep)
logic	test/Bullet/Particle.cpp	/^void Particle::logic(float step, float* vertices, float* colors)$/;"	f	class:Particle	signature:(float step, float* vertices, float* colors)
logic	test/Bullet/Particle.h	/^        void logic(float step, float* vertices, float* colors);$/;"	p	class:Particle	access:public	signature:(float step, float* vertices, float* colors)
logic	test/Bullet/ParticleEmitter.cpp	/^void ParticleEmitter::logic(float step)$/;"	f	class:ParticleEmitter	signature:(float step)
logic	test/Bullet/ParticleEmitter.h	/^        void logic(float step);$/;"	p	class:ParticleEmitter	access:public	signature:(float step)
logic	test/GameState.cpp	/^void GameState::logic(float timeStep)$/;"	f	class:GameState	signature:(float timeStep)
logic	test/GameState.h	/^        void logic(float timeStep);$/;"	p	class:GameState	access:public	signature:(float timeStep)
logic	test/MusicState.cpp	/^void MusicState::logic(float timeStep)$/;"	f	class:MusicState	signature:(float timeStep)
logic	test/MusicState.h	/^        void logic(float timeStep);$/;"	p	class:MusicState	access:public	signature:(float timeStep)
logic	test/PatternState.cpp	/^void PatternState::logic(float timeStep)$/;"	f	class:PatternState	signature:(float timeStep)
logic	test/PatternState.h	/^        void logic(float timeStep);$/;"	p	class:PatternState	access:public	signature:(float timeStep)
logic	test/TestState.cpp	/^void TestState::logic(float timeStep)$/;"	f	class:TestState	signature:(float timeStep)
logic	test/TestState.h	/^        void logic(float timeStep);$/;"	p	class:TestState	access:public	signature:(float timeStep)
longest	test/Menu.h	/^        float longest;$/;"	m	class:Menu	access:private
loop	src/Audio/Music.h	/^        bool loop;$/;"	m	class:Music	access:private
lpal	src/stblib/stb_image.c	/^   uint8 lpal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
ltrim	src/Utils/StringUtils.cpp	/^std::string& ltrim(std::string& s) $/;"	f	signature:(std::string& s)
ltrim	src/Utils/StringUtils.h	/^std::string& ltrim(std::string& s);$/;"	p	signature:(std::string& s)
magnitude	src/Math/Vector2.h	/^        float magnitude()$/;"	f	class:Vector2	access:public	signature:()
main	src/stblib/stb_truetype.h	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/main.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
make	test/Menu.cpp	/^void Menu::make()$/;"	f	class:Menu	signature:()
make	test/Menu.h	/^        void make();$/;"	p	class:Menu	access:public	signature:()
makeText	src/System/ResourceCache.cpp	/^Text FontCache::makeText(const std::string& identifier)$/;"	f	class:FontCache	signature:(const std::string& identifier)
makeText	src/System/ResourceCache.cpp	/^Text FontCache::makeText(const std::string& identifier, const std::string& str)$/;"	f	class:FontCache	signature:(const std::string& identifier, const std::string& str)
makeText	src/System/ResourceCache.h	/^        Text makeText(const std::string& identifier);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier)
makeText	src/System/ResourceCache.h	/^        Text makeText(const std::string& identifier, const std::string& str);$/;"	p	class:FontCache	access:public	signature:(const std::string& identifier, const std::string& str)
margin	test/Menu.h	/^    int margin;$/;"	m	struct:MenuMetrics	access:public
marker	src/stblib/stb_image.c	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon9	file:	access:public
max	src/Math/Math.cpp	/^int Math::max(int a, int b)$/;"	f	class:Math	signature:(int a, int b)
max	src/Math/Math.h	/^    int max(int a, int b);$/;"	p	namespace:Math	signature:(int a, int b)
max_x	src/stblib/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
max_y	src/stblib/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
maxcode	src/stblib/stb_image.c	/^   int maxcode[17];$/;"	m	struct:__anon12	file:	access:public
maxcode	src/stblib/stb_image.c	/^   unsigned int maxcode[18];$/;"	m	struct:__anon8	file:	access:public
mem	test/Bullet/ParticleMem.h	/^        Particle* mem;$/;"	m	class:ParticleMem	access:protected
menu	test/MusicState.h	/^        Menu* menu;$/;"	m	class:MusicState	access:private
menu	test/TestState.h	/^        Menu* menu;$/;"	m	class:TestState	access:private
metrics	test/Menu.h	/^        MenuMetrics metrics;$/;"	m	class:Menu	access:private
min	src/Math/Math.cpp	/^int Math::min(int a, int b)$/;"	f	class:Math	signature:(int a, int b)
min	src/Math/Math.h	/^    int min(int a, int b);$/;"	p	namespace:Math	signature:(int a, int b)
mode	src/Graphics/Texture.h	/^        int mode;$/;"	m	class:Texture	access:protected
mode	src/Utils/FileLoader.h	/^        Mode mode;$/;"	m	class:FileLoader	access:private
mouseInput	src/Core/Core.cpp	/^void GLFWCALL Core::mouseInput(int button, int action)$/;"	f	class:Core	signature:(int button, int action)
mouseInput	src/Core/Core.h	/^        static void mouseInput(int button, int action); $/;"	p	class:Core	access:public	signature:(int button, int action)
mouseMoveInput	src/Core/Core.cpp	/^void GLFWCALL Core::mouseMoveInput(int x, int y)$/;"	f	class:Core	signature:(int x, int y)
mouseMoveInput	src/Core/Core.h	/^        static void mouseMoveInput(int x, int y);$/;"	p	class:Core	access:public	signature:(int x, int y)
move	src/Memory/Buffer.h	/^        void move(int offset);$/;"	p	class:Buffer	access:public	signature:(int offset)
music	test/MusicState.h	/^        SoundPtr music;$/;"	m	class:MusicState	access:private
my_stbtt_initfont	src/stblib/stb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f	signature:(void)
my_stbtt_print	src/stblib/stb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f	signature:(float x, float y, char *text)
new_active	src/stblib/stb_truetype.h	/^static stbtt__active_edge *new_active(stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f	signature:(stbtt__edge *e, int off_x, float start_point, void *userdata)
newline	test/Menu.h	/^    int newline;$/;"	m	struct:MenuMetrics	access:public
next	src/stblib/stb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge	access:public
nextPow2	src/Math/Math.cpp	/^unsigned int Math::nextPow2(register unsigned int n)$/;"	f	class:Math	signature:(register unsigned int n)
nextPow2	src/Math/Math.h	/^    unsigned int nextPow2(register unsigned int n);$/;"	p	namespace:Math	signature:(register unsigned int n)
nomore	src/stblib/stb_image.c	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon9	file:	access:public
normalize	src/Math/Vector2.h	/^        Vector2<T> normalize()$/;"	f	class:Vector2	access:public	signature:()
numGlyphs	src/stblib/stb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:__anon20	access:public
num_bits	src/stblib/stb_image.c	/^   int num_bits;$/;"	m	struct:__anon13	file:	access:public
numberString	src/Utils/StringUtils.cpp	/^std::string numberString(int number)$/;"	f	signature:(int number)
numberString	src/Utils/StringUtils.h	/^std::string numberString(int number);$/;"	p	signature:(int number)
offset	src/Math/Rect.h	/^        void offset(T offsetx, T offsety)$/;"	f	class:Rect	access:public	signature:(T offsetx, T offsety)
offsetTime	src/Utils/Timer.cpp	/^void Timer::offsetTime(float time)$/;"	f	class:Timer	signature:(float time)
offsetTime	src/Utils/Timer.h	/^        void offsetTime(float time);$/;"	p	class:Timer	access:public	signature:(float time)
operator !=	src/Graphics/Color.h	/^        bool operator!=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
operator !=	src/Math/Vector2.h	/^        bool operator!=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
operator *	src/Graphics/Color.h	/^        Color operator*(float n) const$/;"	f	class:Color	access:public	signature:(float n) const
operator *	src/Math/Vector2.h	/^        Vector2<T> operator*(T n) const$/;"	f	class:Vector2	access:public	signature:(T n) const
operator *=	src/Graphics/Color.h	/^        Color operator*=(float n)$/;"	f	class:Color	access:public	signature:(float n)
operator *=	src/Math/Vector2.h	/^        Vector2<T> operator*=(T n)$/;"	f	class:Vector2	access:public	signature:(T n)
operator +	src/Graphics/Color.h	/^        Color operator+(const Color& c) const$/;"	f	class:Color	access:public	signature:(const Color& c) const
operator +	src/Math/Vector2.h	/^        Vector2<T> operator+(const Vector2<T>& v) const$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v) const
operator +=	src/Graphics/Color.h	/^        Color operator+=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
operator +=	src/Math/Vector2.h	/^        Vector2<T> operator+=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
operator -	src/Graphics/Color.h	/^        Color operator-(const Color& c) const$/;"	f	class:Color	access:public	signature:(const Color& c) const
operator -	src/Math/Vector2.h	/^        Vector2<T> operator-(const Vector2<T>& v) const$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v) const
operator -=	src/Graphics/Color.h	/^        Color operator-=(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
operator -=	src/Math/Vector2.h	/^        Vector2<T> operator-=(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
operator /	src/Graphics/Color.h	/^        Color operator\/(float n) const$/;"	f	class:Color	access:public	signature:(float n) const
operator /	src/Math/Vector2.h	/^        Vector2<T> operator\/(T n) const$/;"	f	class:Vector2	access:public	signature:(T n) const
operator /=	src/Graphics/Color.h	/^        Color operator\/=(float n)$/;"	f	class:Color	access:public	signature:(float n)
operator /=	src/Math/Vector2.h	/^        Vector2<T> operator\/=(T n)$/;"	f	class:Vector2	access:public	signature:(T n)
operator ==	src/Graphics/Color.h	/^        bool operator==(const Color& c)$/;"	f	class:Color	access:public	signature:(const Color& c)
operator ==	src/Math/Vector2.h	/^        bool operator==(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
operator []	src/System/Input.cpp	/^int Input::operator[](const std::string& key)$/;"	f	class:Input	signature:(const std::string& key)
operator []	src/System/Input.h	/^        int operator[](const std::string& key);$/;"	p	class:Input	access:public	signature:(const std::string& key)
operator []	src/System/ResourceCache.h	/^        ResourcePointer operator[] (const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
operator []	src/Utils/Ini.cpp	/^std::string Ini::operator[](const std::string& identifier)$/;"	f	class:Ini	signature:(const std::string& identifier)
operator []	src/Utils/Ini.h	/^        std::string operator[](const std::string& identifier);$/;"	p	class:Ini	access:public	signature:(const std::string& identifier)
order	src/stblib/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon9	file:	access:public
out	src/stblib/stb_image.c	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:stbi_gif_struct	file:	access:public
out	src/stblib/stb_image.c	/^   uint8 *idata, *expanded, *out;$/;"	m	struct:__anon15	file:	access:public
outline	test/Menu.h	/^        VertexBuffer outline;$/;"	m	class:Menu	access:private
p	test/Bullet/Burst.cpp	/^ParticleProperties Burst::p = $/;"	m	class:Burst	file:
p	test/Bullet/Burst.h	/^        static ParticleProperties p;$/;"	m	class:Burst	access:private
padding	src/stblib/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon22	access:public
paeth	src/stblib/stb_image.c	/^static int paeth(int a, int b, int c)$/;"	f	file:	signature:(int a, int b, int c)
pal	src/stblib/stb_image.c	/^   uint8  pal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
parse	src/stblib/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
parse_entropy_coded_data	src/stblib/stb_image.c	/^static int parse_entropy_coded_data(jpeg *z)$/;"	f	file:	signature:(jpeg *z)
parse_huffman_block	src/stblib/stb_image.c	/^static int parse_huffman_block(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
parse_png_file	src/stblib/stb_image.c	/^static int parse_png_file(png *z, int scan, int req_comp)$/;"	f	file:	signature:(png *z, int scan, int req_comp)
parse_uncompressed_block	src/stblib/stb_image.c	/^static int parse_uncompressed_block(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
parse_zlib	src/stblib/stb_image.c	/^static int parse_zlib(zbuf *a, int parse_header)$/;"	f	file:	signature:(zbuf *a, int parse_header)
parse_zlib_header	src/stblib/stb_image.c	/^static int parse_zlib_header(zbuf *a)$/;"	f	file:	signature:(zbuf *a)
particles	test/Bullet/ParticleEmitter.h	/^        ParticleMem* particles;$/;"	m	class:ParticleEmitter	access:protected
pause	src/Audio/Sound.cpp	/^void Sound::pause()$/;"	f	class:Sound	signature:()
pause	src/Audio/Sound.h	/^        void pause();$/;"	p	class:Sound	access:public	signature:()
pause	src/Utils/Timer.cpp	/^void Timer::pause()$/;"	f	class:Timer	signature:()
pause	src/Utils/Timer.h	/^        void pause();$/;"	p	class:Timer	access:public	signature:()
pauseTicks	src/Utils/Timer.h	/^        float pauseTicks;$/;"	m	class:Timer	access:private
paused	src/Utils/Timer.h	/^        bool paused;$/;"	m	class:Timer	access:private
percolateDown	src/Utils/BinaryHeap.h	/^        void percolateDown(int hole)$/;"	f	class:BinaryHeap	access:public	signature:(int hole)
percolateUp	src/Utils/BinaryHeap.h	/^        void percolateUp(int hole, const T* element)$/;"	f	class:BinaryHeap	access:public	signature:(int hole, const T* element)
pic_copyval	src/stblib/stb_image.c	/^static void pic_copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	file:	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
pic_is4	src/stblib/stb_image.c	/^static int pic_is4(stbi *s,const char *str)$/;"	f	file:	signature:(stbi *s,const char *str)
pic_load	src/stblib/stb_image.c	/^static stbi_uc *pic_load(stbi *s,int *px,int *py,int *comp,int req_comp)$/;"	f	file:	signature:(stbi *s,int *px,int *py,int *comp,int req_comp)
pic_load2	src/stblib/stb_image.c	/^static stbi_uc *pic_load2(stbi *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	file:	signature:(stbi *s,int width,int height,int *comp, stbi_uc *result)
pic_packet_t	src/stblib/stb_image.c	/^} pic_packet_t;$/;"	t	typeref:struct:__anon17	file:
pic_readval	src/stblib/stb_image.c	/^static stbi_uc *pic_readval(stbi *s, int channel, stbi_uc *dest)$/;"	f	file:	signature:(stbi *s, int channel, stbi_uc *dest)
pic_test	src/stblib/stb_image.c	/^static int pic_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
pixels	src/stblib/stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon23	access:public
play	src/Audio/Music.cpp	/^void Music::play()$/;"	f	class:Music	signature:()
play	src/Audio/Music.h	/^        void play();$/;"	p	class:Music	access:public	signature:()
play	src/Audio/Sound.cpp	/^void Sound::play()$/;"	f	class:Sound	signature:()
play	src/Audio/Sound.h	/^        virtual void play();$/;"	p	class:Sound	access:public	signature:()
png	src/stblib/stb_image.c	/^} png;$/;"	t	typeref:struct:__anon15	file:
popAllStates	src/Core/Core.cpp	/^void Core::popAllStates()$/;"	f	class:Core	signature:()
popAllStates	src/Core/Core.h	/^        static void popAllStates();$/;"	p	class:Core	access:public	signature:()
popBuffer	src/Audio/Music.cpp	/^unsigned int Music::popBuffer()$/;"	f	class:Music	signature:()
popBuffer	src/Audio/Music.h	/^        unsigned int popBuffer();$/;"	p	class:Music	access:public	signature:()
popState	src/Core/Core.cpp	/^void Core::popState()$/;"	f	class:Core	signature:()
popState	src/Core/Core.h	/^        static void popState();$/;"	p	class:Core	access:public	signature:()
position	test/Bullet/Particle.h	/^        Vector2f position;$/;"	m	class:Particle	access:protected
position	test/Bullet/Particle.h	/^    Vector2f position;$/;"	m	struct:ParticleProperties	access:public
post	src/Graphics/Renderer.cpp	/^void Renderer::post() const$/;"	f	class:Renderer	signature:() const
post	src/Graphics/Renderer.h	/^        void post() const;$/;"	p	class:Renderer	access:public	signature:() const
pre	src/Graphics/Renderer.cpp	/^void Renderer::pre() const$/;"	f	class:Renderer	signature:() const
pre	src/Graphics/Renderer.h	/^        void pre() const;$/;"	p	class:Renderer	access:public	signature:() const
prefix	src/stblib/stb_image.c	/^   int16 prefix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
primitiveType	src/Graphics/VertexBuffer.h	/^        int primitiveType;$/;"	m	class:VertexBuffer	access:private
printDebug	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::printDebug()$/;"	f	class:VertexBuffer	signature:()
printDebug	src/Graphics/VertexBuffer.h	/^        void printDebug();$/;"	p	class:VertexBuffer	access:public	signature:()
printStateStack	src/Core/Core.cpp	/^void Core::printStateStack()$/;"	f	class:Core	signature:()
printStateStack	src/Core/Core.h	/^        static void printStateStack();$/;"	p	class:Core	access:public	signature:()
processColor	test/Bullet/Particle.cpp	/^void Particle::processColor(float step, float* colors)$/;"	f	class:Particle	signature:(float step, float* colors)
processColor	test/Bullet/Particle.h	/^        void processColor(float step, float* colors);$/;"	p	class:Particle	access:public	signature:(float step, float* colors)
processTranslation	test/Bullet/Particle.cpp	/^void Particle::processTranslation(float step, float* vertices)$/;"	f	class:Particle	signature:(float step, float* vertices)
processTranslation	test/Bullet/Particle.h	/^        void processTranslation(float step, float* vertices);$/;"	p	class:Particle	access:public	signature:(float step, float* vertices)
process_frame_header	src/stblib/stb_image.c	/^static int process_frame_header(jpeg *z, int scan)$/;"	f	file:	signature:(jpeg *z, int scan)
process_marker	src/stblib/stb_image.c	/^static int process_marker(jpeg *z, int m)$/;"	f	file:	signature:(jpeg *z, int m)
process_scan_header	src/stblib/stb_image.c	/^static int process_scan_header(jpeg *z)$/;"	f	file:	signature:(jpeg *z)
psd_load	src/stblib/stb_image.c	/^static stbi_uc *psd_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
psd_test	src/stblib/stb_image.c	/^static int psd_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
pushState	src/Core/Core.cpp	/^void Core::pushState(CoreState* s)$/;"	f	class:Core	signature:(CoreState* s)
pushState	src/Core/Core.h	/^        static void pushState(CoreState* s);$/;"	p	class:Core	access:public	signature:(CoreState* s)
r	src/Graphics/Color.h	/^        float r;$/;"	m	class:Color	access:public
radToDeg	src/Math/Math.cpp	/^float Math::radToDeg(float radians)$/;"	f	class:Math	signature:(float radians)
radToDeg	src/Math/Math.h	/^    float radToDeg(float radians);$/;"	p	namespace:Math	signature:(float radians)
random	test/Bullet/ParticleEmitter.h	/^        Random random;$/;"	m	class:ParticleEmitter	access:protected
ratio	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
raw_data	src/stblib/stb_image.c	/^      void *raw_data;$/;"	m	struct:__anon9::__anon10	file:	access:public
read	src/stblib/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon5	access:public
readColor	src/Memory/Buffer.cpp	/^void Buffer::readColor(Color* c)$/;"	f	class:Buffer	signature:(Color* c)
readColor	src/Memory/Buffer.h	/^        void readColor(Color* c);$/;"	p	class:Buffer	access:public	signature:(Color* c)
readFloat	src/Memory/Buffer.cpp	/^float Buffer::readFloat()$/;"	f	class:Buffer	signature:()
readFloat	src/Memory/Buffer.h	/^        float readFloat();$/;"	p	class:Buffer	access:public	signature:()
readLine	src/Utils/FileLoader.cpp	/^bool FileLoader::readLine(std::string* line)$/;"	f	class:FileLoader	signature:(std::string* line)
readLine	src/Utils/FileLoader.h	/^        bool readLine(std::string* line);$/;"	p	class:FileLoader	access:public	signature:(std::string* line)
readLoc	src/Memory/Buffer.h	/^        char* readLoc;$/;"	m	class:Buffer	access:protected
readVector	src/Memory/Buffer.cpp	/^void Buffer::readVector(Vector2f* v)$/;"	f	class:Buffer	signature:(Vector2f* v)
readVector	src/Memory/Buffer.h	/^        void readVector(Vector2f* v);$/;"	p	class:Buffer	access:public	signature:(Vector2f* v)
read_from_callbacks	src/stblib/stb_image.c	/^   int read_from_callbacks;$/;"	m	struct:__anon6	file:	access:public
rect	test/Menu.h	/^        VertexBuffer rect;$/;"	m	class:Menu	access:private
refill_buffer	src/stblib/stb_image.c	/^static void refill_buffer(stbi *s)$/;"	f	file:	signature:(stbi *s)
refill_buffer	src/stblib/stb_image.c	/^static void refill_buffer(stbi *s);$/;"	p	file:	signature:(stbi *s)
registerState	src/Core/CoreRegistry.cpp	/^void CoreRegistry::registerState(const std::string& identifier, CoreState* entry)$/;"	f	class:CoreRegistry	signature:(const std::string& identifier, CoreState* entry)
registerState	src/Core/CoreRegistry.h	/^        static void registerState(const std::string& identifier, CoreState* entry);$/;"	p	class:CoreRegistry	access:public	signature:(const std::string& identifier, CoreState* entry)
registry	src/Core/CoreRegistry.cpp	/^std::map<std::string, CoreState*>& CoreRegistry::registry()$/;"	f	class:CoreRegistry	signature:()
registry	src/Core/CoreRegistry.h	/^        static std::map<std::string, CoreState*>& registry();$/;"	p	class:CoreRegistry	access:private	signature:()
remove	src/System/ResourceCache.h	/^        void remove(const std::string& identifier)$/;"	f	class:ResourceCache	access:public	signature:(const std::string& identifier)
remove	src/Utils/BinaryHeap.h	/^        T* remove()$/;"	f	class:BinaryHeap	access:public	signature:()
remove	test/Bullet/ParticleMem.cpp	/^void VectorMem::remove(int index)$/;"	f	class:VectorMem	signature:(int index)
remove	test/Bullet/ParticleMem.h	/^        virtual void remove(int index) = 0;$/;"	p	class:ParticleMem	access:public	signature:(int index)
remove	test/Bullet/ParticleMem.h	/^        void remove(int index);$/;"	p	class:VectorMem	access:public	signature:(int index)
removeAll	src/System/ResourceCache.h	/^        virtual void removeAll()$/;"	f	class:ResourceCache	access:public	signature:()
renderer	src/Core/Core.cpp	/^Renderer* Core::renderer = NULL;$/;"	m	class:Core	file:
renderer	src/Core/Core.h	/^        static Renderer* renderer;$/;"	m	class:Core	access:private
resample	src/stblib/stb_image.c	/^   resample_row_func resample;$/;"	m	struct:__anon11	file:	access:public
resample_row_1	src/stblib/stb_image.c	/^static uint8 *resample_row_1(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_func	src/stblib/stb_image.c	/^typedef uint8 *(*resample_row_func)(uint8 *out, uint8 *in0, uint8 *in1,$/;"	t	file:
resample_row_generic	src/stblib/stb_image.c	/^static uint8 *resample_row_generic(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_h_2	src/stblib/stb_image.c	/^static uint8*  resample_row_h_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_hv_2	src/stblib/stb_image.c	/^static uint8 *resample_row_hv_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
resample_row_v_2	src/stblib/stb_image.c	/^static uint8* resample_row_v_2(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)$/;"	f	file:	signature:(uint8 *out, uint8 *in_near, uint8 *in_far, int w, int hs)
reset	src/stblib/stb_image.c	/^static void reset(jpeg *j)$/;"	f	file:	signature:(jpeg *j)
resetChoice	test/Menu.cpp	/^void Menu::resetChoice()$/;"	f	class:Menu	signature:()
resetChoice	test/Menu.h	/^        void resetChoice();$/;"	p	class:Menu	access:public	signature:()
resmap	src/System/ResourceCache.h	/^        std::map<std::string, ResourcePointer> resmap;$/;"	m	class:ResourceCache	access:protected
resourceManager	src/Core/Core.cpp	/^ResourceManager* Core::resourceManager = NULL;$/;"	m	class:Core	file:
resourceManager	src/Core/Core.h	/^        static ResourceManager* resourceManager;$/;"	m	class:Core	access:private
restart_interval	src/stblib/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon9	file:	access:public
rewind	src/Memory/Buffer.cpp	/^void Buffer::rewind()$/;"	f	class:Buffer	signature:()
rewind	src/Memory/Buffer.h	/^        void rewind();$/;"	p	class:Buffer	access:public	signature:()
right	src/Math/Rect.h	/^        T right;$/;"	m	class:Rect	access:public
rng	src/Math/Random.h	/^static Random rng;$/;"	v
rotate	src/Graphics/Renderer.cpp	/^void Renderer::rotate(float rotation)$/;"	f	class:Renderer	signature:(float rotation)
rotate	src/Graphics/Renderer.h	/^        void rotate(float rotation);$/;"	p	class:Renderer	access:public	signature:(float rotation)
rtrim	src/Utils/StringUtils.cpp	/^std::string& rtrim(std::string& s) $/;"	f	signature:(std::string& s)
rtrim	src/Utils/StringUtils.h	/^std::string& rtrim(std::string& s);$/;"	p	signature:(std::string& s)
run	src/Core/Core.cpp	/^void Core::run()$/;"	f	class:Core	signature:()
run	src/Core/Core.h	/^        static void run();$/;"	p	class:Core	access:public	signature:()
running	src/Core/Core.cpp	/^bool Core::running = false;$/;"	m	class:Core	file:
running	src/Core/Core.h	/^        static bool running;$/;"	m	class:Core	access:private
s	src/stblib/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon15	file:	access:public
s	src/stblib/stb_image.c	/^   stbi *s;$/;"	m	struct:__anon9	file:	access:public
s0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
s1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
sampleCount	src/Audio/Music.h	/^            std::size_t sampleCount;$/;"	m	struct:Music::SoundChunk	access:public
sampleCount	src/Audio/Music.h	/^        std::size_t  sampleCount;$/;"	m	class:Music	access:private
sampleCount	src/Audio/SoundBuffer.h	/^        std::size_t  sampleCount;$/;"	m	class:SoundBuffer	access:private
sampleRate	src/Audio/Music.h	/^        unsigned int sampleRate;$/;"	m	class:Music	access:private
sampleRate	src/Audio/SoundBuffer.h	/^        unsigned int sampleRate;$/;"	m	class:SoundBuffer	access:private
samples	src/Audio/Music.h	/^            short* samples;$/;"	m	struct:Music::SoundChunk	access:public
samplesProcessed	src/Audio/Music.h	/^        unsigned long samplesProcessed;$/;"	m	class:Music	access:private
scale	src/Graphics/Renderer.cpp	/^void Renderer::scale(float x, float y)$/;"	f	class:Renderer	signature:(float x, float y)
scale	src/Graphics/Renderer.h	/^        void scale(float x, float y);$/;"	p	class:Renderer	access:public	signature:(float x, float y)
scan_n	src/stblib/stb_image.c	/^   int scan_n, order[4];$/;"	m	struct:__anon9	file:	access:public
seed	src/Math/Random.h	/^        unsigned long seed;$/;"	m	class:Random	access:private
seek	src/Audio/Music.cpp	/^void Music::seek(float time)$/;"	f	class:Music	signature:(float time)
seek	src/Audio/Music.h	/^        void seek(float time);$/;"	p	class:Music	access:public	signature:(float time)
set	src/Graphics/Color.cpp	/^void Color::set(float r, float g, float b, float a)$/;"	f	class:Color	signature:(float r, float g, float b, float a)
set	src/Graphics/Color.h	/^        void set(float r, float g, float b, float a);$/;"	p	class:Color	access:public	signature:(float r, float g, float b, float a)
set	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::set(int numVertices, int ptype, int bufferLayout, int type)$/;"	f	class:VertexBuffer	signature:(int numVertices, int ptype, int bufferLayout, int type)
set	src/Graphics/VertexBuffer.h	/^        void set(int numVertices, int ptype, int bufferLayout, int type);$/;"	p	class:VertexBuffer	access:public	signature:(int numVertices, int ptype, int bufferLayout, int type)
set	src/Math/Vector2.h	/^        void set(T X, T Y)$/;"	f	class:Vector2	access:public	signature:(T X, T Y)
set	src/Math/Vector2.h	/^        void set(const Vector2<T>& v)$/;"	f	class:Vector2	access:public	signature:(const Vector2<T>& v)
set	test/Bullet/BulletEmitter.cpp	/^void BulletEmitter::set()$/;"	f	class:BulletEmitter	signature:()
set	test/Bullet/BulletEmitter.h	/^        void set();$/;"	p	class:BulletEmitter	access:public	signature:()
set	test/Bullet/Burst.cpp	/^void Burst::set()$/;"	f	class:Burst	signature:()
set	test/Bullet/Burst.h	/^        virtual void set();$/;"	p	class:Burst	access:public	signature:()
set	test/Bullet/Particle.cpp	/^void Particle::set(const ParticleProperties& p)$/;"	f	class:Particle	signature:(const ParticleProperties& p)
set	test/Bullet/Particle.cpp	/^void Particle::set(const Vector2f& position, $/;"	f	class:Particle	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life)
set	test/Bullet/Particle.h	/^        void set(const ParticleProperties& p);$/;"	p	class:Particle	access:public	signature:(const ParticleProperties& p)
set	test/Bullet/Particle.h	/^        void set(const Vector2f& position, $/;"	p	class:Particle	access:public	signature:(const Vector2f& position, const Vector2f& velocity, const Vector2f acceleration, const Color& color, float life=2.0f)
set	test/Bullet/ParticleEmitter.h	/^        virtual void set() = 0;$/;"	p	class:ParticleEmitter	access:public	signature:()
setBuffer	src/Memory/Buffer.cpp	/^void Buffer::setBuffer(char* buf, int bufferLength)$/;"	f	class:Buffer	signature:(char* buf, int bufferLength)
setBuffer	src/Memory/Buffer.h	/^        void setBuffer(char* buf, int bufferLength);$/;"	p	class:Buffer	access:public	signature:(char* buf, int bufferLength)
setDrawType	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::setDrawType(int t)$/;"	f	class:VertexBuffer	signature:(int t)
setDrawType	src/Graphics/VertexBuffer.h	/^        void setDrawType(int t);$/;"	p	class:VertexBuffer	access:public	signature:(int t)
setEndBuffer	src/Audio/Music.cpp	/^void Music::setEndBuffer(unsigned int bufferNum, bool value)$/;"	f	class:Music	signature:(unsigned int bufferNum, bool value)
setEndBuffer	src/Audio/Music.h	/^        void setEndBuffer(unsigned int bufferNum, bool value);$/;"	p	class:Music	access:public	signature:(unsigned int bufferNum, bool value)
setFont	src/Graphics/Text.cpp	/^void Text::setFont(const FontPtr& f)$/;"	f	class:Text	signature:(const FontPtr& f)
setFont	src/Graphics/Text.h	/^        void setFont(const FontPtr& f);$/;"	p	class:Text	access:public	signature:(const FontPtr& f)
setLoop	src/Audio/Music.cpp	/^void Music::setLoop(bool value)$/;"	f	class:Music	signature:(bool value)
setLoop	src/Audio/Music.h	/^        void setLoop(bool value);$/;"	p	class:Music	access:public	signature:(bool value)
setLoop	src/Audio/Sound.cpp	/^void Sound::setLoop(bool loop)$/;"	f	class:Sound	signature:(bool loop)
setLoop	src/Audio/Sound.h	/^        virtual void setLoop(bool loop);$/;"	p	class:Sound	access:public	signature:(bool loop)
setMetrics	test/Menu.cpp	/^void Menu::setMetrics(const MenuMetrics& m)$/;"	f	class:Menu	signature:(const MenuMetrics& m)
setMetrics	test/Menu.cpp	/^void Menu::setMetrics(int margin, int newline)$/;"	f	class:Menu	signature:(int margin, int newline)
setMetrics	test/Menu.h	/^        void setMetrics(const MenuMetrics& m);$/;"	p	class:Menu	access:public	signature:(const MenuMetrics& m)
setMetrics	test/Menu.h	/^        void setMetrics(int margin, int newline);$/;"	p	class:Menu	access:public	signature:(int margin, int newline)
setMousePos	src/System/Input.cpp	/^void Input::setMousePos(int x, int y)$/;"	f	class:Input	signature:(int x, int y)
setMousePos	src/System/Input.h	/^        void setMousePos(int x, int y);$/;"	p	class:Input	access:public	signature:(int x, int y)
setReadLoc	src/Memory/Buffer.h	/^        template<class T> void setReadLoc(int count)$/;"	f	class:Buffer	access:public	signature:(int count)
setReadLoc	src/Memory/Buffer.h	/^        void setReadLoc(int count, size_t bytesPerCount);$/;"	p	class:Buffer	access:public	signature:(int count, size_t bytesPerCount)
setSamplesProcessed	src/Audio/Music.cpp	/^void Music::setSamplesProcessed(unsigned long i)$/;"	f	class:Music	signature:(unsigned long i)
setSamplesProcessed	src/Audio/Music.h	/^        void setSamplesProcessed(unsigned long i);$/;"	p	class:Music	access:public	signature:(unsigned long i)
setSeed	src/Math/Random.cpp	/^void Random::setSeed()$/;"	f	class:Random	signature:()
setSeed	src/Math/Random.cpp	/^void Random::setSeed(unsigned long seedv)$/;"	f	class:Random	signature:(unsigned long seedv)
setSeed	src/Math/Random.h	/^        void setSeed();$/;"	p	class:Random	access:public	signature:()
setSeed	src/Math/Random.h	/^        void setSeed(unsigned long seedv);$/;"	p	class:Random	access:public	signature:(unsigned long seedv)
setSkittles	test/Bullet/Burst.cpp	/^void Burst::setSkittles(bool value)$/;"	f	class:Burst	signature:(bool value)
setSkittles	test/Bullet/Burst.h	/^        void setSkittles(bool value);$/;"	p	class:Burst	access:public	signature:(bool value)
setStream	src/Audio/Music.cpp	/^void Music::setStream(bool value)$/;"	f	class:Music	signature:(bool value)
setStream	src/Audio/Music.h	/^        void setStream(bool value);$/;"	p	class:Music	access:public	signature:(bool value)
setText	src/Graphics/Text.cpp	/^void Text::setText(const std::string& t)$/;"	f	class:Text	signature:(const std::string& t)
setText	src/Graphics/Text.h	/^        void setText(const std::string& t);$/;"	p	class:Text	access:public	signature:(const std::string& t)
setTexture	src/Graphics/Section.cpp	/^void Section::setTexture(Texture* tex)$/;"	f	class:Section	signature:(Texture* tex)
setTexture	src/Graphics/Section.h	/^        void setTexture(Texture* tex);$/;"	p	class:Section	access:public	signature:(Texture* tex)
setTexture	src/Graphics/Texture.cpp	/^void Texture::setTexture(GLuint tex, int w, int h)$/;"	f	class:Texture	signature:(GLuint tex, int w, int h)
setTexture	src/Graphics/Texture.h	/^        void setTexture(GLuint tex, int w = 0, int h = 0);$/;"	p	class:Texture	access:public	signature:(GLuint tex, int w = 0, int h = 0)
setTime	src/Audio/Sound.cpp	/^void Sound::setTime(float time)$/;"	f	class:Sound	signature:(float time)
setTime	src/Audio/Sound.h	/^        void setTime(float time);$/;"	p	class:Sound	access:public	signature:(float time)
setTitle	test/Menu.cpp	/^void Menu::setTitle(const std::string& title)$/;"	f	class:Menu	signature:(const std::string& title)
setTitle	test/Menu.h	/^        void setTitle(const std::string& title);$/;"	p	class:Menu	access:public	signature:(const std::string& title)
setVolume	src/Audio/Listener.cpp	/^void Listener::setVolume(float volume)$/;"	f	class:Listener	signature:(float volume)
setVolume	src/Audio/Listener.h	/^        static void setVolume(float volume);$/;"	p	class:Listener	access:public	signature:(float volume)
setVolume	src/Audio/Sound.cpp	/^void Sound::setVolume(float volume)$/;"	f	class:Sound	signature:(float volume)
setVolume	src/Audio/Sound.h	/^        void setVolume(float volume);$/;"	p	class:Sound	access:public	signature:(float volume)
setWriteLoc	src/Memory/Buffer.h	/^        template<class T> void setWriteLoc(int count)$/;"	f	class:Buffer	access:public	signature:(int count)
setWriteLoc	src/Memory/Buffer.h	/^        void setWriteLoc(int count, size_t bytesPerCount);$/;"	p	class:Buffer	access:public	signature:(int count, size_t bytesPerCount)
shiftsigned	src/stblib/stb_image.c	/^static int shiftsigned(int v, int shift, int bits)$/;"	f	file:	signature:(int v, int shift, int bits)
size	src/Memory/Buffer.cpp	/^size_t Buffer::size()$/;"	f	class:Buffer	signature:()
size	src/Memory/Buffer.h	/^        size_t size();$/;"	p	class:Buffer	access:public	signature:()
size	src/Utils/BinaryHeap.h	/^        size_t size;$/;"	m	class:BinaryHeap	access:private
size	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
size	src/stblib/stb_image.c	/^   uint8  size[257];$/;"	m	struct:__anon8	file:	access:public
size	src/stblib/stb_image.c	/^   uint8  size[288];$/;"	m	struct:__anon12	file:	access:public
size	test/Bullet/ParticleMem.cpp	/^const int VectorMem::size() const$/;"	f	class:VectorMem	signature:() const
size	test/Bullet/ParticleMem.h	/^        const int size() const;$/;"	p	class:VectorMem	access:public	signature:() const
size	test/Bullet/ParticleMem.h	/^        virtual const int size() const = 0;$/;"	p	class:ParticleMem	access:public	signature:() const
skip	src/stblib/stb_image.c	/^static void skip(stbi *s, int n)$/;"	f	file:	signature:(stbi *s, int n)
skip	src/stblib/stb_image.h	/^   void     (*skip)  (void *user,unsigned n);            \/\/ skip the next 'n' bytes$/;"	m	struct:__anon5	access:public
skittles	test/Bullet/Burst.h	/^        bool skittles;$/;"	m	class:Burst	access:private
sortItems	test/Menu.cpp	/^void Menu::sortItems()$/;"	f	class:Menu	signature:()
sortItems	test/Menu.h	/^        void sortItems();$/;"	p	class:Menu	access:public	signature:()
sound	test/TestState.h	/^        SoundPtr sound;$/;"	m	class:TestState	access:private
soundCache	src/System/ResourceManager.h	/^    SoundCache soundCache;$/;"	m	struct:ResourceManager	access:public
sounds	src/Core/CoreState.h	/^        SoundCache* sounds;$/;"	m	class:CoreState	access:protected
source	src/Audio/Sound.h	/^        ALuint source;$/;"	m	class:Sound	access:protected
start	src/Utils/Timer.cpp	/^void Timer::start()$/;"	f	class:Timer	signature:()
start	src/Utils/Timer.h	/^        void start();$/;"	p	class:Timer	access:public	signature:()
startTicks	src/Utils/Timer.h	/^        float startTicks;$/;"	m	class:Timer	access:private
startTime	src/Utils/FpsCounter.h	/^        float startTime;$/;"	m	class:FpsCounter	access:private
start_callbacks	src/stblib/stb_image.c	/^static void start_callbacks(stbi *s, stbi_io_callbacks *c, void *user)$/;"	f	file:	signature:(stbi *s, stbi_io_callbacks *c, void *user)
start_file	src/stblib/stb_image.c	/^static void start_file(stbi *s, FILE *f)$/;"	f	file:	signature:(stbi *s, FILE *f)
start_mem	src/stblib/stb_image.c	/^static void start_mem(stbi *s, uint8 const *buffer, int len)$/;"	f	file:	signature:(stbi *s, uint8 const *buffer, int len)
start_x	src/stblib/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
start_y	src/stblib/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
started	src/Utils/Timer.h	/^        bool started;$/;"	m	class:Timer	access:private
state	src/Math/Random.h	/^        unsigned long state[N];$/;"	m	class:Random	access:private
stateIndex	src/Math/Random.h	/^        unsigned long stateIndex;$/;"	m	class:Random	access:private
states	src/Core/Core.cpp	/^std::stack<CoreState*> Core::states;$/;"	m	class:Core	file:
states	src/Core/Core.h	/^        static std::stack<CoreState*> states;$/;"	m	class:Core	access:private
status	src/Audio/Sound.h	/^        Status status;$/;"	m	class:Sound	access:protected
stbi	src/stblib/stb_image.c	/^} stbi;$/;"	t	typeref:struct:__anon6	file:
stbi_YCbCr_installed	src/stblib/stb_image.c	/^static stbi_YCbCr_to_RGB_run stbi_YCbCr_installed = YCbCr_to_RGB_row;$/;"	v	file:
stbi_YCbCr_to_RGB_run	src/stblib/stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi_bmp_info	src/stblib/stb_image.c	/^static int stbi_bmp_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_bmp_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_bmp_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_bmp_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_bmp_load(stbi *s,int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s,int *x, int *y, int *comp, int req_comp)
stbi_bmp_test	src/stblib/stb_image.c	/^static int      stbi_bmp_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_bmp_test	src/stblib/stb_image.c	/^static int stbi_bmp_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_convert_iphone_png_to_rgb	src/stblib/stb_image.c	/^void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_convert_iphone_png_to_rgb	src/stblib/stb_image.h	/^extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);$/;"	p	signature:(int flag_true_if_should_convert)
stbi_de_iphone	src/stblib/stb_image.c	/^static void stbi_de_iphone(png *z)$/;"	f	file:	signature:(png *z)
stbi_de_iphone_flag	src/stblib/stb_image.c	/^static int stbi_de_iphone_flag = 0;$/;"	v	file:
stbi_dequantize_t	src/stblib/stb_image.c	/^typedef uint8 stbi_dequantize_t;$/;"	t	file:
stbi_dequantize_t	src/stblib/stb_image.c	/^typedef unsigned short stbi_dequantize_t;$/;"	t	file:
stbi_failure_reason	src/stblib/stb_image.c	/^const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_failure_reason	src/stblib/stb_image.h	/^extern const char *stbi_failure_reason  (void); $/;"	p	signature:(void)
stbi_fill_gif_background	src/stblib/stb_image.c	/^static void stbi_fill_gif_background(stbi_gif *g)$/;"	f	file:	signature:(stbi_gif *g)
stbi_gif	src/stblib/stb_image.c	/^} stbi_gif;$/;"	t	typeref:struct:stbi_gif_struct	file:
stbi_gif_header	src/stblib/stb_image.c	/^static int stbi_gif_header(stbi *s, stbi_gif *g, int *comp, int is_info)$/;"	f	file:	signature:(stbi *s, stbi_gif *g, int *comp, int is_info)
stbi_gif_info	src/stblib/stb_image.c	/^static int      stbi_gif_info(stbi *s, int *x, int *y, int *comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_gif_info	src/stblib/stb_image.c	/^static int stbi_gif_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_gif_info_raw	src/stblib/stb_image.c	/^static int stbi_gif_info_raw(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_gif_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_gif_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_gif_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_gif_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_gif_load_next	src/stblib/stb_image.c	/^static uint8 *stbi_gif_load_next(stbi *s, stbi_gif *g, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, stbi_gif *g, int *comp, int req_comp)
stbi_gif_lzw	src/stblib/stb_image.c	/^} stbi_gif_lzw;$/;"	t	typeref:struct:stbi_gif_lzw_struct	file:
stbi_gif_lzw_struct	src/stblib/stb_image.c	/^typedef struct stbi_gif_lzw_struct {$/;"	s	file:
stbi_gif_lzw_struct::first	src/stblib/stb_image.c	/^   uint8 first;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_lzw_struct::prefix	src/stblib/stb_image.c	/^   int16 prefix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_lzw_struct::suffix	src/stblib/stb_image.c	/^   uint8 suffix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
stbi_gif_parse_colortable	src/stblib/stb_image.c	/^static void stbi_gif_parse_colortable(stbi *s, uint8 pal[256][4], int num_entries, int transp)$/;"	f	file:	signature:(stbi *s, uint8 pal[256][4], int num_entries, int transp)
stbi_gif_struct	src/stblib/stb_image.c	/^typedef struct stbi_gif_struct$/;"	s	file:
stbi_gif_struct::bgindex	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::codes	src/stblib/stb_image.c	/^   stbi_gif_lzw codes[4096];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::color_table	src/stblib/stb_image.c	/^   uint8 *color_table;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::cur_x	src/stblib/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::cur_y	src/stblib/stb_image.c	/^   int cur_x, cur_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::eflags	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::flags	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::h	src/stblib/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::lflags	src/stblib/stb_image.c	/^   int lflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::line_size	src/stblib/stb_image.c	/^   int line_size;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::lpal	src/stblib/stb_image.c	/^   uint8 lpal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::max_x	src/stblib/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::max_y	src/stblib/stb_image.c	/^   int max_x, max_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::out	src/stblib/stb_image.c	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::pal	src/stblib/stb_image.c	/^   uint8  pal[256][4];$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::parse	src/stblib/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::ratio	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::start_x	src/stblib/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::start_y	src/stblib/stb_image.c	/^   int start_x, start_y;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::step	src/stblib/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::transparent	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_struct::w	src/stblib/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
stbi_gif_test	src/stblib/stb_image.c	/^static int      stbi_gif_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_gif_test	src/stblib/stb_image.c	/^static int stbi_gif_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_hdr_info	src/stblib/stb_image.c	/^static int stbi_hdr_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_hdr_load	src/stblib/stb_image.c	/^static float   *stbi_hdr_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_hdr_load	src/stblib/stb_image.c	/^static float *stbi_hdr_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_hdr_test	src/stblib/stb_image.c	/^static int      stbi_hdr_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_hdr_test	src/stblib/stb_image.c	/^static int stbi_hdr_test(stbi* s)$/;"	f	file:	signature:(stbi* s)
stbi_hdr_to_ldr_gamma	src/stblib/stb_image.c	/^void   stbi_hdr_to_ldr_gamma(float gamma) { h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_gamma	src/stblib/stb_image.h	/^   extern void   stbi_hdr_to_ldr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_hdr_to_ldr_scale	src/stblib/stb_image.c	/^void   stbi_hdr_to_ldr_scale(float scale) { h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_hdr_to_ldr_scale	src/stblib/stb_image.h	/^   extern void   stbi_hdr_to_ldr_scale(float scale);$/;"	p	signature:(float scale)
stbi_idct_8x8	src/stblib/stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_idct_installed	src/stblib/stb_image.c	/^static stbi_idct_8x8 stbi_idct_installed = idct_block;$/;"	v	file:
stbi_image_free	src/stblib/stb_image.c	/^void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_image_free	src/stblib/stb_image.h	/^extern void     stbi_image_free      (void *retval_from_stbi_load);$/;"	p	signature:(void *retval_from_stbi_load)
stbi_info	src/stblib/stb_image.c	/^int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info	src/stblib/stb_image.h	/^extern int      stbi_info            (char const *filename,     int *x, int *y, int *comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	src/stblib/stb_image.c	/^int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_callbacks	src/stblib/stb_image.h	/^extern int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp)
stbi_info_from_file	src/stblib/stb_image.c	/^int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_file	src/stblib/stb_image.h	/^extern int      stbi_info_from_file  (FILE *f,                  int *x, int *y, int *comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	src/stblib/stb_image.c	/^int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_info_from_memory	src/stblib/stb_image.h	/^extern int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_info_main	src/stblib/stb_image.c	/^static int stbi_info_main(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_inline	src/stblib/stb_image.c	83;"	d	file:
stbi_inline	src/stblib/stb_image.c	85;"	d	file:
stbi_inline	src/stblib/stb_image.c	88;"	d	file:
stbi_install_YCbCr_to_RGB	src/stblib/stb_image.c	/^void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_YCbCr_to_RGB	src/stblib/stb_image.h	/^extern void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func);$/;"	p	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_idct	src/stblib/stb_image.c	/^void stbi_install_idct(stbi_idct_8x8 func)$/;"	f	signature:(stbi_idct_8x8 func)
stbi_install_idct	src/stblib/stb_image.h	/^extern void stbi_install_idct(stbi_idct_8x8 func);$/;"	p	signature:(stbi_idct_8x8 func)
stbi_io_callbacks	src/stblib/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon5
stbi_is_hdr	src/stblib/stb_image.c	/^extern int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr	src/stblib/stb_image.h	/^extern int      stbi_is_hdr          (char const *filename);$/;"	p	signature:(char const *filename)
stbi_is_hdr_from_callbacks	src/stblib/stb_image.c	/^extern int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_callbacks	src/stblib/stb_image.h	/^extern int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	src/stblib/stb_image.c	/^extern int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_file	src/stblib/stb_image.h	/^extern int      stbi_is_hdr_from_file(FILE *f);$/;"	p	signature:(FILE *f)
stbi_is_hdr_from_memory	src/stblib/stb_image.c	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_is_hdr_from_memory	src/stblib/stb_image.h	/^extern int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);$/;"	p	signature:(stbi_uc const *buffer, int len)
stbi_jpeg_info	src/stblib/stb_image.c	/^static int      stbi_jpeg_info(stbi *s, int *x, int *y, int *comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_jpeg_info	src/stblib/stb_image.c	/^static int stbi_jpeg_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_jpeg_info_raw	src/stblib/stb_image.c	/^static int stbi_jpeg_info_raw(jpeg *j, int *x, int *y, int *comp)$/;"	f	file:	signature:(jpeg *j, int *x, int *y, int *comp)
stbi_jpeg_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_jpeg_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_jpeg_load	src/stblib/stb_image.c	/^static unsigned char *stbi_jpeg_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_jpeg_test	src/stblib/stb_image.c	/^static int      stbi_jpeg_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_jpeg_test	src/stblib/stb_image.c	/^static int stbi_jpeg_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_ldr_to_hdr_gamma	src/stblib/stb_image.c	/^void   stbi_ldr_to_hdr_gamma(float gamma) { l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_gamma	src/stblib/stb_image.h	/^   extern void   stbi_ldr_to_hdr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_ldr_to_hdr_scale	src/stblib/stb_image.c	/^void   stbi_ldr_to_hdr_scale(float scale) { l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_ldr_to_hdr_scale	src/stblib/stb_image.h	/^   extern void   stbi_ldr_to_hdr_scale(float scale);$/;"	p	signature:(float scale)
stbi_load	src/stblib/stb_image.c	/^unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load	src/stblib/stb_image.h	/^extern stbi_uc *stbi_load            (char const *filename,     int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	src/stblib/stb_image.c	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	src/stblib/stb_image.h	/^extern stbi_uc *stbi_load_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	src/stblib/stb_image.c	/^unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	src/stblib/stb_image.h	/^extern stbi_uc *stbi_load_from_file  (FILE *f,                  int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	src/stblib/stb_image.c	/^unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	src/stblib/stb_image.h	/^extern stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_main	src/stblib/stb_image.c	/^static unsigned char *stbi_load_main(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_loadf	src/stblib/stb_image.c	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf	src/stblib/stb_image.h	/^   extern float *stbi_loadf            (char const *filename,   int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	src/stblib/stb_image.c	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	src/stblib/stb_image.h	/^   extern float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	src/stblib/stb_image.c	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	src/stblib/stb_image.h	/^   extern float *stbi_loadf_from_file  (FILE *f,                int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	src/stblib/stb_image.c	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	src/stblib/stb_image.h	/^   extern float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_main	src/stblib/stb_image.c	/^float *stbi_loadf_main(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_lrot	src/stblib/stb_image.c	114;"	d	file:
stbi_lrot	src/stblib/stb_image.c	116;"	d	file:
stbi_out_gif_code	src/stblib/stb_image.c	/^static void stbi_out_gif_code(stbi_gif *g, uint16 code)$/;"	f	file:	signature:(stbi_gif *g, uint16 code)
stbi_pic_info	src/stblib/stb_image.c	/^static int stbi_pic_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_pic_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_pic_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_pic_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_pic_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_pic_test	src/stblib/stb_image.c	/^static int      stbi_pic_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_pic_test	src/stblib/stb_image.c	/^static int stbi_pic_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_png_info	src/stblib/stb_image.c	/^static int      stbi_png_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_png_info	src/stblib/stb_image.c	/^static int      stbi_png_info(stbi *s, int *x, int *y, int *comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_png_info_raw	src/stblib/stb_image.c	/^static int stbi_png_info_raw(png *p, int *x, int *y, int *comp)$/;"	f	file:	signature:(png *p, int *x, int *y, int *comp)
stbi_png_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_png_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_png_load	src/stblib/stb_image.c	/^static unsigned char *stbi_png_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_png_partial	src/stblib/stb_image.c	/^int stbi_png_partial; \/\/ a quick hack to only allow decoding some of a PNG... I should implement real streaming support instead$/;"	v
stbi_png_test	src/stblib/stb_image.c	/^static int      stbi_png_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_png_test	src/stblib/stb_image.c	/^static int stbi_png_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_process_gif_raster	src/stblib/stb_image.c	/^static uint8 *stbi_process_gif_raster(stbi *s, stbi_gif *g)$/;"	f	file:	signature:(stbi *s, stbi_gif *g)
stbi_psd_info	src/stblib/stb_image.c	/^static int stbi_psd_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_psd_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_psd_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_psd_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_psd_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_psd_test	src/stblib/stb_image.c	/^static int      stbi_psd_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_psd_test	src/stblib/stb_image.c	/^static int stbi_psd_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_resample	src/stblib/stb_image.c	/^} stbi_resample;$/;"	t	typeref:struct:__anon11	file:
stbi_rewind	src/stblib/stb_image.c	/^static void stbi_rewind(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_set_unpremultiply_on_load	src/stblib/stb_image.c	/^void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_set_unpremultiply_on_load	src/stblib/stb_image.h	/^extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);$/;"	p	signature:(int flag_true_if_should_unpremultiply)
stbi_stdio_callbacks	src/stblib/stb_image.c	/^static stbi_io_callbacks stbi_stdio_callbacks =$/;"	v	file:
stbi_tga_info	src/stblib/stb_image.c	/^int stbi_tga_info(stbi *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi *s, int *x, int *y, int *comp)
stbi_tga_info	src/stblib/stb_image.c	/^static int      stbi_tga_info(stbi *s, int *x, int *y, int *comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp)
stbi_tga_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_tga_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_tga_load	src/stblib/stb_image.c	/^static stbi_uc *stbi_tga_load(stbi *s, int *x, int *y, int *comp, int req_comp);$/;"	p	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
stbi_tga_test	src/stblib/stb_image.c	/^static int      stbi_tga_test(stbi *s);$/;"	p	file:	signature:(stbi *s)
stbi_tga_test	src/stblib/stb_image.c	/^static int stbi_tga_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
stbi_uc	src/stblib/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_unpremultiply_on_load	src/stblib/stb_image.c	/^static int stbi_unpremultiply_on_load = 0;$/;"	v	file:
stbi_zlib_decode_buffer	src/stblib/stb_image.c	/^int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_buffer	src/stblib/stb_image.h	/^extern int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_malloc	src/stblib/stb_image.c	/^char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc	src/stblib/stb_image.h	/^extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	src/stblib/stb_image.c	/^char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize	src/stblib/stb_image.h	/^extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);$/;"	p	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	src/stblib/stb_image.c	/^char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	src/stblib/stb_image.c	/^int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_buffer	src/stblib/stb_image.h	/^extern int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	src/stblib/stb_image.c	/^char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_noheader_malloc	src/stblib/stb_image.h	/^extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
stbtt_BakeFontBitmap	src/stblib/stb_truetype.h	/^extern int stbtt_BakeFontBitmap(const unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f	signature:(const unsigned char *data, int offset, float pixel_height, unsigned char *pixels, int pw, int ph, int first_char, int num_chars, stbtt_bakedchar *chardata)
stbtt_BakeFontBitmap	src/stblib/stb_truetype.h	/^extern int stbtt_BakeFontBitmap(const unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	p	signature:(const unsigned char *data, int offset, float pixel_height, unsigned char *pixels, int pw, int ph, int first_char, int num_chars, stbtt_bakedchar *chardata)
stbtt_CompareUTF8toUTF16_bigendian	src/stblib/stb_truetype.h	/^extern int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2);$/;"	p	signature:(const char *s1, int len1, const char *s2, int len2)
stbtt_CompareUTF8toUTF16_bigendian	src/stblib/stb_truetype.h	/^int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2) $/;"	f	signature:(const char *s1, int len1, const char *s2, int len2)
stbtt_FindGlyphIndex	src/stblib/stb_truetype.h	/^int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	signature:(const stbtt_fontinfo *info, int unicode_codepoint)
stbtt_FindGlyphIndex	src/stblib/stb_truetype.h	/^int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint);$/;"	p	signature:(const stbtt_fontinfo *info, int unicode_codepoint)
stbtt_FindMatchingFont	src/stblib/stb_truetype.h	/^extern int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags);$/;"	p	signature:(const unsigned char *fontdata, const char *name, int flags)
stbtt_FindMatchingFont	src/stblib/stb_truetype.h	/^int stbtt_FindMatchingFont(const unsigned char *font_collection, const char *name_utf8, stbtt_int32 flags)$/;"	f	signature:(const unsigned char *font_collection, const char *name_utf8, stbtt_int32 flags)
stbtt_FlattenCurves	src/stblib/stb_truetype.h	/^stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f	signature:(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
stbtt_FreeBitmap	src/stblib/stb_truetype.h	/^extern void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata);$/;"	p	signature:(unsigned char *bitmap, void *userdata)
stbtt_FreeBitmap	src/stblib/stb_truetype.h	/^void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	signature:(unsigned char *bitmap, void *userdata)
stbtt_FreeShape	src/stblib/stb_truetype.h	/^extern void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *vertices);$/;"	p	signature:(const stbtt_fontinfo *info, stbtt_vertex *vertices)
stbtt_FreeShape	src/stblib/stb_truetype.h	/^void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	signature:(const stbtt_fontinfo *info, stbtt_vertex *v)
stbtt_GetBakedQuad	src/stblib/stb_truetype.h	/^extern void stbtt_GetBakedQuad(stbtt_bakedchar *chardata, int pw, int ph,  \/\/ same data as above$/;"	p	signature:(stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)
stbtt_GetBakedQuad	src/stblib/stb_truetype.h	/^void stbtt_GetBakedQuad(stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f	signature:(stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)
stbtt_GetCodepointBitmap	src/stblib/stb_truetype.h	/^extern unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff);$/;"	p	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)
stbtt_GetCodepointBitmap	src/stblib/stb_truetype.h	/^unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)
stbtt_GetCodepointBitmapBox	src/stblib/stb_truetype.h	/^extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1);$/;"	p	signature:(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetCodepointBitmapBox	src/stblib/stb_truetype.h	/^void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f	signature:(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetCodepointBitmapBoxSubpixel	src/stblib/stb_truetype.h	/^extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1);$/;"	p	signature:(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetCodepointBitmapBoxSubpixel	src/stblib/stb_truetype.h	/^void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f	signature:(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetCodepointBitmapSubpixel	src/stblib/stb_truetype.h	/^extern unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff);$/;"	p	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)
stbtt_GetCodepointBitmapSubpixel	src/stblib/stb_truetype.h	/^unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)
stbtt_GetCodepointBox	src/stblib/stb_truetype.h	/^extern int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1);$/;"	p	signature:(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)
stbtt_GetCodepointBox	src/stblib/stb_truetype.h	/^int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f	signature:(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)
stbtt_GetCodepointHMetrics	src/stblib/stb_truetype.h	/^extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing);$/;"	p	signature:(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)
stbtt_GetCodepointHMetrics	src/stblib/stb_truetype.h	/^void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f	signature:(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)
stbtt_GetCodepointKernAdvance	src/stblib/stb_truetype.h	/^extern int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2);$/;"	p	signature:(const stbtt_fontinfo *info, int ch1, int ch2)
stbtt_GetCodepointKernAdvance	src/stblib/stb_truetype.h	/^int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	signature:(const stbtt_fontinfo *info, int ch1, int ch2)
stbtt_GetCodepointShape	src/stblib/stb_truetype.h	/^extern int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices);$/;"	p	signature:(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)
stbtt_GetCodepointShape	src/stblib/stb_truetype.h	/^int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f	signature:(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)
stbtt_GetFontNameString	src/stblib/stb_truetype.h	/^const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f	signature:(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)
stbtt_GetFontNameString	src/stblib/stb_truetype.h	/^extern const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID);$/;"	p	signature:(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)
stbtt_GetFontOffsetForIndex	src/stblib/stb_truetype.h	/^extern int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index);$/;"	p	signature:(const unsigned char *data, int index)
stbtt_GetFontOffsetForIndex	src/stblib/stb_truetype.h	/^int stbtt_GetFontOffsetForIndex(const unsigned char *font_collection, int index)$/;"	f	signature:(const unsigned char *font_collection, int index)
stbtt_GetFontVMetrics	src/stblib/stb_truetype.h	/^extern void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap);$/;"	p	signature:(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)
stbtt_GetFontVMetrics	src/stblib/stb_truetype.h	/^void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f	signature:(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)
stbtt_GetGlyphBitmap	src/stblib/stb_truetype.h	/^extern unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff);$/;"	p	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)
stbtt_GetGlyphBitmap	src/stblib/stb_truetype.h	/^unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)
stbtt_GetGlyphBitmapBox	src/stblib/stb_truetype.h	/^extern void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1);$/;"	p	signature:(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetGlyphBitmapBox	src/stblib/stb_truetype.h	/^void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f	signature:(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetGlyphBitmapBoxSubpixel	src/stblib/stb_truetype.h	/^extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1);$/;"	p	signature:(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetGlyphBitmapBoxSubpixel	src/stblib/stb_truetype.h	/^void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f	signature:(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
stbtt_GetGlyphBitmapSubpixel	src/stblib/stb_truetype.h	/^extern unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff);$/;"	p	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)
stbtt_GetGlyphBitmapSubpixel	src/stblib/stb_truetype.h	/^unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f	signature:(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)
stbtt_GetGlyphBox	src/stblib/stb_truetype.h	/^extern int  stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1);$/;"	p	signature:(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
stbtt_GetGlyphBox	src/stblib/stb_truetype.h	/^int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f	signature:(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
stbtt_GetGlyphHMetrics	src/stblib/stb_truetype.h	/^extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing);$/;"	p	signature:(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)
stbtt_GetGlyphHMetrics	src/stblib/stb_truetype.h	/^void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f	signature:(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)
stbtt_GetGlyphKernAdvance	src/stblib/stb_truetype.h	/^extern int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2);$/;"	p	signature:(const stbtt_fontinfo *info, int glyph1, int glyph2)
stbtt_GetGlyphKernAdvance	src/stblib/stb_truetype.h	/^int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	signature:(const stbtt_fontinfo *info, int glyph1, int glyph2)
stbtt_GetGlyphShape	src/stblib/stb_truetype.h	/^extern int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **vertices);$/;"	p	signature:(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **vertices)
stbtt_GetGlyphShape	src/stblib/stb_truetype.h	/^int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f	signature:(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)
stbtt_InitFont	src/stblib/stb_truetype.h	/^extern int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset);$/;"	p	signature:(stbtt_fontinfo *info, const unsigned char *data, int offset)
stbtt_InitFont	src/stblib/stb_truetype.h	/^int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data2, int fontstart)$/;"	f	signature:(stbtt_fontinfo *info, const unsigned char *data2, int fontstart)
stbtt_MakeCodepointBitmap	src/stblib/stb_truetype.h	/^extern void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint);$/;"	p	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)
stbtt_MakeCodepointBitmap	src/stblib/stb_truetype.h	/^void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)
stbtt_MakeCodepointBitmapSubpixel	src/stblib/stb_truetype.h	/^extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint);$/;"	p	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)
stbtt_MakeCodepointBitmapSubpixel	src/stblib/stb_truetype.h	/^void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)
stbtt_MakeGlyphBitmap	src/stblib/stb_truetype.h	/^extern void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph);$/;"	p	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)
stbtt_MakeGlyphBitmap	src/stblib/stb_truetype.h	/^void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)
stbtt_MakeGlyphBitmapSubpixel	src/stblib/stb_truetype.h	/^extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph);$/;"	p	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)
stbtt_MakeGlyphBitmapSubpixel	src/stblib/stb_truetype.h	/^void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f	signature:(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)
stbtt_Rasterize	src/stblib/stb_truetype.h	/^extern void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata);$/;"	p	signature:(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)
stbtt_Rasterize	src/stblib/stb_truetype.h	/^void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f	signature:(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)
stbtt_ScaleForPixelHeight	src/stblib/stb_truetype.h	/^extern float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float pixels);$/;"	p	signature:(const stbtt_fontinfo *info, float pixels)
stbtt_ScaleForPixelHeight	src/stblib/stb_truetype.h	/^float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	signature:(const stbtt_fontinfo *info, float height)
stbtt__CompareUTF8toUTF16_bigendian_prefix	src/stblib/stb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(const stbtt_uint8 *s1, stbtt_int32 len1, const stbtt_uint8 *s2, stbtt_int32 len2) $/;"	f	signature:(const stbtt_uint8 *s1, stbtt_int32 len1, const stbtt_uint8 *s2, stbtt_int32 len2)
stbtt__GetGlyfOffset	src/stblib/stb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	signature:(const stbtt_fontinfo *info, int glyph_index)
stbtt__active_edge	src/stblib/stb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	src/stblib/stb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__active_edge::dx	src/stblib/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	access:public
stbtt__active_edge::ey	src/stblib/stb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	access:public
stbtt__active_edge::next	src/stblib/stb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge	access:public
stbtt__active_edge::valid	src/stblib/stb_truetype.h	/^   int valid;$/;"	m	struct:stbtt__active_edge	access:public
stbtt__active_edge::x	src/stblib/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	access:public
stbtt__add_point	src/stblib/stb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	signature:(stbtt__point *points, int n, float x, float y)
stbtt__bitmap	src/stblib/stb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon23
stbtt__check_size16	src/stblib/stb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	src/stblib/stb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__close_shape	src/stblib/stb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f	signature:(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off, stbtt_int32 sx, stbtt_int32 sy, stbtt_int32 scx, stbtt_int32 scy, stbtt_int32 cx, stbtt_int32 cy)
stbtt__edge	src/stblib/stb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	src/stblib/stb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__edge::invert	src/stblib/stb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	access:public
stbtt__edge::x0	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
stbtt__edge::x1	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
stbtt__edge::y0	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
stbtt__edge::y1	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
stbtt__edge_compare	src/stblib/stb_truetype.h	/^static int stbtt__edge_compare(const void *p, const void *q)$/;"	f	signature:(const void *p, const void *q)
stbtt__fill_active_edges	src/stblib/stb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f	signature:(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)
stbtt__find_table	src/stblib/stb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f	signature:(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)
stbtt__isfont	src/stblib/stb_truetype.h	/^static int stbtt__isfont(const stbtt_uint8 *font)$/;"	f	signature:(const stbtt_uint8 *font)
stbtt__matches	src/stblib/stb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f	signature:(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)
stbtt__matchpair	src/stblib/stb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f	signature:(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)
stbtt__point	src/stblib/stb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon30
stbtt__rasterize	src/stblib/stb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f	signature:(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)
stbtt__rasterize_sorted_edges	src/stblib/stb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f	signature:(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)
stbtt__tesselate_curve	src/stblib/stb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f	signature:(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)
stbtt_aligned_quad	src/stblib/stb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon19
stbtt_bakedchar	src/stblib/stb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon18
stbtt_fontinfo	src/stblib/stb_truetype.h	/^} stbtt_fontinfo;$/;"	t	typeref:struct:__anon20
stbtt_int16	src/stblib/stb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	src/stblib/stb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	src/stblib/stb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_setvertex	src/stblib/stb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int16 x, stbtt_int16 y, stbtt_int16 cx, stbtt_int16 cy)$/;"	f	signature:(stbtt_vertex *v, stbtt_uint8 type, stbtt_int16 x, stbtt_int16 y, stbtt_int16 cx, stbtt_int16 cy)
stbtt_tag	src/stblib/stb_truetype.h	693;"	d
stbtt_tag4	src/stblib/stb_truetype.h	692;"	d
stbtt_uint16	src/stblib/stb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	src/stblib/stb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	src/stblib/stb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	src/stblib/stb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon22
stbtt_vertex_type	src/stblib/stb_truetype.h	478;"	d
stdio_eof	src/stblib/stb_image.c	/^static int stdio_eof(void *user)$/;"	f	file:	signature:(void *user)
stdio_read	src/stblib/stb_image.c	/^static int stdio_read(void *user, char *data, int size)$/;"	f	file:	signature:(void *user, char *data, int size)
stdio_skip	src/stblib/stb_image.c	/^static void stdio_skip(void *user, unsigned n)$/;"	f	file:	signature:(void *user, unsigned n)
step	src/stblib/stb_image.c	/^   int parse, step;$/;"	m	struct:stbi_gif_struct	file:	access:public
stop	src/Audio/Music.cpp	/^void Music::stop()$/;"	f	class:Music	signature:()
stop	src/Audio/Music.h	/^        void stop();$/;"	p	class:Music	access:public	signature:()
stop	src/Audio/Sound.cpp	/^void Sound::stop()$/;"	f	class:Sound	signature:()
stop	src/Audio/Sound.h	/^        virtual void stop();$/;"	p	class:Sound	access:public	signature:()
stop	src/Utils/Timer.cpp	/^void Timer::stop()$/;"	f	class:Timer	signature:()
stop	src/Utils/Timer.h	/^        void stop();$/;"	p	class:Timer	access:public	signature:()
streamData	src/Audio/SoundStream.cpp	/^void GLFWCALL SoundStream::streamData(void* arg)$/;"	f	class:SoundStream	signature:(void* arg)
streamData	src/Audio/SoundStream.h	/^        static void streamData(void* arg);$/;"	p	class:SoundStream	access:public	signature:(void* arg)
streaming	src/Audio/Music.h	/^        bool streaming;$/;"	m	class:Music	access:private
stride	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
stringCmp	test/Menu.cpp	/^const bool Menu::stringCmp(const Text& a, const Text& b)$/;"	f	class:Menu	signature:(const Text& a, const Text& b)
stringCmp	test/Menu.h	/^        static const bool stringCmp(const Text& a, const Text& b);$/;"	p	class:Menu	access:public	signature:(const Text& a, const Text& b)
suffix	src/stblib/stb_image.c	/^   uint8 suffix;$/;"	m	struct:stbi_gif_lzw_struct	file:	access:public
swap	src/Utils/BinaryHeap.h	/^        void swap(int first, int second)$/;"	f	class:BinaryHeap	access:public	signature:(int first, int second)
swap	test/Bullet/ParticleMem.cpp	/^void VectorMem::swap(int index1, int index2)$/;"	f	class:VectorMem	signature:(int index1, int index2)
swap	test/Bullet/ParticleMem.h	/^        void swap(int index1, int index2);$/;"	p	class:VectorMem	access:protected	signature:(int index1, int index2)
swapData	test/Bullet/ParticleMem.cpp	/^void VectorMem::swapData(int index1, int index2)$/;"	f	class:VectorMem	signature:(int index1, int index2)
swapData	test/Bullet/ParticleMem.h	/^        void swapData(int index1, int index2);$/;"	p	class:VectorMem	access:protected	signature:(int index1, int index2)
t0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
t1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
temp_bitmap	src/stblib/stb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
text	src/Graphics/Text.h	/^        std::string text;$/;"	m	class:Text	access:private
text	test/GameState.h	/^        Text text;$/;"	m	class:GameState	access:private
text	test/MusicState.h	/^        Text text;$/;"	m	class:MusicState	access:private
text	test/TestState.h	/^        Text text;$/;"	m	class:TestState	access:private
text2	test/TestState.h	/^        Text text2;$/;"	m	class:TestState	access:private
texture	src/Graphics/Font.h	/^        unsigned int texture;$/;"	m	class:Font	access:protected
texture	src/Graphics/Section.h	/^        const Texture* texture;$/;"	m	class:Section	access:private
texture	src/Graphics/Texture.h	/^        GLuint texture;$/;"	m	class:Texture	access:protected
textureCache	src/System/ResourceManager.h	/^    TextureCache textureCache;$/;"	m	struct:ResourceManager	access:public
textures	src/Core/CoreState.h	/^        TextureCache* textures;$/;"	m	class:CoreState	access:protected
tga_info	src/stblib/stb_image.c	/^static int tga_info(stbi *s, int *x, int *y, int *comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp)
tga_load	src/stblib/stb_image.c	/^static stbi_uc *tga_load(stbi *s, int *x, int *y, int *comp, int req_comp)$/;"	f	file:	signature:(stbi *s, int *x, int *y, int *comp, int req_comp)
tga_test	src/stblib/stb_image.c	/^static int tga_test(stbi *s)$/;"	f	file:	signature:(stbi *s)
thread	src/Audio/Music.h	/^        GLFWthread thread;$/;"	m	class:Music	access:private
title	src/Core/Core.cpp	/^std::string Core::title = "";$/;"	m	class:Core	file:
title	src/Core/Core.h	/^        static std::string title;$/;"	m	class:Core	access:private
title	test/Menu.h	/^        Text title;$/;"	m	class:Menu	access:private
toString	src/Utils/StringUtils.h	/^template<typename T> inline std::string toString(T var)$/;"	f	signature:(T var)
todo	src/stblib/stb_image.c	/^   int restart_interval, todo;$/;"	m	struct:__anon9	file:	access:public
top	src/Math/Rect.h	/^        T top;$/;"	m	class:Rect	access:public
tq	src/stblib/stb_image.c	/^      int tq;$/;"	m	struct:__anon9::__anon10	file:	access:public
transparent	src/stblib/stb_image.c	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:stbi_gif_struct	file:	access:public
trim	src/Utils/StringUtils.cpp	/^std::string& trim(std::string& s) $/;"	f	signature:(std::string& s)
trim	src/Utils/StringUtils.h	/^std::string& trim(std::string& s);$/;"	p	signature:(std::string& s)
ttBYTE	src/stblib/stb_truetype.h	672;"	d
ttCHAR	src/stblib/stb_truetype.h	673;"	d
ttFixed	src/stblib/stb_truetype.h	674;"	d
ttLONG	src/stblib/stb_truetype.h	/^   stbtt_int32 ttLONG(const stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f	signature:(const stbtt_uint8 *p)
ttLONG	src/stblib/stb_truetype.h	681;"	d
ttSHORT	src/stblib/stb_truetype.h	/^   stbtt_int16 ttSHORT(const stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	signature:(const stbtt_uint8 *p)
ttSHORT	src/stblib/stb_truetype.h	679;"	d
ttULONG	src/stblib/stb_truetype.h	/^   stbtt_uint32 ttULONG(const stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f	signature:(const stbtt_uint8 *p)
ttULONG	src/stblib/stb_truetype.h	680;"	d
ttUSHORT	src/stblib/stb_truetype.h	/^   stbtt_uint16 ttUSHORT(const stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	signature:(const stbtt_uint8 *p)
ttUSHORT	src/stblib/stb_truetype.h	678;"	d
ttf_buffer	src/stblib/stb_truetype.h	/^char ttf_buffer[1<<20];$/;"	v
ttf_buffer	src/stblib/stb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
type	src/stblib/stb_image.c	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17	file:	access:public
type	src/stblib/stb_image.c	/^   uint32 type;$/;"	m	struct:__anon14	file:	access:public
type	src/stblib/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon22	access:public
uint	src/stblib/stb_image.c	/^typedef unsigned int   uint;$/;"	t	file:
uint16	src/stblib/stb_image.c	/^typedef unsigned short uint16;$/;"	t	file:
uint32	src/stblib/stb_image.c	/^typedef unsigned int   uint32;$/;"	t	file:
uint8	src/stblib/stb_image.c	/^typedef unsigned char  uint8;$/;"	t	file:
unpause	src/Utils/Timer.cpp	/^void Timer::unpause()$/;"	f	class:Timer	signature:()
unpause	src/Utils/Timer.h	/^        void unpause();$/;"	p	class:Timer	access:public	signature:()
unregisterAll	src/Core/CoreRegistry.cpp	/^void CoreRegistry::unregisterAll()$/;"	f	class:CoreRegistry	signature:()
unregisterAll	src/Core/CoreRegistry.h	/^        static void unregisterAll();$/;"	p	class:CoreRegistry	access:public	signature:()
update	src/Audio/SoundBuffer.cpp	/^void SoundBuffer::update()$/;"	f	class:SoundBuffer	signature:()
update	src/Audio/SoundBuffer.h	/^        void update();$/;"	p	class:SoundBuffer	access:public	signature:()
updateBuffers	src/Graphics/VertexBuffer.cpp	/^void VertexBuffer::updateBuffers()$/;"	f	class:VertexBuffer	signature:()
updateBuffers	src/Graphics/VertexBuffer.h	/^        void updateBuffers();$/;"	p	class:VertexBuffer	access:public	signature:()
userdata	src/stblib/stb_truetype.h	/^   void           * userdata;$/;"	m	struct:__anon20	access:public
v	src/stblib/stb_image.c	/^      int h,v;$/;"	m	struct:__anon9::__anon10	file:	access:public
valid	src/stblib/stb_truetype.h	/^   int valid;$/;"	m	struct:stbtt__active_edge	access:public
validate_uint32	src/stblib/stb_image.c	/^typedef unsigned char validate_uint32[sizeof(uint32)==4 ? 1 : -1];$/;"	t	file:
value	src/stblib/stb_image.c	/^   uint16 value[288]; $/;"	m	struct:__anon12	file:	access:public
values	src/stblib/stb_image.c	/^   uint8  values[256];$/;"	m	struct:__anon8	file:	access:public
vb	src/Graphics/Section.h	/^        VertexBuffer vb;$/;"	m	class:Section	access:private
vb	test/TestState.h	/^        VertexBuffer* vb;$/;"	m	class:TestState	access:private
velocity	test/Bullet/Particle.h	/^        Vector2f velocity;$/;"	m	class:Particle	access:protected
velocity	test/Bullet/Particle.h	/^    Vector2f velocity;$/;"	m	struct:ParticleProperties	access:public
version	src/Core/Core.cpp	/^const std::string Core::version = "0.02a";$/;"	m	class:Core	file:
version	src/Core/Core.h	/^        static const std::string version;$/;"	m	class:Core	access:private
vertexBuffer	test/Bullet/ParticleMem.h	/^        float* vertexBuffer;$/;"	m	class:ParticleMem	access:protected
vertexBufferSize	test/Bullet/ParticleMem.h	/^        int vertexBufferSize;$/;"	m	class:ParticleMem	access:protected
vertexCount	src/Graphics/VertexBuffer.h	/^        int vertexCount;$/;"	m	class:VertexBuffer	access:private
vs	src/stblib/stb_image.c	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon11	file:	access:public
w	src/stblib/stb_image.c	/^   int w,h;$/;"	m	struct:stbi_gif_struct	file:	access:public
w	src/stblib/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon23	access:public
w2	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
w_lores	src/stblib/stb_image.c	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon11	file:	access:public
width	src/Core/Core.cpp	/^unsigned int Core::width = 0;$/;"	m	class:Core	file:
width	src/Core/Core.h	/^        static unsigned int width;$/;"	m	class:Core	access:private
width	src/Graphics/Texture.h	/^        int width;$/;"	m	class:Texture	access:protected
writeColor	src/Memory/Buffer.cpp	/^void Buffer::writeColor(const Color& c)$/;"	f	class:Buffer	signature:(const Color& c)
writeColor	src/Memory/Buffer.cpp	/^void Buffer::writeColor(float r, float g, float b, float a)$/;"	f	class:Buffer	signature:(float r, float g, float b, float a)
writeColor	src/Memory/Buffer.h	/^        void writeColor(const Color& c);$/;"	p	class:Buffer	access:public	signature:(const Color& c)
writeColor	src/Memory/Buffer.h	/^        void writeColor(float r, float g, float b, float a);$/;"	p	class:Buffer	access:public	signature:(float r, float g, float b, float a)
writeFloat	src/Memory/Buffer.cpp	/^void Buffer::writeFloat(float f)$/;"	f	class:Buffer	signature:(float f)
writeFloat	src/Memory/Buffer.h	/^        void writeFloat(float value);$/;"	p	class:Buffer	access:public	signature:(float value)
writeLoc	src/Memory/Buffer.h	/^        char* writeLoc;$/;"	m	class:Buffer	access:protected
writeVector	src/Memory/Buffer.cpp	/^void Buffer::writeVector(const Vector2f& v)$/;"	f	class:Buffer	signature:(const Vector2f& v)
writeVector	src/Memory/Buffer.cpp	/^void Buffer::writeVector(float x, float y)$/;"	f	class:Buffer	signature:(float x, float y)
writeVector	src/Memory/Buffer.h	/^        void writeVector(const Vector2f& v);$/;"	p	class:Buffer	access:public	signature:(const Vector2f& v)
writeVector	src/Memory/Buffer.h	/^        void writeVector(float x, float y);$/;"	p	class:Buffer	access:public	signature:(float x, float y)
x	src/Math/Vector2.h	/^        T x;$/;"	m	class:Vector2	access:public
x	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
x	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
x	src/stblib/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon30	access:public
x	src/stblib/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	access:public
x0	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
x0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
x0	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
x1	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
x1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
x1	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
xadvance	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
xoff	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
y	src/Math/Vector2.h	/^        T y;$/;"	m	class:Vector2	access:public
y	src/stblib/stb_image.c	/^      int x,y,w2,h2;$/;"	m	struct:__anon9::__anon10	file:	access:public
y	src/stblib/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy;$/;"	m	struct:__anon22	access:public
y	src/stblib/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon30	access:public
y0	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
y0	src/stblib/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon19	access:public
y0	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
y1	src/stblib/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	access:public
y1	src/stblib/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon19	access:public
y1	src/stblib/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon18	access:public
yoff	src/stblib/stb_truetype.h	/^   float xoff,yoff,xadvance;   $/;"	m	struct:__anon18	access:public
ypos	src/stblib/stb_image.c	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon11	file:	access:public
ystep	src/stblib/stb_image.c	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon11	file:	access:public
z_distance	src/stblib/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon13	file:	access:public
z_expandable	src/stblib/stb_image.c	/^   int   z_expandable;$/;"	m	struct:__anon13	file:	access:public
z_length	src/stblib/stb_image.c	/^   zhuffman z_length, z_distance;$/;"	m	struct:__anon13	file:	access:public
zbuf	src/stblib/stb_image.c	/^} zbuf;$/;"	t	typeref:struct:__anon13	file:
zbuffer	src/stblib/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13	file:	access:public
zbuffer_end	src/stblib/stb_image.c	/^   uint8 *zbuffer, *zbuffer_end;$/;"	m	struct:__anon13	file:	access:public
zbuild_huffman	src/stblib/stb_image.c	/^static int zbuild_huffman(zhuffman *z, uint8 *sizelist, int num)$/;"	f	file:	signature:(zhuffman *z, uint8 *sizelist, int num)
zget8	src/stblib/stb_image.c	/^stbi_inline static int zget8(zbuf *z)$/;"	f	file:	signature:(zbuf *z)
zhuffman	src/stblib/stb_image.c	/^} zhuffman;$/;"	t	typeref:struct:__anon12	file:
zhuffman_decode	src/stblib/stb_image.c	/^stbi_inline static int zhuffman_decode(zbuf *a, zhuffman *z)$/;"	f	file:	signature:(zbuf *a, zhuffman *z)
zout	src/stblib/stb_image.c	/^   char *zout;$/;"	m	struct:__anon13	file:	access:public
zout_end	src/stblib/stb_image.c	/^   char *zout_end;$/;"	m	struct:__anon13	file:	access:public
zout_start	src/stblib/stb_image.c	/^   char *zout_start;$/;"	m	struct:__anon13	file:	access:public
zreceive	src/stblib/stb_image.c	/^stbi_inline static unsigned int zreceive(zbuf *z, int n)$/;"	f	file:	signature:(zbuf *z, int n)
~BinaryHeap	src/Utils/BinaryHeap.h	/^        ~BinaryHeap()$/;"	f	class:BinaryHeap	access:public	signature:()
~Buffer	src/Memory/Buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer	signature:()
~Buffer	src/Memory/Buffer.h	/^        virtual ~Buffer();$/;"	p	class:Buffer	access:public	signature:()
~Bullet	test/Bullet/Bullet.cpp	/^Bullet::~Bullet()$/;"	f	class:Bullet	signature:()
~Bullet	test/Bullet/Bullet.h	/^        ~Bullet();$/;"	p	class:Bullet	access:public	signature:()
~BulletEmitter	test/Bullet/BulletEmitter.cpp	/^BulletEmitter::~BulletEmitter()$/;"	f	class:BulletEmitter	signature:()
~BulletEmitter	test/Bullet/BulletEmitter.h	/^        ~BulletEmitter();$/;"	p	class:BulletEmitter	access:public	signature:()
~BulletMem	test/Bullet/ParticleMem.cpp	/^BulletMem::~BulletMem()$/;"	f	class:BulletMem	signature:()
~BulletMem	test/Bullet/ParticleMem.h	/^        ~BulletMem();$/;"	p	class:BulletMem	access:public	signature:()
~CoreState	src/Core/CoreState.cpp	/^CoreState::~CoreState()$/;"	f	class:CoreState	signature:()
~CoreState	src/Core/CoreState.h	/^        virtual ~CoreState();$/;"	p	class:CoreState	access:public	signature:()
~Drawable	src/Graphics/Drawable.h	/^        virtual ~Drawable() {} $/;"	f	class:Drawable	access:public	signature:()
~FileLoader	src/Utils/FileLoader.cpp	/^FileLoader::~FileLoader()$/;"	f	class:FileLoader	signature:()
~FileLoader	src/Utils/FileLoader.h	/^        ~FileLoader();$/;"	p	class:FileLoader	access:public	signature:()
~Font	src/Graphics/Font.cpp	/^Font::~Font()$/;"	f	class:Font	signature:()
~Font	src/Graphics/Font.h	/^        ~Font();$/;"	p	class:Font	access:public	signature:()
~FpsCounter	src/Utils/FpsCounter.cpp	/^FpsCounter::~FpsCounter()$/;"	f	class:FpsCounter	signature:()
~FpsCounter	src/Utils/FpsCounter.h	/^        ~FpsCounter();$/;"	p	class:FpsCounter	access:public	signature:()
~GameState	test/GameState.cpp	/^GameState::~GameState()$/;"	f	class:GameState	signature:()
~GameState	test/GameState.h	/^        ~GameState();$/;"	p	class:GameState	access:public	signature:()
~Input	src/System/Input.cpp	/^Input::~Input()$/;"	f	class:Input	signature:()
~Input	src/System/Input.h	/^        ~Input();$/;"	p	class:Input	access:public	signature:()
~Menu	test/Menu.cpp	/^Menu::~Menu()$/;"	f	class:Menu	signature:()
~Menu	test/Menu.h	/^        ~Menu();$/;"	p	class:Menu	access:public	signature:()
~Music	src/Audio/Music.cpp	/^Music::~Music()$/;"	f	class:Music	signature:()
~Music	src/Audio/Music.h	/^        ~Music();$/;"	p	class:Music	access:public	signature:()
~MusicState	test/MusicState.cpp	/^MusicState::~MusicState()$/;"	f	class:MusicState	signature:()
~MusicState	test/MusicState.h	/^        ~MusicState();$/;"	p	class:MusicState	access:public	signature:()
~Particle	test/Bullet/Particle.cpp	/^Particle::~Particle()$/;"	f	class:Particle	signature:()
~Particle	test/Bullet/Particle.h	/^        ~Particle();$/;"	p	class:Particle	access:public	signature:()
~ParticleEmitter	test/Bullet/ParticleEmitter.cpp	/^ParticleEmitter::~ParticleEmitter()$/;"	f	class:ParticleEmitter	signature:()
~ParticleEmitter	test/Bullet/ParticleEmitter.h	/^        virtual ~ParticleEmitter();$/;"	p	class:ParticleEmitter	access:public	signature:()
~ParticleMem	test/Bullet/ParticleMem.cpp	/^ParticleMem::~ParticleMem()$/;"	f	class:ParticleMem	signature:()
~ParticleMem	test/Bullet/ParticleMem.h	/^        virtual ~ParticleMem();$/;"	p	class:ParticleMem	access:public	signature:()
~PatternState	test/PatternState.cpp	/^PatternState::~PatternState()$/;"	f	class:PatternState	signature:()
~PatternState	test/PatternState.h	/^        ~PatternState();$/;"	p	class:PatternState	access:public	signature:()
~Renderer	src/Graphics/Renderer.cpp	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
~Renderer	src/Graphics/Renderer.h	/^        ~Renderer();$/;"	p	class:Renderer	access:public	signature:()
~ResourceCache	src/System/ResourceCache.h	/^        ~ResourceCache()$/;"	f	class:ResourceCache	access:public	signature:()
~ResourceManager	src/System/ResourceManager.cpp	/^ResourceManager::~ResourceManager()$/;"	f	class:ResourceManager	signature:()
~ResourceManager	src/System/ResourceManager.h	/^    ~ResourceManager();$/;"	p	struct:ResourceManager	access:public	signature:()
~Sample	src/Audio/Sample.cpp	/^Sample::~Sample()$/;"	f	class:Sample	signature:()
~Sample	src/Audio/Sample.h	/^        ~Sample();$/;"	p	class:Sample	access:public	signature:()
~Section	src/Graphics/Section.cpp	/^Section::~Section()$/;"	f	class:Section	signature:()
~Section	src/Graphics/Section.h	/^        ~Section();$/;"	p	class:Section	access:public	signature:()
~Sound	src/Audio/Sound.cpp	/^Sound::~Sound()$/;"	f	class:Sound	signature:()
~Sound	src/Audio/Sound.h	/^        ~Sound();$/;"	p	class:Sound	access:public	signature:()
~SoundBuffer	src/Audio/SoundBuffer.cpp	/^SoundBuffer::~SoundBuffer()$/;"	f	class:SoundBuffer	signature:()
~SoundBuffer	src/Audio/SoundBuffer.h	/^        ~SoundBuffer();$/;"	p	class:SoundBuffer	access:public	signature:()
~TestState	test/TestState.cpp	/^TestState::~TestState()$/;"	f	class:TestState	signature:()
~TestState	test/TestState.h	/^        ~TestState();$/;"	p	class:TestState	access:public	signature:()
~Text	src/Graphics/Text.cpp	/^Text::~Text()$/;"	f	class:Text	signature:()
~Text	src/Graphics/Text.h	/^        ~Text();$/;"	p	class:Text	access:public	signature:()
~Texture	src/Graphics/Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
~Texture	src/Graphics/Texture.h	/^        virtual ~Texture();$/;"	p	class:Texture	access:public	signature:()
~VectorMem	test/Bullet/ParticleMem.cpp	/^VectorMem::~VectorMem()$/;"	f	class:VectorMem	signature:()
~VectorMem	test/Bullet/ParticleMem.h	/^        ~VectorMem();$/;"	p	class:VectorMem	access:public	signature:()
~VertexBuffer	src/Graphics/VertexBuffer.cpp	/^VertexBuffer::~VertexBuffer()$/;"	f	class:VertexBuffer	signature:()
~VertexBuffer	src/Graphics/VertexBuffer.h	/^        ~VertexBuffer();$/;"	p	class:VertexBuffer	access:public	signature:()
